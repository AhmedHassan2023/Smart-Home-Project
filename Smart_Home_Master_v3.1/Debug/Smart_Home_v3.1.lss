
Smart_Home_v3.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000562c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000015a  00800060  0000562c  000056c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000024  008001ba  008001ba  0000581a  2**0
                  ALLOC
  3 .stab         00005220  00000000  00000000  0000581c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001d2f  00000000  00000000  0000aa3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000c76b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000c8ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000ca1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000e664  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000f54f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000102fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0001045c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000106e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010eb7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 eb 18 	jmp	0x31d6	; 0x31d6 <__vector_4>
      14:	0c 94 1e 19 	jmp	0x323c	; 0x323c <__vector_5>
      18:	0c 94 a6 16 	jmp	0x2d4c	; 0x2d4c <__vector_6>
      1c:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <__vector_7>
      20:	0c 94 0c 17 	jmp	0x2e18	; 0x2e18 <__vector_8>
      24:	0c 94 3f 17 	jmp	0x2e7e	; 0x2e7e <__vector_9>
      28:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <__vector_10>
      2c:	0c 94 3f 12 	jmp	0x247e	; 0x247e <__vector_11>
      30:	0c 94 c5 0e 	jmp	0x1d8a	; 0x1d8a <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 54 07 	jmp	0xea8	; 0xea8 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e2       	ldi	r30, 0x2C	; 44
      68:	f6 e5       	ldi	r31, 0x56	; 86
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3b       	cpi	r26, 0xBA	; 186
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa eb       	ldi	r26, 0xBA	; 186
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3d       	cpi	r26, 0xDE	; 222
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 51 19 	call	0x32a2	; 0x32a2 <main>
      8a:	0c 94 14 2b 	jmp	0x5628	; 0x5628 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 dd 2a 	jmp	0x55ba	; 0x55ba <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e8       	ldi	r26, 0x88	; 136
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f9 2a 	jmp	0x55f2	; 0x55f2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e9 2a 	jmp	0x55d2	; 0x55d2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 05 2b 	jmp	0x560a	; 0x560a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e9 2a 	jmp	0x55d2	; 0x55d2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 05 2b 	jmp	0x560a	; 0x560a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 dd 2a 	jmp	0x55ba	; 0x55ba <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 e8       	ldi	r24, 0x88	; 136
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f9 2a 	jmp	0x55f2	; 0x55f2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e9 2a 	jmp	0x55d2	; 0x55d2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 05 2b 	jmp	0x560a	; 0x560a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e9 2a 	jmp	0x55d2	; 0x55d2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 05 2b 	jmp	0x560a	; 0x560a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 e9 2a 	jmp	0x55d2	; 0x55d2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 05 2b 	jmp	0x560a	; 0x560a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ed 2a 	jmp	0x55da	; 0x55da <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 09 2b 	jmp	0x5612	; 0x5612 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidInit>:
static u8* ADC_ChainArr= NULL;
static u8 ADC_u8ChainLength=0;
static u8 ADC_u8ChainIndex=0;

void ADC_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	}

#elif(ADC_VREF==AVCC)
	{
		/*AVCC as reference voltage*/
		SET_BIT(ADMUX,ADMUX_REFS0);
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 64       	ori	r24, 0x40	; 64
     b5a:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,ADMUX_REFS1);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8f 77       	andi	r24, 0x7F	; 127
     b68:	8c 93       	st	X, r24


#if(ADC_RESOLUTION==ADC_8_BITS_RESOLUTION)
	{
		/*Activate Left Adjust result*/
		SET_BIT(ADMUX,ADMUX_ADLAR);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	80 62       	ori	r24, 0x20	; 32
     b76:	8c 93       	st	X, r24
#error "Wrong Resolution Configuration"
#endif


	/*Set Prescaler division factor*/
	ADCSRA &=PRESCALAR_MASK;
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	88 7f       	andi	r24, 0xF8	; 248
     b84:	8c 93       	st	X, r24
	ADCSRA |=ADC_PRESCALAR;
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	87 60       	ori	r24, 0x07	; 7
     b92:	8c 93       	st	X, r24

	/*Enable peripheral*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	80 68       	ori	r24, 0x80	; 128
     ba0:	8c 93       	st	X, r24
}
     ba2:	cf 91       	pop	r28
     ba4:	df 91       	pop	r29
     ba6:	08 95       	ret

00000ba8 <ADC_u8StartConversionSynch>:

u8 ADC_u8StartConversionSynch(u8 Copy_u8Channel,u8* Copy_pu8Reading)
{
     ba8:	df 93       	push	r29
     baa:	cf 93       	push	r28
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62
     bb0:	28 97       	sbiw	r28, 0x08	; 8
     bb2:	0f b6       	in	r0, 0x3f	; 63
     bb4:	f8 94       	cli
     bb6:	de bf       	out	0x3e, r29	; 62
     bb8:	0f be       	out	0x3f, r0	; 63
     bba:	cd bf       	out	0x3d, r28	; 61
     bbc:	8e 83       	std	Y+6, r24	; 0x06
     bbe:	78 87       	std	Y+8, r23	; 0x08
     bc0:	6f 83       	std	Y+7, r22	; 0x07
	u32 Local_u32Counter=0;
     bc2:	1a 82       	std	Y+2, r1	; 0x02
     bc4:	1b 82       	std	Y+3, r1	; 0x03
     bc6:	1c 82       	std	Y+4, r1	; 0x04
     bc8:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8ErrorState=OK;
     bca:	19 82       	std	Y+1, r1	; 0x01

	if(ADC_u8BusyState == IDLE)
     bcc:	80 91 bf 01 	lds	r24, 0x01BF
     bd0:	88 23       	and	r24, r24
     bd2:	09 f0       	breq	.+2      	; 0xbd6 <ADC_u8StartConversionSynch+0x2e>
     bd4:	5a c0       	rjmp	.+180    	; 0xc8a <ADC_u8StartConversionSynch+0xe2>
	{
		/*ADC is now BUSY*/
		ADC_u8BusyState =BUSY;
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	80 93 bf 01 	sts	0x01BF, r24

		/*Clear the MUX bits in ADMUX register*/
		ADMUX &=ADMUX_Mask;
     bdc:	a7 e2       	ldi	r26, 0x27	; 39
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	e7 e2       	ldi	r30, 0x27	; 39
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	80 7e       	andi	r24, 0xE0	; 224
     be8:	8c 93       	st	X, r24

		/*Set the required Channel into the MUX bits*/
		ADMUX|=Copy_u8Channel;
     bea:	a7 e2       	ldi	r26, 0x27	; 39
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	e7 e2       	ldi	r30, 0x27	; 39
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	90 81       	ld	r25, Z
     bf4:	8e 81       	ldd	r24, Y+6	; 0x06
     bf6:	89 2b       	or	r24, r25
     bf8:	8c 93       	st	X, r24

		/*Start Conversion*/
		SET_BIT(ADCSRA,ADCSRA_ADSC);
     bfa:	a6 e2       	ldi	r26, 0x26	; 38
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	e6 e2       	ldi	r30, 0x26	; 38
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	80 81       	ld	r24, Z
     c04:	80 64       	ori	r24, 0x40	; 64
     c06:	8c 93       	st	X, r24

		/*Polling (busy waiting) until the conversion complete flag is set or Counter reaching timeout value*/
		while(((GET_BIT(ADCSRA,ADCSRA_ADIF))==0) && (Local_u32Counter != ADC_u32TIMEOUT));
     c08:	e6 e2       	ldi	r30, 0x26	; 38
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	82 95       	swap	r24
     c10:	8f 70       	andi	r24, 0x0F	; 15
     c12:	88 2f       	mov	r24, r24
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	81 70       	andi	r24, 0x01	; 1
     c18:	90 70       	andi	r25, 0x00	; 0
     c1a:	00 97       	sbiw	r24, 0x00	; 0
     c1c:	61 f4       	brne	.+24     	; 0xc36 <ADC_u8StartConversionSynch+0x8e>
     c1e:	8a 81       	ldd	r24, Y+2	; 0x02
     c20:	9b 81       	ldd	r25, Y+3	; 0x03
     c22:	ac 81       	ldd	r26, Y+4	; 0x04
     c24:	bd 81       	ldd	r27, Y+5	; 0x05
     c26:	80 35       	cpi	r24, 0x50	; 80
     c28:	23 ec       	ldi	r18, 0xC3	; 195
     c2a:	92 07       	cpc	r25, r18
     c2c:	20 e0       	ldi	r18, 0x00	; 0
     c2e:	a2 07       	cpc	r26, r18
     c30:	20 e0       	ldi	r18, 0x00	; 0
     c32:	b2 07       	cpc	r27, r18
     c34:	49 f7       	brne	.-46     	; 0xc08 <ADC_u8StartConversionSynch+0x60>
		{
			Local_u32Counter++;
     c36:	8a 81       	ldd	r24, Y+2	; 0x02
     c38:	9b 81       	ldd	r25, Y+3	; 0x03
     c3a:	ac 81       	ldd	r26, Y+4	; 0x04
     c3c:	bd 81       	ldd	r27, Y+5	; 0x05
     c3e:	01 96       	adiw	r24, 0x01	; 1
     c40:	a1 1d       	adc	r26, r1
     c42:	b1 1d       	adc	r27, r1
     c44:	8a 83       	std	Y+2, r24	; 0x02
     c46:	9b 83       	std	Y+3, r25	; 0x03
     c48:	ac 83       	std	Y+4, r26	; 0x04
     c4a:	bd 83       	std	Y+5, r27	; 0x05
		}
		if(Local_u32Counter==ADC_u32TIMEOUT)
     c4c:	8a 81       	ldd	r24, Y+2	; 0x02
     c4e:	9b 81       	ldd	r25, Y+3	; 0x03
     c50:	ac 81       	ldd	r26, Y+4	; 0x04
     c52:	bd 81       	ldd	r27, Y+5	; 0x05
     c54:	80 35       	cpi	r24, 0x50	; 80
     c56:	23 ec       	ldi	r18, 0xC3	; 195
     c58:	92 07       	cpc	r25, r18
     c5a:	20 e0       	ldi	r18, 0x00	; 0
     c5c:	a2 07       	cpc	r26, r18
     c5e:	20 e0       	ldi	r18, 0x00	; 0
     c60:	b2 07       	cpc	r27, r18
     c62:	19 f4       	brne	.+6      	; 0xc6a <ADC_u8StartConversionSynch+0xc2>
		{
			/*Loop is broken because the timeout is reached*/
			Local_u8ErrorState=NOK;
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	89 83       	std	Y+1, r24	; 0x01
     c68:	12 c0       	rjmp	.+36     	; 0xc8e <ADC_u8StartConversionSynch+0xe6>
		else
		{
			/*Loop is broken because flag is raised*/

			/*Clear the conversion complete flag*/
			SET_BIT(ADCSRA,ADCSRA_ADIF);
     c6a:	a6 e2       	ldi	r26, 0x26	; 38
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	e6 e2       	ldi	r30, 0x26	; 38
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	80 61       	ori	r24, 0x10	; 16
     c76:	8c 93       	st	X, r24

			/*Return the reading if : 1- 8 bits resolution return ADCH --> Left Adjust
			 * 						  2- 10 bits resolution return ADC --> ADCL+ADCH */
#if(ADC_RESOLUTION == ADC_8_BITS_RESOLUTION)
			{
				*Copy_pu8Reading=ADCH;
     c78:	e5 e2       	ldi	r30, 0x25	; 37
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	ef 81       	ldd	r30, Y+7	; 0x07
     c80:	f8 85       	ldd	r31, Y+8	; 0x08
     c82:	80 83       	st	Z, r24
			{
				*Copy_pu8Rading=ADC;
			}
#endif
			/*ADC is finished, return it to IDLE*/
			ADC_u8BusyState=IDLE;
     c84:	10 92 bf 01 	sts	0x01BF, r1
     c88:	02 c0       	rjmp	.+4      	; 0xc8e <ADC_u8StartConversionSynch+0xe6>
		}
	}
	else
	{
		Local_u8ErrorState=BUSY_FUNC;
     c8a:	83 e0       	ldi	r24, 0x03	; 3
     c8c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
}
     c90:	28 96       	adiw	r28, 0x08	; 8
     c92:	0f b6       	in	r0, 0x3f	; 63
     c94:	f8 94       	cli
     c96:	de bf       	out	0x3e, r29	; 62
     c98:	0f be       	out	0x3f, r0	; 63
     c9a:	cd bf       	out	0x3d, r28	; 61
     c9c:	cf 91       	pop	r28
     c9e:	df 91       	pop	r29
     ca0:	08 95       	ret

00000ca2 <ADC_u8StartConversionASynch>:

u8 ADC_u8StartConversionASynch(u8 Copy_u8Channel, u8* Copy_pu8Reading, void(*Copy_pvNotificationFunv)(void))
{
     ca2:	df 93       	push	r29
     ca4:	cf 93       	push	r28
     ca6:	00 d0       	rcall	.+0      	; 0xca8 <ADC_u8StartConversionASynch+0x6>
     ca8:	00 d0       	rcall	.+0      	; 0xcaa <ADC_u8StartConversionASynch+0x8>
     caa:	00 d0       	rcall	.+0      	; 0xcac <ADC_u8StartConversionASynch+0xa>
     cac:	cd b7       	in	r28, 0x3d	; 61
     cae:	de b7       	in	r29, 0x3e	; 62
     cb0:	8a 83       	std	Y+2, r24	; 0x02
     cb2:	7c 83       	std	Y+4, r23	; 0x04
     cb4:	6b 83       	std	Y+3, r22	; 0x03
     cb6:	5e 83       	std	Y+6, r21	; 0x06
     cb8:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState=OK;
     cba:	19 82       	std	Y+1, r1	; 0x01

	if(ADC_u8BusyState==IDLE)
     cbc:	80 91 bf 01 	lds	r24, 0x01BF
     cc0:	88 23       	and	r24, r24
     cc2:	c1 f5       	brne	.+112    	; 0xd34 <ADC_u8StartConversionASynch+0x92>
	{
		if(Copy_pu8Reading == NULL || Copy_pvNotificationFunv == NULL)
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	9c 81       	ldd	r25, Y+4	; 0x04
     cc8:	00 97       	sbiw	r24, 0x00	; 0
     cca:	21 f0       	breq	.+8      	; 0xcd4 <ADC_u8StartConversionASynch+0x32>
     ccc:	8d 81       	ldd	r24, Y+5	; 0x05
     cce:	9e 81       	ldd	r25, Y+6	; 0x06
     cd0:	00 97       	sbiw	r24, 0x00	; 0
     cd2:	19 f4       	brne	.+6      	; 0xcda <ADC_u8StartConversionASynch+0x38>
		{
			Local_u8ErrorState=NULL_POINTER;
     cd4:	82 e0       	ldi	r24, 0x02	; 2
     cd6:	89 83       	std	Y+1, r24	; 0x01
     cd8:	2f c0       	rjmp	.+94     	; 0xd38 <ADC_u8StartConversionASynch+0x96>
		}
		else
		{
			/*Make ADC busy in order not to work until being IDLE*/
			ADC_u8BusyState = BUSY;
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	80 93 bf 01 	sts	0x01BF, r24

			/*Initialize the reading variable globally*/
			ADC_pu8Reading=Copy_pu8Reading;
     ce0:	8b 81       	ldd	r24, Y+3	; 0x03
     ce2:	9c 81       	ldd	r25, Y+4	; 0x04
     ce4:	90 93 bc 01 	sts	0x01BC, r25
     ce8:	80 93 bb 01 	sts	0x01BB, r24

			/*Initialize the callback notification function globally*/
			ADC_pvCallBackNotificationFunc=Copy_pvNotificationFunv;
     cec:	8d 81       	ldd	r24, Y+5	; 0x05
     cee:	9e 81       	ldd	r25, Y+6	; 0x06
     cf0:	90 93 be 01 	sts	0x01BE, r25
     cf4:	80 93 bd 01 	sts	0x01BD, r24

			/*Clear the MUX bits in ADMUX register*/
			ADMUX &=ADMUX_Mask;
     cf8:	a7 e2       	ldi	r26, 0x27	; 39
     cfa:	b0 e0       	ldi	r27, 0x00	; 0
     cfc:	e7 e2       	ldi	r30, 0x27	; 39
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	80 7e       	andi	r24, 0xE0	; 224
     d04:	8c 93       	st	X, r24

			/*Set the required Channel into the MUX bits*/
			ADMUX|=Copy_u8Channel;
     d06:	a7 e2       	ldi	r26, 0x27	; 39
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	e7 e2       	ldi	r30, 0x27	; 39
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	90 81       	ld	r25, Z
     d10:	8a 81       	ldd	r24, Y+2	; 0x02
     d12:	89 2b       	or	r24, r25
     d14:	8c 93       	st	X, r24

			/*Start Conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     d16:	a6 e2       	ldi	r26, 0x26	; 38
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e6 e2       	ldi	r30, 0x26	; 38
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	80 64       	ori	r24, 0x40	; 64
     d22:	8c 93       	st	X, r24

			/*ADC Interrupt Enable*/
			SET_BIT(ADCSRA,ADCSRA_ADIE);
     d24:	a6 e2       	ldi	r26, 0x26	; 38
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e6 e2       	ldi	r30, 0x26	; 38
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	88 60       	ori	r24, 0x08	; 8
     d30:	8c 93       	st	X, r24
     d32:	02 c0       	rjmp	.+4      	; 0xd38 <ADC_u8StartConversionASynch+0x96>
		}
	}
	else
	{
		Local_u8ErrorState=BUSY_FUNC;
     d34:	83 e0       	ldi	r24, 0x03	; 3
     d36:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
     d38:	89 81       	ldd	r24, Y+1	; 0x01

}
     d3a:	26 96       	adiw	r28, 0x06	; 6
     d3c:	0f b6       	in	r0, 0x3f	; 63
     d3e:	f8 94       	cli
     d40:	de bf       	out	0x3e, r29	; 62
     d42:	0f be       	out	0x3f, r0	; 63
     d44:	cd bf       	out	0x3d, r28	; 61
     d46:	cf 91       	pop	r28
     d48:	df 91       	pop	r29
     d4a:	08 95       	ret

00000d4c <ADC_u8ChainInitAsynch>:

u8 ADC_u8ChainInitAsynch(ADC_chain_t * Copy_ADC_chain_tChain,u8 *Copy_pu8Channels, u8 Copy_u8Size,u8 * Copy_pu8Results)
{
     d4c:	df 93       	push	r29
     d4e:	cf 93       	push	r28
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
     d54:	28 97       	sbiw	r28, 0x08	; 8
     d56:	0f b6       	in	r0, 0x3f	; 63
     d58:	f8 94       	cli
     d5a:	de bf       	out	0x3e, r29	; 62
     d5c:	0f be       	out	0x3f, r0	; 63
     d5e:	cd bf       	out	0x3d, r28	; 61
     d60:	9b 83       	std	Y+3, r25	; 0x03
     d62:	8a 83       	std	Y+2, r24	; 0x02
     d64:	7d 83       	std	Y+5, r23	; 0x05
     d66:	6c 83       	std	Y+4, r22	; 0x04
     d68:	4e 83       	std	Y+6, r20	; 0x06
     d6a:	38 87       	std	Y+8, r19	; 0x08
     d6c:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8ErrorState=OK;
     d6e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_ADC_chain_tChain == NULL || Copy_pu8Channels == NULL || Copy_pu8Results)
     d70:	8a 81       	ldd	r24, Y+2	; 0x02
     d72:	9b 81       	ldd	r25, Y+3	; 0x03
     d74:	00 97       	sbiw	r24, 0x00	; 0
     d76:	41 f0       	breq	.+16     	; 0xd88 <ADC_u8ChainInitAsynch+0x3c>
     d78:	8c 81       	ldd	r24, Y+4	; 0x04
     d7a:	9d 81       	ldd	r25, Y+5	; 0x05
     d7c:	00 97       	sbiw	r24, 0x00	; 0
     d7e:	21 f0       	breq	.+8      	; 0xd88 <ADC_u8ChainInitAsynch+0x3c>
     d80:	8f 81       	ldd	r24, Y+7	; 0x07
     d82:	98 85       	ldd	r25, Y+8	; 0x08
     d84:	00 97       	sbiw	r24, 0x00	; 0
     d86:	19 f0       	breq	.+6      	; 0xd8e <ADC_u8ChainInitAsynch+0x42>
	{
		Local_u8ErrorState=NULL_POINTER;
     d88:	82 e0       	ldi	r24, 0x02	; 2
     d8a:	89 83       	std	Y+1, r24	; 0x01
     d8c:	10 c0       	rjmp	.+32     	; 0xdae <ADC_u8ChainInitAsynch+0x62>
	}
	else
	{
		Copy_ADC_chain_tChain->chain_ID=Copy_pu8Channels;
     d8e:	ea 81       	ldd	r30, Y+2	; 0x02
     d90:	fb 81       	ldd	r31, Y+3	; 0x03
     d92:	8c 81       	ldd	r24, Y+4	; 0x04
     d94:	9d 81       	ldd	r25, Y+5	; 0x05
     d96:	91 83       	std	Z+1, r25	; 0x01
     d98:	80 83       	st	Z, r24
		Copy_ADC_chain_tChain->size=Copy_u8Size;
     d9a:	ea 81       	ldd	r30, Y+2	; 0x02
     d9c:	fb 81       	ldd	r31, Y+3	; 0x03
     d9e:	8e 81       	ldd	r24, Y+6	; 0x06
     da0:	82 83       	std	Z+2, r24	; 0x02
		Copy_ADC_chain_tChain->result=Copy_pu8Results;
     da2:	ea 81       	ldd	r30, Y+2	; 0x02
     da4:	fb 81       	ldd	r31, Y+3	; 0x03
     da6:	8f 81       	ldd	r24, Y+7	; 0x07
     da8:	98 85       	ldd	r25, Y+8	; 0x08
     daa:	94 83       	std	Z+4, r25	; 0x04
     dac:	83 83       	std	Z+3, r24	; 0x03
	}
	return Local_u8ErrorState;
     dae:	89 81       	ldd	r24, Y+1	; 0x01
}
     db0:	28 96       	adiw	r28, 0x08	; 8
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	f8 94       	cli
     db6:	de bf       	out	0x3e, r29	; 62
     db8:	0f be       	out	0x3f, r0	; 63
     dba:	cd bf       	out	0x3d, r28	; 61
     dbc:	cf 91       	pop	r28
     dbe:	df 91       	pop	r29
     dc0:	08 95       	ret

00000dc2 <ADC_u8StartChainConvertionAsynch>:

u8 ADC_u8StartChainConvertionAsynch(ADC_chain_t* Copy_ADC_chain_tChain, void(*Copy_pvNotificationFunc)(void))
{
     dc2:	df 93       	push	r29
     dc4:	cf 93       	push	r28
     dc6:	00 d0       	rcall	.+0      	; 0xdc8 <ADC_u8StartChainConvertionAsynch+0x6>
     dc8:	00 d0       	rcall	.+0      	; 0xdca <ADC_u8StartChainConvertionAsynch+0x8>
     dca:	0f 92       	push	r0
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
     dd0:	9b 83       	std	Y+3, r25	; 0x03
     dd2:	8a 83       	std	Y+2, r24	; 0x02
     dd4:	7d 83       	std	Y+5, r23	; 0x05
     dd6:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState=OK;
     dd8:	19 82       	std	Y+1, r1	; 0x01
	if(ADC_u8BusyState==IDLE)
     dda:	80 91 bf 01 	lds	r24, 0x01BF
     dde:	88 23       	and	r24, r24
     de0:	09 f0       	breq	.+2      	; 0xde4 <ADC_u8StartChainConvertionAsynch+0x22>
     de2:	57 c0       	rjmp	.+174    	; 0xe92 <ADC_u8StartChainConvertionAsynch+0xd0>
	{
		if(Copy_ADC_chain_tChain == NULL || Copy_pvNotificationFunc == NULL)
     de4:	8a 81       	ldd	r24, Y+2	; 0x02
     de6:	9b 81       	ldd	r25, Y+3	; 0x03
     de8:	00 97       	sbiw	r24, 0x00	; 0
     dea:	21 f0       	breq	.+8      	; 0xdf4 <ADC_u8StartChainConvertionAsynch+0x32>
     dec:	8c 81       	ldd	r24, Y+4	; 0x04
     dee:	9d 81       	ldd	r25, Y+5	; 0x05
     df0:	00 97       	sbiw	r24, 0x00	; 0
     df2:	19 f4       	brne	.+6      	; 0xdfa <ADC_u8StartChainConvertionAsynch+0x38>
		{
			Local_u8ErrorState=NULL_POINTER;
     df4:	82 e0       	ldi	r24, 0x02	; 2
     df6:	89 83       	std	Y+1, r24	; 0x01
     df8:	4e c0       	rjmp	.+156    	; 0xe96 <ADC_u8StartChainConvertionAsynch+0xd4>
		else
		{
			/*Ready to start conversion*/

			/*Make ADC busy in order not to work until being IDLE ,and Make ISR state Chain Conversion State*/
			ADC_u8BusyState = BUSY;
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	80 93 bf 01 	sts	0x01BF, r24
			ADC_u8ISRState = ADC_u8Chain_Converion;
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	80 93 ba 01 	sts	0x01BA, r24

			/*Initialize the callback notification function globally*/
			ADC_pvCallBackNotificationFunc = Copy_pvNotificationFunc;
     e06:	8c 81       	ldd	r24, Y+4	; 0x04
     e08:	9d 81       	ldd	r25, Y+5	; 0x05
     e0a:	90 93 be 01 	sts	0x01BE, r25
     e0e:	80 93 bd 01 	sts	0x01BD, r24

			ADC_ChainArr=Copy_ADC_chain_tChain->chain_ID;
     e12:	ea 81       	ldd	r30, Y+2	; 0x02
     e14:	fb 81       	ldd	r31, Y+3	; 0x03
     e16:	80 81       	ld	r24, Z
     e18:	91 81       	ldd	r25, Z+1	; 0x01
     e1a:	90 93 c1 01 	sts	0x01C1, r25
     e1e:	80 93 c0 01 	sts	0x01C0, r24
			ADC_u8ChainLength=Copy_ADC_chain_tChain->size;
     e22:	ea 81       	ldd	r30, Y+2	; 0x02
     e24:	fb 81       	ldd	r31, Y+3	; 0x03
     e26:	82 81       	ldd	r24, Z+2	; 0x02
     e28:	80 93 c2 01 	sts	0x01C2, r24
			ADC_pu8Reading=Copy_ADC_chain_tChain->result;
     e2c:	ea 81       	ldd	r30, Y+2	; 0x02
     e2e:	fb 81       	ldd	r31, Y+3	; 0x03
     e30:	83 81       	ldd	r24, Z+3	; 0x03
     e32:	94 81       	ldd	r25, Z+4	; 0x04
     e34:	90 93 bc 01 	sts	0x01BC, r25
     e38:	80 93 bb 01 	sts	0x01BB, r24

			/*Start conversion for the first channel in the chain*/
			ADC_u8ChainIndex=0;
     e3c:	10 92 c3 01 	sts	0x01C3, r1

			/*Clear the MUX bits in ADMUX register*/
			ADMUX &=ADMUX_Mask;
     e40:	a7 e2       	ldi	r26, 0x27	; 39
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	e7 e2       	ldi	r30, 0x27	; 39
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	80 7e       	andi	r24, 0xE0	; 224
     e4c:	8c 93       	st	X, r24

			/*Choose Channel*/
			ADMUX|=ADC_ChainArr[ADC_u8ChainIndex];
     e4e:	a7 e2       	ldi	r26, 0x27	; 39
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	e7 e2       	ldi	r30, 0x27	; 39
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	40 81       	ld	r20, Z
     e58:	20 91 c0 01 	lds	r18, 0x01C0
     e5c:	30 91 c1 01 	lds	r19, 0x01C1
     e60:	80 91 c3 01 	lds	r24, 0x01C3
     e64:	88 2f       	mov	r24, r24
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	f9 01       	movw	r30, r18
     e6a:	e8 0f       	add	r30, r24
     e6c:	f9 1f       	adc	r31, r25
     e6e:	80 81       	ld	r24, Z
     e70:	84 2b       	or	r24, r20
     e72:	8c 93       	st	X, r24

			/*Start Conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     e74:	a6 e2       	ldi	r26, 0x26	; 38
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e6 e2       	ldi	r30, 0x26	; 38
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	80 64       	ori	r24, 0x40	; 64
     e80:	8c 93       	st	X, r24

			/*ADC Interrupt Enable*/
			SET_BIT(ADCSRA,ADCSRA_ADIE);
     e82:	a6 e2       	ldi	r26, 0x26	; 38
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e6 e2       	ldi	r30, 0x26	; 38
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	88 60       	ori	r24, 0x08	; 8
     e8e:	8c 93       	st	X, r24
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <ADC_u8StartChainConvertionAsynch+0xd4>
		}
	}
	else
	{
		Local_u8ErrorState=BUSY_FUNC;
     e92:	83 e0       	ldi	r24, 0x03	; 3
     e94:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     e96:	89 81       	ldd	r24, Y+1	; 0x01
}
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
     e9c:	0f 90       	pop	r0
     e9e:	0f 90       	pop	r0
     ea0:	0f 90       	pop	r0
     ea2:	cf 91       	pop	r28
     ea4:	df 91       	pop	r29
     ea6:	08 95       	ret

00000ea8 <__vector_16>:


void __vector_16 (void)  __attribute__((signal));
void __vector_16 (void)
{
     ea8:	1f 92       	push	r1
     eaa:	0f 92       	push	r0
     eac:	0f b6       	in	r0, 0x3f	; 63
     eae:	0f 92       	push	r0
     eb0:	11 24       	eor	r1, r1
     eb2:	2f 93       	push	r18
     eb4:	3f 93       	push	r19
     eb6:	4f 93       	push	r20
     eb8:	5f 93       	push	r21
     eba:	6f 93       	push	r22
     ebc:	7f 93       	push	r23
     ebe:	8f 93       	push	r24
     ec0:	9f 93       	push	r25
     ec2:	af 93       	push	r26
     ec4:	bf 93       	push	r27
     ec6:	ef 93       	push	r30
     ec8:	ff 93       	push	r31
     eca:	df 93       	push	r29
     ecc:	cf 93       	push	r28
     ece:	cd b7       	in	r28, 0x3d	; 61
     ed0:	de b7       	in	r29, 0x3e	; 62
	if(ADC_u8ISRState==ADC_u8Single_Converion)
     ed2:	80 91 ba 01 	lds	r24, 0x01BA
     ed6:	88 23       	and	r24, r24
     ed8:	d1 f4       	brne	.+52     	; 0xf0e <__vector_16+0x66>
	{
		/*Read ADC result*/
#if(ADC_RESOLUTION == ADC_8_BITS_RESOLUTION)
		{
			*ADC_pu8Reading = ADCH;
     eda:	a0 91 bb 01 	lds	r26, 0x01BB
     ede:	b0 91 bc 01 	lds	r27, 0x01BC
     ee2:	e5 e2       	ldi	r30, 0x25	; 37
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	88 2f       	mov	r24, r24
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	8d 93       	st	X+, r24
     eee:	9c 93       	st	X, r25
		}
#endif


		/*make ADC state be IDLE because it finished*/
		ADC_u8BusyState = IDLE;
     ef0:	10 92 bf 01 	sts	0x01BF, r1

		/*Invoke the callback notification function*/
		ADC_pvCallBackNotificationFunc();
     ef4:	e0 91 bd 01 	lds	r30, 0x01BD
     ef8:	f0 91 be 01 	lds	r31, 0x01BE
     efc:	09 95       	icall

		/*Disable ADC conversion complete interrupt*/
		CLR_BIT(ADCSRA,ADCSRA_ADIE);
     efe:	a6 e2       	ldi	r26, 0x26	; 38
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e6 e2       	ldi	r30, 0x26	; 38
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	87 7f       	andi	r24, 0xF7	; 247
     f0a:	8c 93       	st	X, r24
     f0c:	4c c0       	rjmp	.+152    	; 0xfa6 <__vector_16+0xfe>
	}
	else if(ADC_u8ISRState==ADC_u8Chain_Converion)
     f0e:	80 91 ba 01 	lds	r24, 0x01BA
     f12:	81 30       	cpi	r24, 0x01	; 1
     f14:	09 f0       	breq	.+2      	; 0xf18 <__vector_16+0x70>
     f16:	47 c0       	rjmp	.+142    	; 0xfa6 <__vector_16+0xfe>
	{
		/*Read ADC result*/
#if(ADC_RESOLUTION == ADC_8_BITS_RESOLUTION)
		{
			*ADC_pu8Reading = ADCH;
     f18:	a0 91 bb 01 	lds	r26, 0x01BB
     f1c:	b0 91 bc 01 	lds	r27, 0x01BC
     f20:	e5 e2       	ldi	r30, 0x25	; 37
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	88 2f       	mov	r24, r24
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	11 96       	adiw	r26, 0x01	; 1
     f2c:	9c 93       	st	X, r25
     f2e:	8e 93       	st	-X, r24
			*ADC_pu8Reading = ADC;
		}
#endif

		/*Increment Chain Index*/
		ADC_u8ChainIndex++;
     f30:	80 91 c3 01 	lds	r24, 0x01C3
     f34:	8f 5f       	subi	r24, 0xFF	; 255
     f36:	80 93 c3 01 	sts	0x01C3, r24

		/*Check if all channels is converted*/
		if(ADC_u8ChainIndex==ADC_u8ChainLength)
     f3a:	90 91 c3 01 	lds	r25, 0x01C3
     f3e:	80 91 c2 01 	lds	r24, 0x01C2
     f42:	98 17       	cp	r25, r24
     f44:	79 f4       	brne	.+30     	; 0xf64 <__vector_16+0xbc>
		{

			/*make ADC state be IDLE because it finished*/
			ADC_u8BusyState = IDLE;
     f46:	10 92 bf 01 	sts	0x01BF, r1

			/*Invoke the callback notification function*/
			ADC_pvCallBackNotificationFunc();
     f4a:	e0 91 bd 01 	lds	r30, 0x01BD
     f4e:	f0 91 be 01 	lds	r31, 0x01BE
     f52:	09 95       	icall

			/*Disable ADC conversion complete interrupt*/
			CLR_BIT(ADCSRA,ADCSRA_ADIE);
     f54:	a6 e2       	ldi	r26, 0x26	; 38
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	e6 e2       	ldi	r30, 0x26	; 38
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	87 7f       	andi	r24, 0xF7	; 247
     f60:	8c 93       	st	X, r24
     f62:	21 c0       	rjmp	.+66     	; 0xfa6 <__vector_16+0xfe>

		}
		else
		{
			/*Clear the MUX bits in ADMUX register*/
			ADMUX &=ADMUX_Mask;
     f64:	a7 e2       	ldi	r26, 0x27	; 39
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e7 e2       	ldi	r30, 0x27	; 39
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	80 7e       	andi	r24, 0xE0	; 224
     f70:	8c 93       	st	X, r24

			/*Choose Channel*/
			ADMUX|=ADC_ChainArr[ADC_u8ChainIndex];
     f72:	a7 e2       	ldi	r26, 0x27	; 39
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	e7 e2       	ldi	r30, 0x27	; 39
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	40 81       	ld	r20, Z
     f7c:	20 91 c0 01 	lds	r18, 0x01C0
     f80:	30 91 c1 01 	lds	r19, 0x01C1
     f84:	80 91 c3 01 	lds	r24, 0x01C3
     f88:	88 2f       	mov	r24, r24
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	f9 01       	movw	r30, r18
     f8e:	e8 0f       	add	r30, r24
     f90:	f9 1f       	adc	r31, r25
     f92:	80 81       	ld	r24, Z
     f94:	84 2b       	or	r24, r20
     f96:	8c 93       	st	X, r24

			/*Start Conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     f98:	a6 e2       	ldi	r26, 0x26	; 38
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e6 e2       	ldi	r30, 0x26	; 38
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	80 64       	ori	r24, 0x40	; 64
     fa4:	8c 93       	st	X, r24

		}

	}
}
     fa6:	cf 91       	pop	r28
     fa8:	df 91       	pop	r29
     faa:	ff 91       	pop	r31
     fac:	ef 91       	pop	r30
     fae:	bf 91       	pop	r27
     fb0:	af 91       	pop	r26
     fb2:	9f 91       	pop	r25
     fb4:	8f 91       	pop	r24
     fb6:	7f 91       	pop	r23
     fb8:	6f 91       	pop	r22
     fba:	5f 91       	pop	r21
     fbc:	4f 91       	pop	r20
     fbe:	3f 91       	pop	r19
     fc0:	2f 91       	pop	r18
     fc2:	0f 90       	pop	r0
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	0f 90       	pop	r0
     fc8:	1f 90       	pop	r1
     fca:	18 95       	reti

00000fcc <CLCD_voidSendCommand>:
#include "CLCD_interface.h"
#include "CLCD_private.h"


void CLCD_voidSendCommand(u8 Copy_u8Command)
{
     fcc:	df 93       	push	r29
     fce:	cf 93       	push	r28
     fd0:	cd b7       	in	r28, 0x3d	; 61
     fd2:	de b7       	in	r29, 0x3e	; 62
     fd4:	2f 97       	sbiw	r28, 0x0f	; 15
     fd6:	0f b6       	in	r0, 0x3f	; 63
     fd8:	f8 94       	cli
     fda:	de bf       	out	0x3e, r29	; 62
     fdc:	0f be       	out	0x3f, r0	; 63
     fde:	cd bf       	out	0x3d, r28	; 61
     fe0:	8f 87       	std	Y+15, r24	; 0x0f
	/*SET RS pin to low for Command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	67 e0       	ldi	r22, 0x07	; 7
     fe6:	40 e0       	ldi	r20, 0x00	; 0
     fe8:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <DIO_u8SetPinValue>

	/*SET RW pin low for Write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	66 e0       	ldi	r22, 0x06	; 6
     ff0:	40 e0       	ldi	r20, 0x00	; 0
     ff2:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <DIO_u8SetPinValue>

	/*Set Command to data pins*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
     ff6:	82 e0       	ldi	r24, 0x02	; 2
     ff8:	6f 85       	ldd	r22, Y+15	; 0x0f
     ffa:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <DIO_u8SetPortValue>

	/*Send Enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     ffe:	80 e0       	ldi	r24, 0x00	; 0
    1000:	65 e0       	ldi	r22, 0x05	; 5
    1002:	41 e0       	ldi	r20, 0x01	; 1
    1004:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <DIO_u8SetPinValue>
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	a0 e0       	ldi	r26, 0x00	; 0
    100e:	b0 e4       	ldi	r27, 0x40	; 64
    1010:	8b 87       	std	Y+11, r24	; 0x0b
    1012:	9c 87       	std	Y+12, r25	; 0x0c
    1014:	ad 87       	std	Y+13, r26	; 0x0d
    1016:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1018:	6b 85       	ldd	r22, Y+11	; 0x0b
    101a:	7c 85       	ldd	r23, Y+12	; 0x0c
    101c:	8d 85       	ldd	r24, Y+13	; 0x0d
    101e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1020:	20 e0       	ldi	r18, 0x00	; 0
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	4a ef       	ldi	r20, 0xFA	; 250
    1026:	54 e4       	ldi	r21, 0x44	; 68
    1028:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    102c:	dc 01       	movw	r26, r24
    102e:	cb 01       	movw	r24, r22
    1030:	8f 83       	std	Y+7, r24	; 0x07
    1032:	98 87       	std	Y+8, r25	; 0x08
    1034:	a9 87       	std	Y+9, r26	; 0x09
    1036:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1038:	6f 81       	ldd	r22, Y+7	; 0x07
    103a:	78 85       	ldd	r23, Y+8	; 0x08
    103c:	89 85       	ldd	r24, Y+9	; 0x09
    103e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	40 e8       	ldi	r20, 0x80	; 128
    1046:	5f e3       	ldi	r21, 0x3F	; 63
    1048:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    104c:	88 23       	and	r24, r24
    104e:	2c f4       	brge	.+10     	; 0x105a <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	9e 83       	std	Y+6, r25	; 0x06
    1056:	8d 83       	std	Y+5, r24	; 0x05
    1058:	3f c0       	rjmp	.+126    	; 0x10d8 <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    105a:	6f 81       	ldd	r22, Y+7	; 0x07
    105c:	78 85       	ldd	r23, Y+8	; 0x08
    105e:	89 85       	ldd	r24, Y+9	; 0x09
    1060:	9a 85       	ldd	r25, Y+10	; 0x0a
    1062:	20 e0       	ldi	r18, 0x00	; 0
    1064:	3f ef       	ldi	r19, 0xFF	; 255
    1066:	4f e7       	ldi	r20, 0x7F	; 127
    1068:	57 e4       	ldi	r21, 0x47	; 71
    106a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    106e:	18 16       	cp	r1, r24
    1070:	4c f5       	brge	.+82     	; 0x10c4 <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1072:	6b 85       	ldd	r22, Y+11	; 0x0b
    1074:	7c 85       	ldd	r23, Y+12	; 0x0c
    1076:	8d 85       	ldd	r24, Y+13	; 0x0d
    1078:	9e 85       	ldd	r25, Y+14	; 0x0e
    107a:	20 e0       	ldi	r18, 0x00	; 0
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	40 e2       	ldi	r20, 0x20	; 32
    1080:	51 e4       	ldi	r21, 0x41	; 65
    1082:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1086:	dc 01       	movw	r26, r24
    1088:	cb 01       	movw	r24, r22
    108a:	bc 01       	movw	r22, r24
    108c:	cd 01       	movw	r24, r26
    108e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1092:	dc 01       	movw	r26, r24
    1094:	cb 01       	movw	r24, r22
    1096:	9e 83       	std	Y+6, r25	; 0x06
    1098:	8d 83       	std	Y+5, r24	; 0x05
    109a:	0f c0       	rjmp	.+30     	; 0x10ba <CLCD_voidSendCommand+0xee>
    109c:	88 ec       	ldi	r24, 0xC8	; 200
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	9c 83       	std	Y+4, r25	; 0x04
    10a2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10a4:	8b 81       	ldd	r24, Y+3	; 0x03
    10a6:	9c 81       	ldd	r25, Y+4	; 0x04
    10a8:	01 97       	sbiw	r24, 0x01	; 1
    10aa:	f1 f7       	brne	.-4      	; 0x10a8 <CLCD_voidSendCommand+0xdc>
    10ac:	9c 83       	std	Y+4, r25	; 0x04
    10ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10b0:	8d 81       	ldd	r24, Y+5	; 0x05
    10b2:	9e 81       	ldd	r25, Y+6	; 0x06
    10b4:	01 97       	sbiw	r24, 0x01	; 1
    10b6:	9e 83       	std	Y+6, r25	; 0x06
    10b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ba:	8d 81       	ldd	r24, Y+5	; 0x05
    10bc:	9e 81       	ldd	r25, Y+6	; 0x06
    10be:	00 97       	sbiw	r24, 0x00	; 0
    10c0:	69 f7       	brne	.-38     	; 0x109c <CLCD_voidSendCommand+0xd0>
    10c2:	14 c0       	rjmp	.+40     	; 0x10ec <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10c4:	6f 81       	ldd	r22, Y+7	; 0x07
    10c6:	78 85       	ldd	r23, Y+8	; 0x08
    10c8:	89 85       	ldd	r24, Y+9	; 0x09
    10ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    10cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10d0:	dc 01       	movw	r26, r24
    10d2:	cb 01       	movw	r24, r22
    10d4:	9e 83       	std	Y+6, r25	; 0x06
    10d6:	8d 83       	std	Y+5, r24	; 0x05
    10d8:	8d 81       	ldd	r24, Y+5	; 0x05
    10da:	9e 81       	ldd	r25, Y+6	; 0x06
    10dc:	9a 83       	std	Y+2, r25	; 0x02
    10de:	89 83       	std	Y+1, r24	; 0x01
    10e0:	89 81       	ldd	r24, Y+1	; 0x01
    10e2:	9a 81       	ldd	r25, Y+2	; 0x02
    10e4:	01 97       	sbiw	r24, 0x01	; 1
    10e6:	f1 f7       	brne	.-4      	; 0x10e4 <CLCD_voidSendCommand+0x118>
    10e8:	9a 83       	std	Y+2, r25	; 0x02
    10ea:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    10ec:	80 e0       	ldi	r24, 0x00	; 0
    10ee:	65 e0       	ldi	r22, 0x05	; 5
    10f0:	40 e0       	ldi	r20, 0x00	; 0
    10f2:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <DIO_u8SetPinValue>



}
    10f6:	2f 96       	adiw	r28, 0x0f	; 15
    10f8:	0f b6       	in	r0, 0x3f	; 63
    10fa:	f8 94       	cli
    10fc:	de bf       	out	0x3e, r29	; 62
    10fe:	0f be       	out	0x3f, r0	; 63
    1100:	cd bf       	out	0x3d, r28	; 61
    1102:	cf 91       	pop	r28
    1104:	df 91       	pop	r29
    1106:	08 95       	ret

00001108 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
    1108:	df 93       	push	r29
    110a:	cf 93       	push	r28
    110c:	cd b7       	in	r28, 0x3d	; 61
    110e:	de b7       	in	r29, 0x3e	; 62
    1110:	2f 97       	sbiw	r28, 0x0f	; 15
    1112:	0f b6       	in	r0, 0x3f	; 63
    1114:	f8 94       	cli
    1116:	de bf       	out	0x3e, r29	; 62
    1118:	0f be       	out	0x3f, r0	; 63
    111a:	cd bf       	out	0x3d, r28	; 61
    111c:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set RS pin to HIGH for Data*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	67 e0       	ldi	r22, 0x07	; 7
    1122:	41 e0       	ldi	r20, 0x01	; 1
    1124:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <DIO_u8SetPinValue>

	/*Set RW pin low for Write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	66 e0       	ldi	r22, 0x06	; 6
    112c:	40 e0       	ldi	r20, 0x00	; 0
    112e:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <DIO_u8SetPinValue>

	/*Send Data to data pins*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
    1132:	82 e0       	ldi	r24, 0x02	; 2
    1134:	6f 85       	ldd	r22, Y+15	; 0x0f
    1136:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <DIO_u8SetPortValue>

	/*Send Enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    113a:	80 e0       	ldi	r24, 0x00	; 0
    113c:	65 e0       	ldi	r22, 0x05	; 5
    113e:	41 e0       	ldi	r20, 0x01	; 1
    1140:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <DIO_u8SetPinValue>
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	a0 e0       	ldi	r26, 0x00	; 0
    114a:	b0 e4       	ldi	r27, 0x40	; 64
    114c:	8b 87       	std	Y+11, r24	; 0x0b
    114e:	9c 87       	std	Y+12, r25	; 0x0c
    1150:	ad 87       	std	Y+13, r26	; 0x0d
    1152:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1154:	6b 85       	ldd	r22, Y+11	; 0x0b
    1156:	7c 85       	ldd	r23, Y+12	; 0x0c
    1158:	8d 85       	ldd	r24, Y+13	; 0x0d
    115a:	9e 85       	ldd	r25, Y+14	; 0x0e
    115c:	20 e0       	ldi	r18, 0x00	; 0
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	4a ef       	ldi	r20, 0xFA	; 250
    1162:	54 e4       	ldi	r21, 0x44	; 68
    1164:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1168:	dc 01       	movw	r26, r24
    116a:	cb 01       	movw	r24, r22
    116c:	8f 83       	std	Y+7, r24	; 0x07
    116e:	98 87       	std	Y+8, r25	; 0x08
    1170:	a9 87       	std	Y+9, r26	; 0x09
    1172:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1174:	6f 81       	ldd	r22, Y+7	; 0x07
    1176:	78 85       	ldd	r23, Y+8	; 0x08
    1178:	89 85       	ldd	r24, Y+9	; 0x09
    117a:	9a 85       	ldd	r25, Y+10	; 0x0a
    117c:	20 e0       	ldi	r18, 0x00	; 0
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	40 e8       	ldi	r20, 0x80	; 128
    1182:	5f e3       	ldi	r21, 0x3F	; 63
    1184:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1188:	88 23       	and	r24, r24
    118a:	2c f4       	brge	.+10     	; 0x1196 <CLCD_voidSendData+0x8e>
		__ticks = 1;
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	9e 83       	std	Y+6, r25	; 0x06
    1192:	8d 83       	std	Y+5, r24	; 0x05
    1194:	3f c0       	rjmp	.+126    	; 0x1214 <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    1196:	6f 81       	ldd	r22, Y+7	; 0x07
    1198:	78 85       	ldd	r23, Y+8	; 0x08
    119a:	89 85       	ldd	r24, Y+9	; 0x09
    119c:	9a 85       	ldd	r25, Y+10	; 0x0a
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	3f ef       	ldi	r19, 0xFF	; 255
    11a2:	4f e7       	ldi	r20, 0x7F	; 127
    11a4:	57 e4       	ldi	r21, 0x47	; 71
    11a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11aa:	18 16       	cp	r1, r24
    11ac:	4c f5       	brge	.+82     	; 0x1200 <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    11b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    11b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    11b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    11b6:	20 e0       	ldi	r18, 0x00	; 0
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	40 e2       	ldi	r20, 0x20	; 32
    11bc:	51 e4       	ldi	r21, 0x41	; 65
    11be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11c2:	dc 01       	movw	r26, r24
    11c4:	cb 01       	movw	r24, r22
    11c6:	bc 01       	movw	r22, r24
    11c8:	cd 01       	movw	r24, r26
    11ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ce:	dc 01       	movw	r26, r24
    11d0:	cb 01       	movw	r24, r22
    11d2:	9e 83       	std	Y+6, r25	; 0x06
    11d4:	8d 83       	std	Y+5, r24	; 0x05
    11d6:	0f c0       	rjmp	.+30     	; 0x11f6 <CLCD_voidSendData+0xee>
    11d8:	88 ec       	ldi	r24, 0xC8	; 200
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	9c 83       	std	Y+4, r25	; 0x04
    11de:	8b 83       	std	Y+3, r24	; 0x03
    11e0:	8b 81       	ldd	r24, Y+3	; 0x03
    11e2:	9c 81       	ldd	r25, Y+4	; 0x04
    11e4:	01 97       	sbiw	r24, 0x01	; 1
    11e6:	f1 f7       	brne	.-4      	; 0x11e4 <CLCD_voidSendData+0xdc>
    11e8:	9c 83       	std	Y+4, r25	; 0x04
    11ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ec:	8d 81       	ldd	r24, Y+5	; 0x05
    11ee:	9e 81       	ldd	r25, Y+6	; 0x06
    11f0:	01 97       	sbiw	r24, 0x01	; 1
    11f2:	9e 83       	std	Y+6, r25	; 0x06
    11f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11f6:	8d 81       	ldd	r24, Y+5	; 0x05
    11f8:	9e 81       	ldd	r25, Y+6	; 0x06
    11fa:	00 97       	sbiw	r24, 0x00	; 0
    11fc:	69 f7       	brne	.-38     	; 0x11d8 <CLCD_voidSendData+0xd0>
    11fe:	14 c0       	rjmp	.+40     	; 0x1228 <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1200:	6f 81       	ldd	r22, Y+7	; 0x07
    1202:	78 85       	ldd	r23, Y+8	; 0x08
    1204:	89 85       	ldd	r24, Y+9	; 0x09
    1206:	9a 85       	ldd	r25, Y+10	; 0x0a
    1208:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    120c:	dc 01       	movw	r26, r24
    120e:	cb 01       	movw	r24, r22
    1210:	9e 83       	std	Y+6, r25	; 0x06
    1212:	8d 83       	std	Y+5, r24	; 0x05
    1214:	8d 81       	ldd	r24, Y+5	; 0x05
    1216:	9e 81       	ldd	r25, Y+6	; 0x06
    1218:	9a 83       	std	Y+2, r25	; 0x02
    121a:	89 83       	std	Y+1, r24	; 0x01
    121c:	89 81       	ldd	r24, Y+1	; 0x01
    121e:	9a 81       	ldd	r25, Y+2	; 0x02
    1220:	01 97       	sbiw	r24, 0x01	; 1
    1222:	f1 f7       	brne	.-4      	; 0x1220 <CLCD_voidSendData+0x118>
    1224:	9a 83       	std	Y+2, r25	; 0x02
    1226:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1228:	80 e0       	ldi	r24, 0x00	; 0
    122a:	65 e0       	ldi	r22, 0x05	; 5
    122c:	40 e0       	ldi	r20, 0x00	; 0
    122e:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <DIO_u8SetPinValue>


}
    1232:	2f 96       	adiw	r28, 0x0f	; 15
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	de bf       	out	0x3e, r29	; 62
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	cd bf       	out	0x3d, r28	; 61
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	08 95       	ret

00001244 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    1244:	df 93       	push	r29
    1246:	cf 93       	push	r28
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
    124c:	2e 97       	sbiw	r28, 0x0e	; 14
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	f8 94       	cli
    1252:	de bf       	out	0x3e, r29	; 62
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	cd bf       	out	0x3d, r28	; 61
    1258:	80 e0       	ldi	r24, 0x00	; 0
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	a0 e2       	ldi	r26, 0x20	; 32
    125e:	b2 e4       	ldi	r27, 0x42	; 66
    1260:	8b 87       	std	Y+11, r24	; 0x0b
    1262:	9c 87       	std	Y+12, r25	; 0x0c
    1264:	ad 87       	std	Y+13, r26	; 0x0d
    1266:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1268:	6b 85       	ldd	r22, Y+11	; 0x0b
    126a:	7c 85       	ldd	r23, Y+12	; 0x0c
    126c:	8d 85       	ldd	r24, Y+13	; 0x0d
    126e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1270:	20 e0       	ldi	r18, 0x00	; 0
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	4a ef       	ldi	r20, 0xFA	; 250
    1276:	54 e4       	ldi	r21, 0x44	; 68
    1278:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    127c:	dc 01       	movw	r26, r24
    127e:	cb 01       	movw	r24, r22
    1280:	8f 83       	std	Y+7, r24	; 0x07
    1282:	98 87       	std	Y+8, r25	; 0x08
    1284:	a9 87       	std	Y+9, r26	; 0x09
    1286:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1288:	6f 81       	ldd	r22, Y+7	; 0x07
    128a:	78 85       	ldd	r23, Y+8	; 0x08
    128c:	89 85       	ldd	r24, Y+9	; 0x09
    128e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1290:	20 e0       	ldi	r18, 0x00	; 0
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	40 e8       	ldi	r20, 0x80	; 128
    1296:	5f e3       	ldi	r21, 0x3F	; 63
    1298:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    129c:	88 23       	and	r24, r24
    129e:	2c f4       	brge	.+10     	; 0x12aa <CLCD_voidInit+0x66>
		__ticks = 1;
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	9e 83       	std	Y+6, r25	; 0x06
    12a6:	8d 83       	std	Y+5, r24	; 0x05
    12a8:	3f c0       	rjmp	.+126    	; 0x1328 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    12aa:	6f 81       	ldd	r22, Y+7	; 0x07
    12ac:	78 85       	ldd	r23, Y+8	; 0x08
    12ae:	89 85       	ldd	r24, Y+9	; 0x09
    12b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12b2:	20 e0       	ldi	r18, 0x00	; 0
    12b4:	3f ef       	ldi	r19, 0xFF	; 255
    12b6:	4f e7       	ldi	r20, 0x7F	; 127
    12b8:	57 e4       	ldi	r21, 0x47	; 71
    12ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12be:	18 16       	cp	r1, r24
    12c0:	4c f5       	brge	.+82     	; 0x1314 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    12c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    12c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    12c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    12ca:	20 e0       	ldi	r18, 0x00	; 0
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	40 e2       	ldi	r20, 0x20	; 32
    12d0:	51 e4       	ldi	r21, 0x41	; 65
    12d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12d6:	dc 01       	movw	r26, r24
    12d8:	cb 01       	movw	r24, r22
    12da:	bc 01       	movw	r22, r24
    12dc:	cd 01       	movw	r24, r26
    12de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e2:	dc 01       	movw	r26, r24
    12e4:	cb 01       	movw	r24, r22
    12e6:	9e 83       	std	Y+6, r25	; 0x06
    12e8:	8d 83       	std	Y+5, r24	; 0x05
    12ea:	0f c0       	rjmp	.+30     	; 0x130a <CLCD_voidInit+0xc6>
    12ec:	88 ec       	ldi	r24, 0xC8	; 200
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	9c 83       	std	Y+4, r25	; 0x04
    12f2:	8b 83       	std	Y+3, r24	; 0x03
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	9c 81       	ldd	r25, Y+4	; 0x04
    12f8:	01 97       	sbiw	r24, 0x01	; 1
    12fa:	f1 f7       	brne	.-4      	; 0x12f8 <CLCD_voidInit+0xb4>
    12fc:	9c 83       	std	Y+4, r25	; 0x04
    12fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1300:	8d 81       	ldd	r24, Y+5	; 0x05
    1302:	9e 81       	ldd	r25, Y+6	; 0x06
    1304:	01 97       	sbiw	r24, 0x01	; 1
    1306:	9e 83       	std	Y+6, r25	; 0x06
    1308:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    130a:	8d 81       	ldd	r24, Y+5	; 0x05
    130c:	9e 81       	ldd	r25, Y+6	; 0x06
    130e:	00 97       	sbiw	r24, 0x00	; 0
    1310:	69 f7       	brne	.-38     	; 0x12ec <CLCD_voidInit+0xa8>
    1312:	14 c0       	rjmp	.+40     	; 0x133c <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1314:	6f 81       	ldd	r22, Y+7	; 0x07
    1316:	78 85       	ldd	r23, Y+8	; 0x08
    1318:	89 85       	ldd	r24, Y+9	; 0x09
    131a:	9a 85       	ldd	r25, Y+10	; 0x0a
    131c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1320:	dc 01       	movw	r26, r24
    1322:	cb 01       	movw	r24, r22
    1324:	9e 83       	std	Y+6, r25	; 0x06
    1326:	8d 83       	std	Y+5, r24	; 0x05
    1328:	8d 81       	ldd	r24, Y+5	; 0x05
    132a:	9e 81       	ldd	r25, Y+6	; 0x06
    132c:	9a 83       	std	Y+2, r25	; 0x02
    132e:	89 83       	std	Y+1, r24	; 0x01
    1330:	89 81       	ldd	r24, Y+1	; 0x01
    1332:	9a 81       	ldd	r25, Y+2	; 0x02
    1334:	01 97       	sbiw	r24, 0x01	; 1
    1336:	f1 f7       	brne	.-4      	; 0x1334 <CLCD_voidInit+0xf0>
    1338:	9a 83       	std	Y+2, r25	; 0x02
    133a:	89 83       	std	Y+1, r24	; 0x01
	/*Wait for more than 30 ms*/
	_delay_ms(40);

	/*Function Send command : 2 Lines, 5*8 Font size*/
	CLCD_voidSendCommand(0b00111000);
    133c:	88 e3       	ldi	r24, 0x38	; 56
    133e:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidSendCommand>

	/*Display on off control: display enable, disable cursor, no blink cursor*/
	CLCD_voidSendCommand(0b00001100);
    1342:	8c e0       	ldi	r24, 0x0C	; 12
    1344:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidSendCommand>

	/*Clear display -> 0b00000001 == 1*/
	CLCD_voidSendCommand(1);
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidSendCommand>
#else
#error "Wrong CLCD MODE Initialization Option"
#endif

*/
}
    134e:	2e 96       	adiw	r28, 0x0e	; 14
    1350:	0f b6       	in	r0, 0x3f	; 63
    1352:	f8 94       	cli
    1354:	de bf       	out	0x3e, r29	; 62
    1356:	0f be       	out	0x3f, r0	; 63
    1358:	cd bf       	out	0x3d, r28	; 61
    135a:	cf 91       	pop	r28
    135c:	df 91       	pop	r29
    135e:	08 95       	ret

00001360 <CLCD_voidSendString>:

void CLCD_voidSendString(const char* Copy_pcString)
{
    1360:	df 93       	push	r29
    1362:	cf 93       	push	r28
    1364:	00 d0       	rcall	.+0      	; 0x1366 <CLCD_voidSendString+0x6>
    1366:	0f 92       	push	r0
    1368:	cd b7       	in	r28, 0x3d	; 61
    136a:	de b7       	in	r29, 0x3e	; 62
    136c:	9b 83       	std	Y+3, r25	; 0x03
    136e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter=0;
    1370:	19 82       	std	Y+1, r1	; 0x01
    1372:	0e c0       	rjmp	.+28     	; 0x1390 <CLCD_voidSendString+0x30>
	while(Copy_pcString[Local_u8Counter]!= '\0')
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
    1374:	89 81       	ldd	r24, Y+1	; 0x01
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	8a 81       	ldd	r24, Y+2	; 0x02
    137c:	9b 81       	ldd	r25, Y+3	; 0x03
    137e:	fc 01       	movw	r30, r24
    1380:	e2 0f       	add	r30, r18
    1382:	f3 1f       	adc	r31, r19
    1384:	80 81       	ld	r24, Z
    1386:	0e 94 84 08 	call	0x1108	; 0x1108 <CLCD_voidSendData>
		Local_u8Counter++;
    138a:	89 81       	ldd	r24, Y+1	; 0x01
    138c:	8f 5f       	subi	r24, 0xFF	; 255
    138e:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_voidSendString(const char* Copy_pcString)
{
	u8 Local_u8Counter=0;
	while(Copy_pcString[Local_u8Counter]!= '\0')
    1390:	89 81       	ldd	r24, Y+1	; 0x01
    1392:	28 2f       	mov	r18, r24
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	8a 81       	ldd	r24, Y+2	; 0x02
    1398:	9b 81       	ldd	r25, Y+3	; 0x03
    139a:	fc 01       	movw	r30, r24
    139c:	e2 0f       	add	r30, r18
    139e:	f3 1f       	adc	r31, r19
    13a0:	80 81       	ld	r24, Z
    13a2:	88 23       	and	r24, r24
    13a4:	39 f7       	brne	.-50     	; 0x1374 <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
	}

}
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	cf 91       	pop	r28
    13ae:	df 91       	pop	r29
    13b0:	08 95       	ret

000013b2 <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    13b2:	df 93       	push	r29
    13b4:	cf 93       	push	r28
    13b6:	00 d0       	rcall	.+0      	; 0x13b8 <CLCD_voidGoToXY+0x6>
    13b8:	0f 92       	push	r0
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
    13be:	8a 83       	std	Y+2, r24	; 0x02
    13c0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if (Copy_u8XPos==0)
    13c2:	8a 81       	ldd	r24, Y+2	; 0x02
    13c4:	88 23       	and	r24, r24
    13c6:	19 f4       	brne	.+6      	; 0x13ce <CLCD_voidGoToXY+0x1c>
	{
		/*Location is at first line*/
		Local_u8Address=Copy_u8YPos;
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	89 83       	std	Y+1, r24	; 0x01
    13cc:	06 c0       	rjmp	.+12     	; 0x13da <CLCD_voidGoToXY+0x28>
	}
	else if(Copy_u8XPos==1)
    13ce:	8a 81       	ldd	r24, Y+2	; 0x02
    13d0:	81 30       	cpi	r24, 0x01	; 1
    13d2:	19 f4       	brne	.+6      	; 0x13da <CLCD_voidGoToXY+0x28>
	{
		/*Location is at second line*/
		Local_u8Address=Copy_u8YPos+0x40;
    13d4:	8b 81       	ldd	r24, Y+3	; 0x03
    13d6:	80 5c       	subi	r24, 0xC0	; 192
    13d8:	89 83       	std	Y+1, r24	; 0x01
	}
	/*set bit number 7 for Set DDRAM Address command then send the command*/
	CLCD_voidSendCommand(Local_u8Address+128);
    13da:	89 81       	ldd	r24, Y+1	; 0x01
    13dc:	80 58       	subi	r24, 0x80	; 128
    13de:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidSendCommand>

}
    13e2:	0f 90       	pop	r0
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
    13e8:	cf 91       	pop	r28
    13ea:	df 91       	pop	r29
    13ec:	08 95       	ret

000013ee <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern,u8 Copy_u8PatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    13ee:	df 93       	push	r29
    13f0:	cf 93       	push	r28
    13f2:	cd b7       	in	r28, 0x3d	; 61
    13f4:	de b7       	in	r29, 0x3e	; 62
    13f6:	27 97       	sbiw	r28, 0x07	; 7
    13f8:	0f b6       	in	r0, 0x3f	; 63
    13fa:	f8 94       	cli
    13fc:	de bf       	out	0x3e, r29	; 62
    13fe:	0f be       	out	0x3f, r0	; 63
    1400:	cd bf       	out	0x3d, r28	; 61
    1402:	9c 83       	std	Y+4, r25	; 0x04
    1404:	8b 83       	std	Y+3, r24	; 0x03
    1406:	6d 83       	std	Y+5, r22	; 0x05
    1408:	4e 83       	std	Y+6, r20	; 0x06
    140a:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress=0, Local_u8Iterator;
    140c:	1a 82       	std	Y+2, r1	; 0x02

	/*Calculate CGRAM Address whose each block is 8 bytes*/
	Local_u8CGRAMAddress= Copy_u8PatternNumber*8;
    140e:	8d 81       	ldd	r24, Y+5	; 0x05
    1410:	88 2f       	mov	r24, r24
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	88 0f       	add	r24, r24
    1416:	99 1f       	adc	r25, r25
    1418:	88 0f       	add	r24, r24
    141a:	99 1f       	adc	r25, r25
    141c:	88 0f       	add	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	8a 83       	std	Y+2, r24	; 0x02

	/*Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7*/
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);
    1422:	8a 81       	ldd	r24, Y+2	; 0x02
    1424:	80 5c       	subi	r24, 0xC0	; 192
    1426:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidSendCommand>

	/*Write the Pattern into CGRAM */
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    142a:	19 82       	std	Y+1, r1	; 0x01
    142c:	0e c0       	rjmp	.+28     	; 0x144a <CLCD_voidWriteSpecialCharacter+0x5c>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	28 2f       	mov	r18, r24
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	9c 81       	ldd	r25, Y+4	; 0x04
    1438:	fc 01       	movw	r30, r24
    143a:	e2 0f       	add	r30, r18
    143c:	f3 1f       	adc	r31, r19
    143e:	80 81       	ld	r24, Z
    1440:	0e 94 84 08 	call	0x1108	; 0x1108 <CLCD_voidSendData>

	/*Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7*/
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);

	/*Write the Pattern into CGRAM */
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    1444:	89 81       	ldd	r24, Y+1	; 0x01
    1446:	8f 5f       	subi	r24, 0xFF	; 255
    1448:	89 83       	std	Y+1, r24	; 0x01
    144a:	89 81       	ldd	r24, Y+1	; 0x01
    144c:	88 30       	cpi	r24, 0x08	; 8
    144e:	78 f3       	brcs	.-34     	; 0x142e <CLCD_voidWriteSpecialCharacter+0x40>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);

	}
	/*go back to DDRAM to display the pattern*/
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    1450:	8e 81       	ldd	r24, Y+6	; 0x06
    1452:	6f 81       	ldd	r22, Y+7	; 0x07
    1454:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <CLCD_voidGoToXY>

	/*Display the Pattern written in CGRAM */
	CLCD_voidSendData(Copy_u8PatternNumber);
    1458:	8d 81       	ldd	r24, Y+5	; 0x05
    145a:	0e 94 84 08 	call	0x1108	; 0x1108 <CLCD_voidSendData>

}
    145e:	27 96       	adiw	r28, 0x07	; 7
    1460:	0f b6       	in	r0, 0x3f	; 63
    1462:	f8 94       	cli
    1464:	de bf       	out	0x3e, r29	; 62
    1466:	0f be       	out	0x3f, r0	; 63
    1468:	cd bf       	out	0x3d, r28	; 61
    146a:	cf 91       	pop	r28
    146c:	df 91       	pop	r29
    146e:	08 95       	ret

00001470 <CLCD_voidWriteNumber>:

void CLCD_voidWriteNumber(u32 Copy_u32Number,u32 Copy_u32FieldLength)
{
    1470:	0f 93       	push	r16
    1472:	1f 93       	push	r17
    1474:	df 93       	push	r29
    1476:	cf 93       	push	r28
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62
    147c:	66 97       	sbiw	r28, 0x16	; 22
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	f8 94       	cli
    1482:	de bf       	out	0x3e, r29	; 62
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	cd bf       	out	0x3d, r28	; 61
    1488:	6f 87       	std	Y+15, r22	; 0x0f
    148a:	78 8b       	std	Y+16, r23	; 0x10
    148c:	89 8b       	std	Y+17, r24	; 0x11
    148e:	9a 8b       	std	Y+18, r25	; 0x12
    1490:	2b 8b       	std	Y+19, r18	; 0x13
    1492:	3c 8b       	std	Y+20, r19	; 0x14
    1494:	4d 8b       	std	Y+21, r20	; 0x15
    1496:	5e 8b       	std	Y+22, r21	; 0x16
	/*Copy_u32FieldLength  --> no of Number digits that will be displayed from 1:5.
	  if -1 it will display the number as Keypad.
	 */
	u16 str[5]={0,0,0,0,0};
    1498:	8a e0       	ldi	r24, 0x0A	; 10
    149a:	fe 01       	movw	r30, r28
    149c:	35 96       	adiw	r30, 0x05	; 5
    149e:	df 01       	movw	r26, r30
    14a0:	28 2f       	mov	r18, r24
    14a2:	1d 92       	st	X+, r1
    14a4:	2a 95       	dec	r18
    14a6:	e9 f7       	brne	.-6      	; 0x14a2 <CLCD_voidWriteNumber+0x32>
	u16 i=4,j=0;
    14a8:	84 e0       	ldi	r24, 0x04	; 4
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	9c 83       	std	Y+4, r25	; 0x04
    14ae:	8b 83       	std	Y+3, r24	; 0x03
    14b0:	1a 82       	std	Y+2, r1	; 0x02
    14b2:	19 82       	std	Y+1, r1	; 0x01
    14b4:	33 c0       	rjmp	.+102    	; 0x151c <CLCD_voidWriteNumber+0xac>

	}

	while(Copy_u32Number)
	{
		str[i]=Copy_u32Number%10;
    14b6:	0b 81       	ldd	r16, Y+3	; 0x03
    14b8:	1c 81       	ldd	r17, Y+4	; 0x04
    14ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    14bc:	98 89       	ldd	r25, Y+16	; 0x10
    14be:	a9 89       	ldd	r26, Y+17	; 0x11
    14c0:	ba 89       	ldd	r27, Y+18	; 0x12
    14c2:	2a e0       	ldi	r18, 0x0A	; 10
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	40 e0       	ldi	r20, 0x00	; 0
    14c8:	50 e0       	ldi	r21, 0x00	; 0
    14ca:	bc 01       	movw	r22, r24
    14cc:	cd 01       	movw	r24, r26
    14ce:	0e 94 a0 2a 	call	0x5540	; 0x5540 <__udivmodsi4>
    14d2:	dc 01       	movw	r26, r24
    14d4:	cb 01       	movw	r24, r22
    14d6:	ac 01       	movw	r20, r24
    14d8:	98 01       	movw	r18, r16
    14da:	22 0f       	add	r18, r18
    14dc:	33 1f       	adc	r19, r19
    14de:	ce 01       	movw	r24, r28
    14e0:	01 96       	adiw	r24, 0x01	; 1
    14e2:	82 0f       	add	r24, r18
    14e4:	93 1f       	adc	r25, r19
    14e6:	fc 01       	movw	r30, r24
    14e8:	34 96       	adiw	r30, 0x04	; 4
    14ea:	51 83       	std	Z+1, r21	; 0x01
    14ec:	40 83       	st	Z, r20
		Copy_u32Number=Copy_u32Number/10;
    14ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    14f0:	98 89       	ldd	r25, Y+16	; 0x10
    14f2:	a9 89       	ldd	r26, Y+17	; 0x11
    14f4:	ba 89       	ldd	r27, Y+18	; 0x12
    14f6:	2a e0       	ldi	r18, 0x0A	; 10
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	40 e0       	ldi	r20, 0x00	; 0
    14fc:	50 e0       	ldi	r21, 0x00	; 0
    14fe:	bc 01       	movw	r22, r24
    1500:	cd 01       	movw	r24, r26
    1502:	0e 94 a0 2a 	call	0x5540	; 0x5540 <__udivmodsi4>
    1506:	da 01       	movw	r26, r20
    1508:	c9 01       	movw	r24, r18
    150a:	8f 87       	std	Y+15, r24	; 0x0f
    150c:	98 8b       	std	Y+16, r25	; 0x10
    150e:	a9 8b       	std	Y+17, r26	; 0x11
    1510:	ba 8b       	std	Y+18, r27	; 0x12
		i--;
    1512:	8b 81       	ldd	r24, Y+3	; 0x03
    1514:	9c 81       	ldd	r25, Y+4	; 0x04
    1516:	01 97       	sbiw	r24, 0x01	; 1
    1518:	9c 83       	std	Y+4, r25	; 0x04
    151a:	8b 83       	std	Y+3, r24	; 0x03
		CLCD_voidSendData('-');
		Copy_u32Number = Copy_u32Number*(-1);

	}

	while(Copy_u32Number)
    151c:	8f 85       	ldd	r24, Y+15	; 0x0f
    151e:	98 89       	ldd	r25, Y+16	; 0x10
    1520:	a9 89       	ldd	r26, Y+17	; 0x11
    1522:	ba 89       	ldd	r27, Y+18	; 0x12
    1524:	00 97       	sbiw	r24, 0x00	; 0
    1526:	a1 05       	cpc	r26, r1
    1528:	b1 05       	cpc	r27, r1
    152a:	29 f6       	brne	.-118    	; 0x14b6 <CLCD_voidWriteNumber+0x46>
		str[i]=Copy_u32Number%10;
		Copy_u32Number=Copy_u32Number/10;
		i--;
	}

	if(Copy_u32FieldLength==-1)
    152c:	8b 89       	ldd	r24, Y+19	; 0x13
    152e:	9c 89       	ldd	r25, Y+20	; 0x14
    1530:	ad 89       	ldd	r26, Y+21	; 0x15
    1532:	be 89       	ldd	r27, Y+22	; 0x16
    1534:	8f 3f       	cpi	r24, 0xFF	; 255
    1536:	4f ef       	ldi	r20, 0xFF	; 255
    1538:	94 07       	cpc	r25, r20
    153a:	4f ef       	ldi	r20, 0xFF	; 255
    153c:	a4 07       	cpc	r26, r20
    153e:	4f ef       	ldi	r20, 0xFF	; 255
    1540:	b4 07       	cpc	r27, r20
    1542:	b1 f4       	brne	.+44     	; 0x1570 <CLCD_voidWriteNumber+0x100>
    1544:	05 c0       	rjmp	.+10     	; 0x1550 <CLCD_voidWriteNumber+0xe0>
	{
		while(str[j]==0)
		{
			j++;
    1546:	89 81       	ldd	r24, Y+1	; 0x01
    1548:	9a 81       	ldd	r25, Y+2	; 0x02
    154a:	01 96       	adiw	r24, 0x01	; 1
    154c:	9a 83       	std	Y+2, r25	; 0x02
    154e:	89 83       	std	Y+1, r24	; 0x01
		i--;
	}

	if(Copy_u32FieldLength==-1)
	{
		while(str[j]==0)
    1550:	89 81       	ldd	r24, Y+1	; 0x01
    1552:	9a 81       	ldd	r25, Y+2	; 0x02
    1554:	9c 01       	movw	r18, r24
    1556:	22 0f       	add	r18, r18
    1558:	33 1f       	adc	r19, r19
    155a:	ce 01       	movw	r24, r28
    155c:	01 96       	adiw	r24, 0x01	; 1
    155e:	82 0f       	add	r24, r18
    1560:	93 1f       	adc	r25, r19
    1562:	fc 01       	movw	r30, r24
    1564:	34 96       	adiw	r30, 0x04	; 4
    1566:	80 81       	ld	r24, Z
    1568:	91 81       	ldd	r25, Z+1	; 0x01
    156a:	00 97       	sbiw	r24, 0x00	; 0
    156c:	61 f3       	breq	.-40     	; 0x1546 <CLCD_voidWriteNumber+0xd6>
    156e:	0a c0       	rjmp	.+20     	; 0x1584 <CLCD_voidWriteNumber+0x114>
			j++;
		}
	}
	else
	{
		j=5-Copy_u32FieldLength;
    1570:	8b 89       	ldd	r24, Y+19	; 0x13
    1572:	9c 89       	ldd	r25, Y+20	; 0x14
    1574:	25 e0       	ldi	r18, 0x05	; 5
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	d9 01       	movw	r26, r18
    157a:	a8 1b       	sub	r26, r24
    157c:	b9 0b       	sbc	r27, r25
    157e:	cd 01       	movw	r24, r26
    1580:	9a 83       	std	Y+2, r25	; 0x02
    1582:	89 83       	std	Y+1, r24	; 0x01
	}

	for(i=j;i<5;i++)
    1584:	89 81       	ldd	r24, Y+1	; 0x01
    1586:	9a 81       	ldd	r25, Y+2	; 0x02
    1588:	9c 83       	std	Y+4, r25	; 0x04
    158a:	8b 83       	std	Y+3, r24	; 0x03
    158c:	15 c0       	rjmp	.+42     	; 0x15b8 <CLCD_voidWriteNumber+0x148>
	{
		CLCD_voidSendData('0'+str[i]);
    158e:	8b 81       	ldd	r24, Y+3	; 0x03
    1590:	9c 81       	ldd	r25, Y+4	; 0x04
    1592:	9c 01       	movw	r18, r24
    1594:	22 0f       	add	r18, r18
    1596:	33 1f       	adc	r19, r19
    1598:	ce 01       	movw	r24, r28
    159a:	01 96       	adiw	r24, 0x01	; 1
    159c:	82 0f       	add	r24, r18
    159e:	93 1f       	adc	r25, r19
    15a0:	fc 01       	movw	r30, r24
    15a2:	34 96       	adiw	r30, 0x04	; 4
    15a4:	80 81       	ld	r24, Z
    15a6:	91 81       	ldd	r25, Z+1	; 0x01
    15a8:	80 5d       	subi	r24, 0xD0	; 208
    15aa:	0e 94 84 08 	call	0x1108	; 0x1108 <CLCD_voidSendData>
	else
	{
		j=5-Copy_u32FieldLength;
	}

	for(i=j;i<5;i++)
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	9c 81       	ldd	r25, Y+4	; 0x04
    15b2:	01 96       	adiw	r24, 0x01	; 1
    15b4:	9c 83       	std	Y+4, r25	; 0x04
    15b6:	8b 83       	std	Y+3, r24	; 0x03
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	9c 81       	ldd	r25, Y+4	; 0x04
    15bc:	85 30       	cpi	r24, 0x05	; 5
    15be:	91 05       	cpc	r25, r1
    15c0:	30 f3       	brcs	.-52     	; 0x158e <CLCD_voidWriteNumber+0x11e>
	{
		CLCD_voidSendData('0'+str[i]);
	}

}
    15c2:	66 96       	adiw	r28, 0x16	; 22
    15c4:	0f b6       	in	r0, 0x3f	; 63
    15c6:	f8 94       	cli
    15c8:	de bf       	out	0x3e, r29	; 62
    15ca:	0f be       	out	0x3f, r0	; 63
    15cc:	cd bf       	out	0x3d, r28	; 61
    15ce:	cf 91       	pop	r28
    15d0:	df 91       	pop	r29
    15d2:	1f 91       	pop	r17
    15d4:	0f 91       	pop	r16
    15d6:	08 95       	ret

000015d8 <DIO_u8SetPinValue>:
#include "DIO_config.h"



u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    15d8:	df 93       	push	r29
    15da:	cf 93       	push	r28
    15dc:	cd b7       	in	r28, 0x3d	; 61
    15de:	de b7       	in	r29, 0x3e	; 62
    15e0:	28 97       	sbiw	r28, 0x08	; 8
    15e2:	0f b6       	in	r0, 0x3f	; 63
    15e4:	f8 94       	cli
    15e6:	de bf       	out	0x3e, r29	; 62
    15e8:	0f be       	out	0x3f, r0	; 63
    15ea:	cd bf       	out	0x3d, r28	; 61
    15ec:	8a 83       	std	Y+2, r24	; 0x02
    15ee:	6b 83       	std	Y+3, r22	; 0x03
    15f0:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    15f2:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8Pin<=DIO_u8PIN7)
    15f4:	8b 81       	ldd	r24, Y+3	; 0x03
    15f6:	88 30       	cpi	r24, 0x08	; 8
    15f8:	08 f0       	brcs	.+2      	; 0x15fc <DIO_u8SetPinValue+0x24>
    15fa:	f4 c0       	rjmp	.+488    	; 0x17e4 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
    15fc:	8c 81       	ldd	r24, Y+4	; 0x04
    15fe:	88 23       	and	r24, r24
    1600:	09 f0       	breq	.+2      	; 0x1604 <DIO_u8SetPinValue+0x2c>
    1602:	77 c0       	rjmp	.+238    	; 0x16f2 <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	28 2f       	mov	r18, r24
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	38 87       	std	Y+8, r19	; 0x08
    160c:	2f 83       	std	Y+7, r18	; 0x07
    160e:	8f 81       	ldd	r24, Y+7	; 0x07
    1610:	98 85       	ldd	r25, Y+8	; 0x08
    1612:	81 30       	cpi	r24, 0x01	; 1
    1614:	91 05       	cpc	r25, r1
    1616:	59 f1       	breq	.+86     	; 0x166e <DIO_u8SetPinValue+0x96>
    1618:	2f 81       	ldd	r18, Y+7	; 0x07
    161a:	38 85       	ldd	r19, Y+8	; 0x08
    161c:	22 30       	cpi	r18, 0x02	; 2
    161e:	31 05       	cpc	r19, r1
    1620:	2c f4       	brge	.+10     	; 0x162c <DIO_u8SetPinValue+0x54>
    1622:	8f 81       	ldd	r24, Y+7	; 0x07
    1624:	98 85       	ldd	r25, Y+8	; 0x08
    1626:	00 97       	sbiw	r24, 0x00	; 0
    1628:	69 f0       	breq	.+26     	; 0x1644 <DIO_u8SetPinValue+0x6c>
    162a:	60 c0       	rjmp	.+192    	; 0x16ec <DIO_u8SetPinValue+0x114>
    162c:	2f 81       	ldd	r18, Y+7	; 0x07
    162e:	38 85       	ldd	r19, Y+8	; 0x08
    1630:	22 30       	cpi	r18, 0x02	; 2
    1632:	31 05       	cpc	r19, r1
    1634:	89 f1       	breq	.+98     	; 0x1698 <DIO_u8SetPinValue+0xc0>
    1636:	8f 81       	ldd	r24, Y+7	; 0x07
    1638:	98 85       	ldd	r25, Y+8	; 0x08
    163a:	83 30       	cpi	r24, 0x03	; 3
    163c:	91 05       	cpc	r25, r1
    163e:	09 f4       	brne	.+2      	; 0x1642 <DIO_u8SetPinValue+0x6a>
    1640:	40 c0       	rjmp	.+128    	; 0x16c2 <DIO_u8SetPinValue+0xea>
    1642:	54 c0       	rjmp	.+168    	; 0x16ec <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA : CLR_BIT(PORTA,Copy_u8Pin); break;
    1644:	ab e3       	ldi	r26, 0x3B	; 59
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	eb e3       	ldi	r30, 0x3B	; 59
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	48 2f       	mov	r20, r24
    1650:	8b 81       	ldd	r24, Y+3	; 0x03
    1652:	28 2f       	mov	r18, r24
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	02 2e       	mov	r0, r18
    165c:	02 c0       	rjmp	.+4      	; 0x1662 <DIO_u8SetPinValue+0x8a>
    165e:	88 0f       	add	r24, r24
    1660:	99 1f       	adc	r25, r25
    1662:	0a 94       	dec	r0
    1664:	e2 f7       	brpl	.-8      	; 0x165e <DIO_u8SetPinValue+0x86>
    1666:	80 95       	com	r24
    1668:	84 23       	and	r24, r20
    166a:	8c 93       	st	X, r24
    166c:	bd c0       	rjmp	.+378    	; 0x17e8 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : CLR_BIT(PORTB,Copy_u8Pin); break;
    166e:	a8 e3       	ldi	r26, 0x38	; 56
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	e8 e3       	ldi	r30, 0x38	; 56
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	48 2f       	mov	r20, r24
    167a:	8b 81       	ldd	r24, Y+3	; 0x03
    167c:	28 2f       	mov	r18, r24
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	02 2e       	mov	r0, r18
    1686:	02 c0       	rjmp	.+4      	; 0x168c <DIO_u8SetPinValue+0xb4>
    1688:	88 0f       	add	r24, r24
    168a:	99 1f       	adc	r25, r25
    168c:	0a 94       	dec	r0
    168e:	e2 f7       	brpl	.-8      	; 0x1688 <DIO_u8SetPinValue+0xb0>
    1690:	80 95       	com	r24
    1692:	84 23       	and	r24, r20
    1694:	8c 93       	st	X, r24
    1696:	a8 c0       	rjmp	.+336    	; 0x17e8 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : CLR_BIT(PORTC,Copy_u8Pin); break;
    1698:	a5 e3       	ldi	r26, 0x35	; 53
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	e5 e3       	ldi	r30, 0x35	; 53
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	48 2f       	mov	r20, r24
    16a4:	8b 81       	ldd	r24, Y+3	; 0x03
    16a6:	28 2f       	mov	r18, r24
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	02 2e       	mov	r0, r18
    16b0:	02 c0       	rjmp	.+4      	; 0x16b6 <DIO_u8SetPinValue+0xde>
    16b2:	88 0f       	add	r24, r24
    16b4:	99 1f       	adc	r25, r25
    16b6:	0a 94       	dec	r0
    16b8:	e2 f7       	brpl	.-8      	; 0x16b2 <DIO_u8SetPinValue+0xda>
    16ba:	80 95       	com	r24
    16bc:	84 23       	and	r24, r20
    16be:	8c 93       	st	X, r24
    16c0:	93 c0       	rjmp	.+294    	; 0x17e8 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : CLR_BIT(PORTD,Copy_u8Pin); break;
    16c2:	a2 e3       	ldi	r26, 0x32	; 50
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	e2 e3       	ldi	r30, 0x32	; 50
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	48 2f       	mov	r20, r24
    16ce:	8b 81       	ldd	r24, Y+3	; 0x03
    16d0:	28 2f       	mov	r18, r24
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	02 2e       	mov	r0, r18
    16da:	02 c0       	rjmp	.+4      	; 0x16e0 <DIO_u8SetPinValue+0x108>
    16dc:	88 0f       	add	r24, r24
    16de:	99 1f       	adc	r25, r25
    16e0:	0a 94       	dec	r0
    16e2:	e2 f7       	brpl	.-8      	; 0x16dc <DIO_u8SetPinValue+0x104>
    16e4:	80 95       	com	r24
    16e6:	84 23       	and	r24, r20
    16e8:	8c 93       	st	X, r24
    16ea:	7e c0       	rjmp	.+252    	; 0x17e8 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1;break;
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	89 83       	std	Y+1, r24	; 0x01
    16f0:	7b c0       	rjmp	.+246    	; 0x17e8 <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value==DIO_u8PIN_HIGH)
    16f2:	8c 81       	ldd	r24, Y+4	; 0x04
    16f4:	81 30       	cpi	r24, 0x01	; 1
    16f6:	09 f0       	breq	.+2      	; 0x16fa <DIO_u8SetPinValue+0x122>
    16f8:	72 c0       	rjmp	.+228    	; 0x17de <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    16fa:	8a 81       	ldd	r24, Y+2	; 0x02
    16fc:	28 2f       	mov	r18, r24
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	3e 83       	std	Y+6, r19	; 0x06
    1702:	2d 83       	std	Y+5, r18	; 0x05
    1704:	8d 81       	ldd	r24, Y+5	; 0x05
    1706:	9e 81       	ldd	r25, Y+6	; 0x06
    1708:	81 30       	cpi	r24, 0x01	; 1
    170a:	91 05       	cpc	r25, r1
    170c:	49 f1       	breq	.+82     	; 0x1760 <DIO_u8SetPinValue+0x188>
    170e:	2d 81       	ldd	r18, Y+5	; 0x05
    1710:	3e 81       	ldd	r19, Y+6	; 0x06
    1712:	22 30       	cpi	r18, 0x02	; 2
    1714:	31 05       	cpc	r19, r1
    1716:	2c f4       	brge	.+10     	; 0x1722 <DIO_u8SetPinValue+0x14a>
    1718:	8d 81       	ldd	r24, Y+5	; 0x05
    171a:	9e 81       	ldd	r25, Y+6	; 0x06
    171c:	00 97       	sbiw	r24, 0x00	; 0
    171e:	61 f0       	breq	.+24     	; 0x1738 <DIO_u8SetPinValue+0x160>
    1720:	5b c0       	rjmp	.+182    	; 0x17d8 <DIO_u8SetPinValue+0x200>
    1722:	2d 81       	ldd	r18, Y+5	; 0x05
    1724:	3e 81       	ldd	r19, Y+6	; 0x06
    1726:	22 30       	cpi	r18, 0x02	; 2
    1728:	31 05       	cpc	r19, r1
    172a:	71 f1       	breq	.+92     	; 0x1788 <DIO_u8SetPinValue+0x1b0>
    172c:	8d 81       	ldd	r24, Y+5	; 0x05
    172e:	9e 81       	ldd	r25, Y+6	; 0x06
    1730:	83 30       	cpi	r24, 0x03	; 3
    1732:	91 05       	cpc	r25, r1
    1734:	e9 f1       	breq	.+122    	; 0x17b0 <DIO_u8SetPinValue+0x1d8>
    1736:	50 c0       	rjmp	.+160    	; 0x17d8 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA : SET_BIT(PORTA,Copy_u8Pin); break;
    1738:	ab e3       	ldi	r26, 0x3B	; 59
    173a:	b0 e0       	ldi	r27, 0x00	; 0
    173c:	eb e3       	ldi	r30, 0x3B	; 59
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 81       	ld	r24, Z
    1742:	48 2f       	mov	r20, r24
    1744:	8b 81       	ldd	r24, Y+3	; 0x03
    1746:	28 2f       	mov	r18, r24
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	02 2e       	mov	r0, r18
    1750:	02 c0       	rjmp	.+4      	; 0x1756 <DIO_u8SetPinValue+0x17e>
    1752:	88 0f       	add	r24, r24
    1754:	99 1f       	adc	r25, r25
    1756:	0a 94       	dec	r0
    1758:	e2 f7       	brpl	.-8      	; 0x1752 <DIO_u8SetPinValue+0x17a>
    175a:	84 2b       	or	r24, r20
    175c:	8c 93       	st	X, r24
    175e:	44 c0       	rjmp	.+136    	; 0x17e8 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : SET_BIT(PORTB,Copy_u8Pin); break;
    1760:	a8 e3       	ldi	r26, 0x38	; 56
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	e8 e3       	ldi	r30, 0x38	; 56
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	48 2f       	mov	r20, r24
    176c:	8b 81       	ldd	r24, Y+3	; 0x03
    176e:	28 2f       	mov	r18, r24
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	02 2e       	mov	r0, r18
    1778:	02 c0       	rjmp	.+4      	; 0x177e <DIO_u8SetPinValue+0x1a6>
    177a:	88 0f       	add	r24, r24
    177c:	99 1f       	adc	r25, r25
    177e:	0a 94       	dec	r0
    1780:	e2 f7       	brpl	.-8      	; 0x177a <DIO_u8SetPinValue+0x1a2>
    1782:	84 2b       	or	r24, r20
    1784:	8c 93       	st	X, r24
    1786:	30 c0       	rjmp	.+96     	; 0x17e8 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : SET_BIT(PORTC,Copy_u8Pin); break;
    1788:	a5 e3       	ldi	r26, 0x35	; 53
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	e5 e3       	ldi	r30, 0x35	; 53
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	48 2f       	mov	r20, r24
    1794:	8b 81       	ldd	r24, Y+3	; 0x03
    1796:	28 2f       	mov	r18, r24
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	02 2e       	mov	r0, r18
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <DIO_u8SetPinValue+0x1ce>
    17a2:	88 0f       	add	r24, r24
    17a4:	99 1f       	adc	r25, r25
    17a6:	0a 94       	dec	r0
    17a8:	e2 f7       	brpl	.-8      	; 0x17a2 <DIO_u8SetPinValue+0x1ca>
    17aa:	84 2b       	or	r24, r20
    17ac:	8c 93       	st	X, r24
    17ae:	1c c0       	rjmp	.+56     	; 0x17e8 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : SET_BIT(PORTD,Copy_u8Pin); break;
    17b0:	a2 e3       	ldi	r26, 0x32	; 50
    17b2:	b0 e0       	ldi	r27, 0x00	; 0
    17b4:	e2 e3       	ldi	r30, 0x32	; 50
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	48 2f       	mov	r20, r24
    17bc:	8b 81       	ldd	r24, Y+3	; 0x03
    17be:	28 2f       	mov	r18, r24
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	02 2e       	mov	r0, r18
    17c8:	02 c0       	rjmp	.+4      	; 0x17ce <DIO_u8SetPinValue+0x1f6>
    17ca:	88 0f       	add	r24, r24
    17cc:	99 1f       	adc	r25, r25
    17ce:	0a 94       	dec	r0
    17d0:	e2 f7       	brpl	.-8      	; 0x17ca <DIO_u8SetPinValue+0x1f2>
    17d2:	84 2b       	or	r24, r20
    17d4:	8c 93       	st	X, r24
    17d6:	08 c0       	rjmp	.+16     	; 0x17e8 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1;break;
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	89 83       	std	Y+1, r24	; 0x01
    17dc:	05 c0       	rjmp	.+10     	; 0x17e8 <DIO_u8SetPinValue+0x210>
			}

		}
		else
		{
			Local_u8ErrorState=1;
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	89 83       	std	Y+1, r24	; 0x01
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    17e8:	89 81       	ldd	r24, Y+1	; 0x01

}
    17ea:	28 96       	adiw	r28, 0x08	; 8
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	f8 94       	cli
    17f0:	de bf       	out	0x3e, r29	; 62
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	cd bf       	out	0x3d, r28	; 61
    17f6:	cf 91       	pop	r28
    17f8:	df 91       	pop	r29
    17fa:	08 95       	ret

000017fc <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    17fc:	df 93       	push	r29
    17fe:	cf 93       	push	r28
    1800:	00 d0       	rcall	.+0      	; 0x1802 <DIO_u8SetPortValue+0x6>
    1802:	00 d0       	rcall	.+0      	; 0x1804 <DIO_u8SetPortValue+0x8>
    1804:	0f 92       	push	r0
    1806:	cd b7       	in	r28, 0x3d	; 61
    1808:	de b7       	in	r29, 0x3e	; 62
    180a:	8a 83       	std	Y+2, r24	; 0x02
    180c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    180e:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    1810:	8a 81       	ldd	r24, Y+2	; 0x02
    1812:	28 2f       	mov	r18, r24
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	3d 83       	std	Y+5, r19	; 0x05
    1818:	2c 83       	std	Y+4, r18	; 0x04
    181a:	8c 81       	ldd	r24, Y+4	; 0x04
    181c:	9d 81       	ldd	r25, Y+5	; 0x05
    181e:	81 30       	cpi	r24, 0x01	; 1
    1820:	91 05       	cpc	r25, r1
    1822:	d1 f0       	breq	.+52     	; 0x1858 <DIO_u8SetPortValue+0x5c>
    1824:	2c 81       	ldd	r18, Y+4	; 0x04
    1826:	3d 81       	ldd	r19, Y+5	; 0x05
    1828:	22 30       	cpi	r18, 0x02	; 2
    182a:	31 05       	cpc	r19, r1
    182c:	2c f4       	brge	.+10     	; 0x1838 <DIO_u8SetPortValue+0x3c>
    182e:	8c 81       	ldd	r24, Y+4	; 0x04
    1830:	9d 81       	ldd	r25, Y+5	; 0x05
    1832:	00 97       	sbiw	r24, 0x00	; 0
    1834:	61 f0       	breq	.+24     	; 0x184e <DIO_u8SetPortValue+0x52>
    1836:	1f c0       	rjmp	.+62     	; 0x1876 <DIO_u8SetPortValue+0x7a>
    1838:	2c 81       	ldd	r18, Y+4	; 0x04
    183a:	3d 81       	ldd	r19, Y+5	; 0x05
    183c:	22 30       	cpi	r18, 0x02	; 2
    183e:	31 05       	cpc	r19, r1
    1840:	81 f0       	breq	.+32     	; 0x1862 <DIO_u8SetPortValue+0x66>
    1842:	8c 81       	ldd	r24, Y+4	; 0x04
    1844:	9d 81       	ldd	r25, Y+5	; 0x05
    1846:	83 30       	cpi	r24, 0x03	; 3
    1848:	91 05       	cpc	r25, r1
    184a:	81 f0       	breq	.+32     	; 0x186c <DIO_u8SetPortValue+0x70>
    184c:	14 c0       	rjmp	.+40     	; 0x1876 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA : PORTA = Copy_u8Value; break;
    184e:	eb e3       	ldi	r30, 0x3B	; 59
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	8b 81       	ldd	r24, Y+3	; 0x03
    1854:	80 83       	st	Z, r24
    1856:	11 c0       	rjmp	.+34     	; 0x187a <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB : PORTB = Copy_u8Value; break;
    1858:	e8 e3       	ldi	r30, 0x38	; 56
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	8b 81       	ldd	r24, Y+3	; 0x03
    185e:	80 83       	st	Z, r24
    1860:	0c c0       	rjmp	.+24     	; 0x187a <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC : PORTC = Copy_u8Value; break;
    1862:	e5 e3       	ldi	r30, 0x35	; 53
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	8b 81       	ldd	r24, Y+3	; 0x03
    1868:	80 83       	st	Z, r24
    186a:	07 c0       	rjmp	.+14     	; 0x187a <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD : PORTD = Copy_u8Value; break;
    186c:	e2 e3       	ldi	r30, 0x32	; 50
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	8b 81       	ldd	r24, Y+3	; 0x03
    1872:	80 83       	st	Z, r24
    1874:	02 c0       	rjmp	.+4      	; 0x187a <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=1; break;
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    187a:	89 81       	ldd	r24, Y+1	; 0x01

}
    187c:	0f 90       	pop	r0
    187e:	0f 90       	pop	r0
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	0f 90       	pop	r0
    1886:	cf 91       	pop	r28
    1888:	df 91       	pop	r29
    188a:	08 95       	ret

0000188c <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_pu8Value)
{
    188c:	df 93       	push	r29
    188e:	cf 93       	push	r28
    1890:	cd b7       	in	r28, 0x3d	; 61
    1892:	de b7       	in	r29, 0x3e	; 62
    1894:	27 97       	sbiw	r28, 0x07	; 7
    1896:	0f b6       	in	r0, 0x3f	; 63
    1898:	f8 94       	cli
    189a:	de bf       	out	0x3e, r29	; 62
    189c:	0f be       	out	0x3f, r0	; 63
    189e:	cd bf       	out	0x3d, r28	; 61
    18a0:	8a 83       	std	Y+2, r24	; 0x02
    18a2:	6b 83       	std	Y+3, r22	; 0x03
    18a4:	5d 83       	std	Y+5, r21	; 0x05
    18a6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    18a8:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_pu8Value!=NULL) && (Copy_u8Pin<= DIO_u8PIN7))
    18aa:	8c 81       	ldd	r24, Y+4	; 0x04
    18ac:	9d 81       	ldd	r25, Y+5	; 0x05
    18ae:	00 97       	sbiw	r24, 0x00	; 0
    18b0:	09 f4       	brne	.+2      	; 0x18b4 <DIO_u8GetPinValue+0x28>
    18b2:	78 c0       	rjmp	.+240    	; 0x19a4 <DIO_u8GetPinValue+0x118>
    18b4:	8b 81       	ldd	r24, Y+3	; 0x03
    18b6:	88 30       	cpi	r24, 0x08	; 8
    18b8:	08 f0       	brcs	.+2      	; 0x18bc <DIO_u8GetPinValue+0x30>
    18ba:	74 c0       	rjmp	.+232    	; 0x19a4 <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8Port)
    18bc:	8a 81       	ldd	r24, Y+2	; 0x02
    18be:	28 2f       	mov	r18, r24
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	3f 83       	std	Y+7, r19	; 0x07
    18c4:	2e 83       	std	Y+6, r18	; 0x06
    18c6:	4e 81       	ldd	r20, Y+6	; 0x06
    18c8:	5f 81       	ldd	r21, Y+7	; 0x07
    18ca:	41 30       	cpi	r20, 0x01	; 1
    18cc:	51 05       	cpc	r21, r1
    18ce:	59 f1       	breq	.+86     	; 0x1926 <DIO_u8GetPinValue+0x9a>
    18d0:	8e 81       	ldd	r24, Y+6	; 0x06
    18d2:	9f 81       	ldd	r25, Y+7	; 0x07
    18d4:	82 30       	cpi	r24, 0x02	; 2
    18d6:	91 05       	cpc	r25, r1
    18d8:	34 f4       	brge	.+12     	; 0x18e6 <DIO_u8GetPinValue+0x5a>
    18da:	2e 81       	ldd	r18, Y+6	; 0x06
    18dc:	3f 81       	ldd	r19, Y+7	; 0x07
    18de:	21 15       	cp	r18, r1
    18e0:	31 05       	cpc	r19, r1
    18e2:	69 f0       	breq	.+26     	; 0x18fe <DIO_u8GetPinValue+0x72>
    18e4:	5c c0       	rjmp	.+184    	; 0x199e <DIO_u8GetPinValue+0x112>
    18e6:	4e 81       	ldd	r20, Y+6	; 0x06
    18e8:	5f 81       	ldd	r21, Y+7	; 0x07
    18ea:	42 30       	cpi	r20, 0x02	; 2
    18ec:	51 05       	cpc	r21, r1
    18ee:	79 f1       	breq	.+94     	; 0x194e <DIO_u8GetPinValue+0xc2>
    18f0:	8e 81       	ldd	r24, Y+6	; 0x06
    18f2:	9f 81       	ldd	r25, Y+7	; 0x07
    18f4:	83 30       	cpi	r24, 0x03	; 3
    18f6:	91 05       	cpc	r25, r1
    18f8:	09 f4       	brne	.+2      	; 0x18fc <DIO_u8GetPinValue+0x70>
    18fa:	3d c0       	rjmp	.+122    	; 0x1976 <DIO_u8GetPinValue+0xea>
    18fc:	50 c0       	rjmp	.+160    	; 0x199e <DIO_u8GetPinValue+0x112>
		{
		case DIO_u8PORTA : *Copy_pu8Value= GET_BIT(PINA , Copy_u8Pin); break;
    18fe:	e9 e3       	ldi	r30, 0x39	; 57
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
    1904:	28 2f       	mov	r18, r24
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	8b 81       	ldd	r24, Y+3	; 0x03
    190a:	88 2f       	mov	r24, r24
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	a9 01       	movw	r20, r18
    1910:	02 c0       	rjmp	.+4      	; 0x1916 <DIO_u8GetPinValue+0x8a>
    1912:	55 95       	asr	r21
    1914:	47 95       	ror	r20
    1916:	8a 95       	dec	r24
    1918:	e2 f7       	brpl	.-8      	; 0x1912 <DIO_u8GetPinValue+0x86>
    191a:	ca 01       	movw	r24, r20
    191c:	81 70       	andi	r24, 0x01	; 1
    191e:	ec 81       	ldd	r30, Y+4	; 0x04
    1920:	fd 81       	ldd	r31, Y+5	; 0x05
    1922:	80 83       	st	Z, r24
    1924:	41 c0       	rjmp	.+130    	; 0x19a8 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTB : *Copy_pu8Value= GET_BIT(PINB , Copy_u8Pin); break;
    1926:	e6 e3       	ldi	r30, 0x36	; 54
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	28 2f       	mov	r18, r24
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	8b 81       	ldd	r24, Y+3	; 0x03
    1932:	88 2f       	mov	r24, r24
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	a9 01       	movw	r20, r18
    1938:	02 c0       	rjmp	.+4      	; 0x193e <DIO_u8GetPinValue+0xb2>
    193a:	55 95       	asr	r21
    193c:	47 95       	ror	r20
    193e:	8a 95       	dec	r24
    1940:	e2 f7       	brpl	.-8      	; 0x193a <DIO_u8GetPinValue+0xae>
    1942:	ca 01       	movw	r24, r20
    1944:	81 70       	andi	r24, 0x01	; 1
    1946:	ec 81       	ldd	r30, Y+4	; 0x04
    1948:	fd 81       	ldd	r31, Y+5	; 0x05
    194a:	80 83       	st	Z, r24
    194c:	2d c0       	rjmp	.+90     	; 0x19a8 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTC : *Copy_pu8Value= GET_BIT(PINC , Copy_u8Pin); break;
    194e:	e3 e3       	ldi	r30, 0x33	; 51
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	80 81       	ld	r24, Z
    1954:	28 2f       	mov	r18, r24
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	8b 81       	ldd	r24, Y+3	; 0x03
    195a:	88 2f       	mov	r24, r24
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	a9 01       	movw	r20, r18
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <DIO_u8GetPinValue+0xda>
    1962:	55 95       	asr	r21
    1964:	47 95       	ror	r20
    1966:	8a 95       	dec	r24
    1968:	e2 f7       	brpl	.-8      	; 0x1962 <DIO_u8GetPinValue+0xd6>
    196a:	ca 01       	movw	r24, r20
    196c:	81 70       	andi	r24, 0x01	; 1
    196e:	ec 81       	ldd	r30, Y+4	; 0x04
    1970:	fd 81       	ldd	r31, Y+5	; 0x05
    1972:	80 83       	st	Z, r24
    1974:	19 c0       	rjmp	.+50     	; 0x19a8 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTD : *Copy_pu8Value= GET_BIT(PIND , Copy_u8Pin); break;
    1976:	e0 e3       	ldi	r30, 0x30	; 48
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	28 2f       	mov	r18, r24
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	8b 81       	ldd	r24, Y+3	; 0x03
    1982:	88 2f       	mov	r24, r24
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	a9 01       	movw	r20, r18
    1988:	02 c0       	rjmp	.+4      	; 0x198e <DIO_u8GetPinValue+0x102>
    198a:	55 95       	asr	r21
    198c:	47 95       	ror	r20
    198e:	8a 95       	dec	r24
    1990:	e2 f7       	brpl	.-8      	; 0x198a <DIO_u8GetPinValue+0xfe>
    1992:	ca 01       	movw	r24, r20
    1994:	81 70       	andi	r24, 0x01	; 1
    1996:	ec 81       	ldd	r30, Y+4	; 0x04
    1998:	fd 81       	ldd	r31, Y+5	; 0x05
    199a:	80 83       	st	Z, r24
    199c:	05 c0       	rjmp	.+10     	; 0x19a8 <DIO_u8GetPinValue+0x11c>
		default: Local_u8ErrorState=1; break;
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	89 83       	std	Y+1, r24	; 0x01
    19a2:	02 c0       	rjmp	.+4      	; 0x19a8 <DIO_u8GetPinValue+0x11c>
		}

	}
	else
	{
		Local_u8ErrorState=1;
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    19a8:	89 81       	ldd	r24, Y+1	; 0x01

}
    19aa:	27 96       	adiw	r28, 0x07	; 7
    19ac:	0f b6       	in	r0, 0x3f	; 63
    19ae:	f8 94       	cli
    19b0:	de bf       	out	0x3e, r29	; 62
    19b2:	0f be       	out	0x3f, r0	; 63
    19b4:	cd bf       	out	0x3d, r28	; 61
    19b6:	cf 91       	pop	r28
    19b8:	df 91       	pop	r29
    19ba:	08 95       	ret

000019bc <GIE_voidEnable>:

#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_voidEnable(void)
{
    19bc:	df 93       	push	r29
    19be:	cf 93       	push	r28
    19c0:	cd b7       	in	r28, 0x3d	; 61
    19c2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    19c4:	af e5       	ldi	r26, 0x5F	; 95
    19c6:	b0 e0       	ldi	r27, 0x00	; 0
    19c8:	ef e5       	ldi	r30, 0x5F	; 95
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	80 68       	ori	r24, 0x80	; 128
    19d0:	8c 93       	st	X, r24
}
    19d2:	cf 91       	pop	r28
    19d4:	df 91       	pop	r29
    19d6:	08 95       	ret

000019d8 <GIE_voidDisable>:

void GIE_voidDisable(void)
{
    19d8:	df 93       	push	r29
    19da:	cf 93       	push	r28
    19dc:	cd b7       	in	r28, 0x3d	; 61
    19de:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    19e0:	af e5       	ldi	r26, 0x5F	; 95
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	ef e5       	ldi	r30, 0x5F	; 95
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	8f 77       	andi	r24, 0x7F	; 127
    19ec:	8c 93       	st	X, r24
    19ee:	cf 91       	pop	r28
    19f0:	df 91       	pop	r29
    19f2:	08 95       	ret

000019f4 <KPD_u8GetPressedKey>:
#include "KPD_config.h"
#include "KPD_interface.h"
#include "KPD_private.h"

u8 KPD_u8GetPressedKey(void)
{
    19f4:	df 93       	push	r29
    19f6:	cf 93       	push	r28
    19f8:	00 d0       	rcall	.+0      	; 0x19fa <KPD_u8GetPressedKey+0x6>
    19fa:	00 d0       	rcall	.+0      	; 0x19fc <KPD_u8GetPressedKey+0x8>
    19fc:	0f 92       	push	r0
    19fe:	cd b7       	in	r28, 0x3d	; 61
    1a00:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey=KPD_NO_PRESSED_KEY;
    1a02:	8f ef       	ldi	r24, 0xFF	; 255
    1a04:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ColumnIdx,Local_u8RowIdx,Local_u8PinState;
	static u8 Local_u8KPDArr[4][4]= KPD_ARR_VAL;
	static u8 Local_u8KPDColumnArr[COLUMN_NUM]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};
	static u8 Local_u8KPDRowArr[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

	for(Local_u8ColumnIdx=0;Local_u8ColumnIdx<COLUMN_NUM;Local_u8ColumnIdx++)
    1a06:	1a 82       	std	Y+2, r1	; 0x02
    1a08:	5e c0       	rjmp	.+188    	; 0x1ac6 <KPD_u8GetPressedKey+0xd2>
	{
		/*Activate current column*/
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx],DIO_u8PIN_LOW);
    1a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0c:	88 2f       	mov	r24, r24
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	fc 01       	movw	r30, r24
    1a12:	ec 56       	subi	r30, 0x6C	; 108
    1a14:	fe 4f       	sbci	r31, 0xFE	; 254
    1a16:	90 81       	ld	r25, Z
    1a18:	83 e0       	ldi	r24, 0x03	; 3
    1a1a:	69 2f       	mov	r22, r25
    1a1c:	40 e0       	ldi	r20, 0x00	; 0
    1a1e:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <DIO_u8SetPinValue>

		for(Local_u8RowIdx=0;Local_u8RowIdx<ROW_NUM;Local_u8RowIdx++)
    1a22:	19 82       	std	Y+1, r1	; 0x01
    1a24:	3d c0       	rjmp	.+122    	; 0x1aa0 <KPD_u8GetPressedKey+0xac>
		{
			/*Read the current row*/
			DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],&Local_u8PinState);
    1a26:	89 81       	ldd	r24, Y+1	; 0x01
    1a28:	88 2f       	mov	r24, r24
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	fc 01       	movw	r30, r24
    1a2e:	e0 57       	subi	r30, 0x70	; 112
    1a30:	fe 4f       	sbci	r31, 0xFE	; 254
    1a32:	90 81       	ld	r25, Z
    1a34:	9e 01       	movw	r18, r28
    1a36:	2c 5f       	subi	r18, 0xFC	; 252
    1a38:	3f 4f       	sbci	r19, 0xFF	; 255
    1a3a:	83 e0       	ldi	r24, 0x03	; 3
    1a3c:	69 2f       	mov	r22, r25
    1a3e:	a9 01       	movw	r20, r18
    1a40:	0e 94 46 0c 	call	0x188c	; 0x188c <DIO_u8GetPinValue>

			/*Check if switch is pressed*/
			if(DIO_u8PIN_LOW==Local_u8PinState)
    1a44:	8c 81       	ldd	r24, Y+4	; 0x04
    1a46:	88 23       	and	r24, r24
    1a48:	41 f5       	brne	.+80     	; 0x1a9a <KPD_u8GetPressedKey+0xa6>
			{
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];
    1a4a:	89 81       	ldd	r24, Y+1	; 0x01
    1a4c:	48 2f       	mov	r20, r24
    1a4e:	50 e0       	ldi	r21, 0x00	; 0
    1a50:	8a 81       	ldd	r24, Y+2	; 0x02
    1a52:	28 2f       	mov	r18, r24
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	ca 01       	movw	r24, r20
    1a58:	88 0f       	add	r24, r24
    1a5a:	99 1f       	adc	r25, r25
    1a5c:	88 0f       	add	r24, r24
    1a5e:	99 1f       	adc	r25, r25
    1a60:	82 0f       	add	r24, r18
    1a62:	93 1f       	adc	r25, r19
    1a64:	fc 01       	movw	r30, r24
    1a66:	e8 56       	subi	r30, 0x68	; 104
    1a68:	fe 4f       	sbci	r31, 0xFE	; 254
    1a6a:	80 81       	ld	r24, Z
    1a6c:	8b 83       	std	Y+3, r24	; 0x03
    1a6e:	0f c0       	rjmp	.+30     	; 0x1a8e <KPD_u8GetPressedKey+0x9a>

				/*Polling(busy waiting until the key is released */
				while(DIO_u8PIN_LOW==Local_u8PinState)
				{
					DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],&Local_u8PinState);
    1a70:	89 81       	ldd	r24, Y+1	; 0x01
    1a72:	88 2f       	mov	r24, r24
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	fc 01       	movw	r30, r24
    1a78:	e0 57       	subi	r30, 0x70	; 112
    1a7a:	fe 4f       	sbci	r31, 0xFE	; 254
    1a7c:	90 81       	ld	r25, Z
    1a7e:	9e 01       	movw	r18, r28
    1a80:	2c 5f       	subi	r18, 0xFC	; 252
    1a82:	3f 4f       	sbci	r19, 0xFF	; 255
    1a84:	83 e0       	ldi	r24, 0x03	; 3
    1a86:	69 2f       	mov	r22, r25
    1a88:	a9 01       	movw	r20, r18
    1a8a:	0e 94 46 0c 	call	0x188c	; 0x188c <DIO_u8GetPinValue>
			if(DIO_u8PIN_LOW==Local_u8PinState)
			{
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];

				/*Polling(busy waiting until the key is released */
				while(DIO_u8PIN_LOW==Local_u8PinState)
    1a8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a90:	88 23       	and	r24, r24
    1a92:	71 f3       	breq	.-36     	; 0x1a70 <KPD_u8GetPressedKey+0x7c>
				{
					DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],&Local_u8PinState);
				}

				return Local_u8PressedKey;
    1a94:	8b 81       	ldd	r24, Y+3	; 0x03
    1a96:	8d 83       	std	Y+5, r24	; 0x05
    1a98:	1c c0       	rjmp	.+56     	; 0x1ad2 <KPD_u8GetPressedKey+0xde>
	for(Local_u8ColumnIdx=0;Local_u8ColumnIdx<COLUMN_NUM;Local_u8ColumnIdx++)
	{
		/*Activate current column*/
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx],DIO_u8PIN_LOW);

		for(Local_u8RowIdx=0;Local_u8RowIdx<ROW_NUM;Local_u8RowIdx++)
    1a9a:	89 81       	ldd	r24, Y+1	; 0x01
    1a9c:	8f 5f       	subi	r24, 0xFF	; 255
    1a9e:	89 83       	std	Y+1, r24	; 0x01
    1aa0:	89 81       	ldd	r24, Y+1	; 0x01
    1aa2:	84 30       	cpi	r24, 0x04	; 4
    1aa4:	08 f4       	brcc	.+2      	; 0x1aa8 <KPD_u8GetPressedKey+0xb4>
    1aa6:	bf cf       	rjmp	.-130    	; 0x1a26 <KPD_u8GetPressedKey+0x32>
				return Local_u8PressedKey;
			}
		}

		/*Deactivate the current column*/
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx],DIO_u8PIN_HIGH);
    1aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aaa:	88 2f       	mov	r24, r24
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	fc 01       	movw	r30, r24
    1ab0:	ec 56       	subi	r30, 0x6C	; 108
    1ab2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ab4:	90 81       	ld	r25, Z
    1ab6:	83 e0       	ldi	r24, 0x03	; 3
    1ab8:	69 2f       	mov	r22, r25
    1aba:	41 e0       	ldi	r20, 0x01	; 1
    1abc:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <DIO_u8SetPinValue>
	u8 Local_u8ColumnIdx,Local_u8RowIdx,Local_u8PinState;
	static u8 Local_u8KPDArr[4][4]= KPD_ARR_VAL;
	static u8 Local_u8KPDColumnArr[COLUMN_NUM]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};
	static u8 Local_u8KPDRowArr[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

	for(Local_u8ColumnIdx=0;Local_u8ColumnIdx<COLUMN_NUM;Local_u8ColumnIdx++)
    1ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac2:	8f 5f       	subi	r24, 0xFF	; 255
    1ac4:	8a 83       	std	Y+2, r24	; 0x02
    1ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac8:	84 30       	cpi	r24, 0x04	; 4
    1aca:	08 f4       	brcc	.+2      	; 0x1ace <KPD_u8GetPressedKey+0xda>
    1acc:	9e cf       	rjmp	.-196    	; 0x1a0a <KPD_u8GetPressedKey+0x16>
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx],DIO_u8PIN_HIGH);

	}


	return Local_u8PressedKey;
    1ace:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad0:	8d 83       	std	Y+5, r24	; 0x05
    1ad2:	8d 81       	ldd	r24, Y+5	; 0x05

}
    1ad4:	0f 90       	pop	r0
    1ad6:	0f 90       	pop	r0
    1ad8:	0f 90       	pop	r0
    1ada:	0f 90       	pop	r0
    1adc:	0f 90       	pop	r0
    1ade:	cf 91       	pop	r28
    1ae0:	df 91       	pop	r29
    1ae2:	08 95       	ret

00001ae4 <PORT_voidInit>:
#include "PORT_private.h"
#include "PORT_interface.h"
#include "PORT_register.h"

void PORT_voidInit(void)
{
    1ae4:	df 93       	push	r29
    1ae6:	cf 93       	push	r28
    1ae8:	cd b7       	in	r28, 0x3d	; 61
    1aea:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
    1aec:	ea e3       	ldi	r30, 0x3A	; 58
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	8c ef       	ldi	r24, 0xFC	; 252
    1af2:	80 83       	st	Z, r24
	DDRB=PORTB_DIR;
    1af4:	e7 e3       	ldi	r30, 0x37	; 55
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	8f ea       	ldi	r24, 0xAF	; 175
    1afa:	80 83       	st	Z, r24
	DDRC=PORTC_DIR;
    1afc:	e4 e3       	ldi	r30, 0x34	; 52
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	8f ef       	ldi	r24, 0xFF	; 255
    1b02:	80 83       	st	Z, r24
	DDRD=PORTD_DIR;
    1b04:	e1 e3       	ldi	r30, 0x31	; 49
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	8f e0       	ldi	r24, 0x0F	; 15
    1b0a:	80 83       	st	Z, r24
	
	PORTA=PORTA_INITIAL_VALUE;
    1b0c:	eb e3       	ldi	r30, 0x3B	; 59
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	10 82       	st	Z, r1
	PORTB=PORTB_INITIAL_VALUE;
    1b12:	e8 e3       	ldi	r30, 0x38	; 56
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 e1       	ldi	r24, 0x10	; 16
    1b18:	80 83       	st	Z, r24
	PORTC=PORTC_INITIAL_VALUE;
    1b1a:	e5 e3       	ldi	r30, 0x35	; 53
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	10 82       	st	Z, r1
	PORTD=PORTD_INITIAL_VALUE;
    1b20:	e2 e3       	ldi	r30, 0x32	; 50
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	8f ef       	ldi	r24, 0xFF	; 255
    1b26:	80 83       	st	Z, r24
	
    1b28:	cf 91       	pop	r28
    1b2a:	df 91       	pop	r29
    1b2c:	08 95       	ret

00001b2e <SERVO_voidInit>:
#include "SERVO_config.h"
#include "SERVO_private.h"


void SERVO_voidInit(void)
{
    1b2e:	df 93       	push	r29
    1b30:	cf 93       	push	r28
    1b32:	cd b7       	in	r28, 0x3d	; 61
    1b34:	de b7       	in	r29, 0x3e	; 62
	TIMER1_voidInit(TIMER1_FAST_PWM_ICR1_MODE,DIVIDE_BY_8);
    1b36:	8e e0       	ldi	r24, 0x0E	; 14
    1b38:	62 e0       	ldi	r22, 0x02	; 2
    1b3a:	0e 94 72 12 	call	0x24e4	; 0x24e4 <TIMER1_voidInit>
	TIMER1_voidSetCompareOutputMode(NON_INVERTED_MODE,TIMER1_OCR1A);
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	60 e0       	ldi	r22, 0x00	; 0
    1b42:	0e 94 a6 14 	call	0x294c	; 0x294c <TIMER1_voidSetCompareOutputMode>

	/*20000 us to get freq 50Hz, Periodtime = 20ms */
	ICU_voidSetInputCaptureRegister(TOP_VALUE);
    1b46:	80 e2       	ldi	r24, 0x20	; 32
    1b48:	9e e4       	ldi	r25, 0x4E	; 78
    1b4a:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <ICU_voidSetInputCaptureRegister>

	/*Angle Zero at 1000us, Ontime : 1ms------->2ms
	 * 							     1000us------->2000us
	 * Practically Servo works in Rang : 750us ------> 2500us
	 * 									 0 degree ----->180 degree*/
	TIMER1_voidSetChannelACompMatchValue(MIN_VALUE);
    1b4e:	8e ee       	ldi	r24, 0xEE	; 238
    1b50:	92 e0       	ldi	r25, 0x02	; 2
    1b52:	0e 94 56 15 	call	0x2aac	; 0x2aac <TIMER1_voidSetChannelACompMatchValue>
	
}
    1b56:	cf 91       	pop	r28
    1b58:	df 91       	pop	r29
    1b5a:	08 95       	ret

00001b5c <SERVO_voidSetAngle>:

void SERVO_voidSetAngle(u8 Copy_u8Angle)
{
    1b5c:	df 93       	push	r29
    1b5e:	cf 93       	push	r28
    1b60:	00 d0       	rcall	.+0      	; 0x1b62 <SERVO_voidSetAngle+0x6>
    1b62:	0f 92       	push	r0
    1b64:	cd b7       	in	r28, 0x3d	; 61
    1b66:	de b7       	in	r29, 0x3e	; 62
    1b68:	8b 83       	std	Y+3, r24	; 0x03
	u16 Local_u16Result = (((u32)Copy_u8Angle * (MAX_VALUE-MIN_VALUE))/ANGLE_180)+ MIN_VALUE ;
    1b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6c:	88 2f       	mov	r24, r24
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	a0 e0       	ldi	r26, 0x00	; 0
    1b72:	b0 e0       	ldi	r27, 0x00	; 0
    1b74:	26 ed       	ldi	r18, 0xD6	; 214
    1b76:	36 e0       	ldi	r19, 0x06	; 6
    1b78:	40 e0       	ldi	r20, 0x00	; 0
    1b7a:	50 e0       	ldi	r21, 0x00	; 0
    1b7c:	bc 01       	movw	r22, r24
    1b7e:	cd 01       	movw	r24, r26
    1b80:	0e 94 6d 2a 	call	0x54da	; 0x54da <__mulsi3>
    1b84:	dc 01       	movw	r26, r24
    1b86:	cb 01       	movw	r24, r22
    1b88:	24 eb       	ldi	r18, 0xB4	; 180
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	40 e0       	ldi	r20, 0x00	; 0
    1b8e:	50 e0       	ldi	r21, 0x00	; 0
    1b90:	bc 01       	movw	r22, r24
    1b92:	cd 01       	movw	r24, r26
    1b94:	0e 94 a0 2a 	call	0x5540	; 0x5540 <__udivmodsi4>
    1b98:	da 01       	movw	r26, r20
    1b9a:	c9 01       	movw	r24, r18
    1b9c:	82 51       	subi	r24, 0x12	; 18
    1b9e:	9d 4f       	sbci	r25, 0xFD	; 253
    1ba0:	9a 83       	std	Y+2, r25	; 0x02
    1ba2:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_voidSetChannelACompMatchValue(Local_u16Result);
    1ba4:	89 81       	ldd	r24, Y+1	; 0x01
    1ba6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba8:	0e 94 56 15 	call	0x2aac	; 0x2aac <TIMER1_voidSetChannelACompMatchValue>
}
    1bac:	0f 90       	pop	r0
    1bae:	0f 90       	pop	r0
    1bb0:	0f 90       	pop	r0
    1bb2:	cf 91       	pop	r28
    1bb4:	df 91       	pop	r29
    1bb6:	08 95       	ret

00001bb8 <SPI_voidInit>:

/* Discription : Function to Initialize SPI
 * Input : void
 * Output : void		*/
void SPI_voidInit(void)
{
    1bb8:	df 93       	push	r29
    1bba:	cf 93       	push	r28
    1bbc:	cd b7       	in	r28, 0x3d	; 61
    1bbe:	de b7       	in	r29, 0x3e	; 62
	/*Select Master/Slave mode*/
#if SPI_MODE_SELECT == SPI_MASTER
	{
		/*Master Initialization*/
		SET_BIT(SPCR,SPCR_MSTR);
    1bc0:	ad e2       	ldi	r26, 0x2D	; 45
    1bc2:	b0 e0       	ldi	r27, 0x00	; 0
    1bc4:	ed e2       	ldi	r30, 0x2D	; 45
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	80 81       	ld	r24, Z
    1bca:	80 61       	ori	r24, 0x10	; 16
    1bcc:	8c 93       	st	X, r24
		CLR_BIT(SPSR,SPSR_SPI2X);
	}
#elif SPI_CLK_RATE == SPI_CLK_OVER_16
	{
		/*Clock Prescaler: Divide by 16*/
		SET_BIT(SPCR,SPCR_SPR0);
    1bce:	ad e2       	ldi	r26, 0x2D	; 45
    1bd0:	b0 e0       	ldi	r27, 0x00	; 0
    1bd2:	ed e2       	ldi	r30, 0x2D	; 45
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 81       	ld	r24, Z
    1bd8:	81 60       	ori	r24, 0x01	; 1
    1bda:	8c 93       	st	X, r24
		CLR_BIT(SPCR,SPCR_SPR1);
    1bdc:	ad e2       	ldi	r26, 0x2D	; 45
    1bde:	b0 e0       	ldi	r27, 0x00	; 0
    1be0:	ed e2       	ldi	r30, 0x2D	; 45
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	80 81       	ld	r24, Z
    1be6:	8d 7f       	andi	r24, 0xFD	; 253
    1be8:	8c 93       	st	X, r24
		CLR_BIT(SPSR,SPSR_SPI2X);
    1bea:	ae e2       	ldi	r26, 0x2E	; 46
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	ee e2       	ldi	r30, 0x2E	; 46
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	80 81       	ld	r24, Z
    1bf4:	8e 7f       	andi	r24, 0xFE	; 254
    1bf6:	8c 93       	st	X, r24
	{
		CLR_BIT(SPCR,SPCR_DORD);
	}
#elif SPI_DATA_ORDER == SPI_LSB
	{
		SET_BIT(SPCR,SPCR_DORD);
    1bf8:	ad e2       	ldi	r26, 0x2D	; 45
    1bfa:	b0 e0       	ldi	r27, 0x00	; 0
    1bfc:	ed e2       	ldi	r30, 0x2D	; 45
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	80 81       	ld	r24, Z
    1c02:	80 62       	ori	r24, 0x20	; 32
    1c04:	8c 93       	st	X, r24
	{
		CLR_BIT(SPCR,SRCR_CPOL);
	}
#elif SPI_CLK_POL == SPI_RISING_EDGE
	{
		SET_BIT(SPCR,SPCR_CPOL);
    1c06:	ad e2       	ldi	r26, 0x2D	; 45
    1c08:	b0 e0       	ldi	r27, 0x00	; 0
    1c0a:	ed e2       	ldi	r30, 0x2D	; 45
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	80 81       	ld	r24, Z
    1c10:	88 60       	ori	r24, 0x08	; 8
    1c12:	8c 93       	st	X, r24
#endif

	/*Selecting Clock Phase*/
#if SPI_CLK_PHASE == SPI_SAMPLE
	{
		CLR_BIT(SPCR,SPCR_CPHA);
    1c14:	ad e2       	ldi	r26, 0x2D	; 45
    1c16:	b0 e0       	ldi	r27, 0x00	; 0
    1c18:	ed e2       	ldi	r30, 0x2D	; 45
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	8b 7f       	andi	r24, 0xFB	; 251
    1c20:	8c 93       	st	X, r24
		SET_BIT(SPCR,SPCR_CPHA);
	}
#endif

	/*SPI Enable*/
	SET_BIT(SPCR,SPCR_SPE);
    1c22:	ad e2       	ldi	r26, 0x2D	; 45
    1c24:	b0 e0       	ldi	r27, 0x00	; 0
    1c26:	ed e2       	ldi	r30, 0x2D	; 45
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	80 64       	ori	r24, 0x40	; 64
    1c2e:	8c 93       	st	X, r24
}
    1c30:	cf 91       	pop	r28
    1c32:	df 91       	pop	r29
    1c34:	08 95       	ret

00001c36 <SPI_u8TransceiveSynch>:
/*Discription : Function to send and receive dada Synchronously
 * Input : 1- Copy_pu8ReceivedData : pointer to hold the received data
 * 		   2- Copy_u8SendData : to send the data
 * Output : Local_u8ErrorStatus		*/
u8 SPI_u8TransceiveSynch(u8 *Copy_pu8ReceivedData,u8 Copy_u8SendData)
{
    1c36:	df 93       	push	r29
    1c38:	cf 93       	push	r28
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62
    1c3e:	28 97       	sbiw	r28, 0x08	; 8
    1c40:	0f b6       	in	r0, 0x3f	; 63
    1c42:	f8 94       	cli
    1c44:	de bf       	out	0x3e, r29	; 62
    1c46:	0f be       	out	0x3f, r0	; 63
    1c48:	cd bf       	out	0x3d, r28	; 61
    1c4a:	9f 83       	std	Y+7, r25	; 0x07
    1c4c:	8e 83       	std	Y+6, r24	; 0x06
    1c4e:	68 87       	std	Y+8, r22	; 0x08
	u32 Local_u32Counter=0;
    1c50:	1a 82       	std	Y+2, r1	; 0x02
    1c52:	1b 82       	std	Y+3, r1	; 0x03
    1c54:	1c 82       	std	Y+4, r1	; 0x04
    1c56:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8ErrorStatus = OK;
    1c58:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pu8ReceivedData == NULL)
    1c5a:	8e 81       	ldd	r24, Y+6	; 0x06
    1c5c:	9f 81       	ldd	r25, Y+7	; 0x07
    1c5e:	00 97       	sbiw	r24, 0x00	; 0
    1c60:	19 f4       	brne	.+6      	; 0x1c68 <SPI_u8TransceiveSynch+0x32>
	{
		Local_u8ErrorStatus = NULL_POINTER;
    1c62:	82 e0       	ldi	r24, 0x02	; 2
    1c64:	89 83       	std	Y+1, r24	; 0x01
    1c66:	36 c0       	rjmp	.+108    	; 0x1cd4 <SPI_u8TransceiveSynch+0x9e>
	}
	else
	{
		/*Writing in The Data register ---> sending*/
		SPDR = Copy_u8SendData;
    1c68:	ef e2       	ldi	r30, 0x2F	; 47
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	88 85       	ldd	r24, Y+8	; 0x08
    1c6e:	80 83       	st	Z, r24
    1c70:	0b c0       	rjmp	.+22     	; 0x1c88 <SPI_u8TransceiveSynch+0x52>

		/*Wait until transmission complete*/
		while((GET_BIT(SPSR,SPSR_SPIF)==0) && (Local_u32Counter != SPI_u32_TIMEOUT))
		{
			Local_u32Counter++;
    1c72:	8a 81       	ldd	r24, Y+2	; 0x02
    1c74:	9b 81       	ldd	r25, Y+3	; 0x03
    1c76:	ac 81       	ldd	r26, Y+4	; 0x04
    1c78:	bd 81       	ldd	r27, Y+5	; 0x05
    1c7a:	01 96       	adiw	r24, 0x01	; 1
    1c7c:	a1 1d       	adc	r26, r1
    1c7e:	b1 1d       	adc	r27, r1
    1c80:	8a 83       	std	Y+2, r24	; 0x02
    1c82:	9b 83       	std	Y+3, r25	; 0x03
    1c84:	ac 83       	std	Y+4, r26	; 0x04
    1c86:	bd 83       	std	Y+5, r27	; 0x05
	{
		/*Writing in The Data register ---> sending*/
		SPDR = Copy_u8SendData;

		/*Wait until transmission complete*/
		while((GET_BIT(SPSR,SPSR_SPIF)==0) && (Local_u32Counter != SPI_u32_TIMEOUT))
    1c88:	ee e2       	ldi	r30, 0x2E	; 46
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	80 81       	ld	r24, Z
    1c8e:	88 23       	and	r24, r24
    1c90:	64 f0       	brlt	.+24     	; 0x1caa <SPI_u8TransceiveSynch+0x74>
    1c92:	8a 81       	ldd	r24, Y+2	; 0x02
    1c94:	9b 81       	ldd	r25, Y+3	; 0x03
    1c96:	ac 81       	ldd	r26, Y+4	; 0x04
    1c98:	bd 81       	ldd	r27, Y+5	; 0x05
    1c9a:	80 35       	cpi	r24, 0x50	; 80
    1c9c:	23 ec       	ldi	r18, 0xC3	; 195
    1c9e:	92 07       	cpc	r25, r18
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	a2 07       	cpc	r26, r18
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	b2 07       	cpc	r27, r18
    1ca8:	21 f7       	brne	.-56     	; 0x1c72 <SPI_u8TransceiveSynch+0x3c>
		{
			Local_u32Counter++;
		}
		if(Local_u32Counter==SPI_u32_TIMEOUT)
    1caa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cac:	9b 81       	ldd	r25, Y+3	; 0x03
    1cae:	ac 81       	ldd	r26, Y+4	; 0x04
    1cb0:	bd 81       	ldd	r27, Y+5	; 0x05
    1cb2:	80 35       	cpi	r24, 0x50	; 80
    1cb4:	23 ec       	ldi	r18, 0xC3	; 195
    1cb6:	92 07       	cpc	r25, r18
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	a2 07       	cpc	r26, r18
    1cbc:	20 e0       	ldi	r18, 0x00	; 0
    1cbe:	b2 07       	cpc	r27, r18
    1cc0:	19 f4       	brne	.+6      	; 0x1cc8 <SPI_u8TransceiveSynch+0x92>
		{
			/*Loop is broken because the timeout is reached*/
			Local_u8ErrorStatus=NOK;
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	89 83       	std	Y+1, r24	; 0x01
    1cc6:	06 c0       	rjmp	.+12     	; 0x1cd4 <SPI_u8TransceiveSynch+0x9e>
		}
		else
		{
			*Copy_pu8ReceivedData = SPDR;
    1cc8:	ef e2       	ldi	r30, 0x2F	; 47
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	80 81       	ld	r24, Z
    1cce:	ee 81       	ldd	r30, Y+6	; 0x06
    1cd0:	ff 81       	ldd	r31, Y+7	; 0x07
    1cd2:	80 83       	st	Z, r24
		}
	}

	return Local_u8ErrorStatus;
    1cd4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cd6:	28 96       	adiw	r28, 0x08	; 8
    1cd8:	0f b6       	in	r0, 0x3f	; 63
    1cda:	f8 94       	cli
    1cdc:	de bf       	out	0x3e, r29	; 62
    1cde:	0f be       	out	0x3f, r0	; 63
    1ce0:	cd bf       	out	0x3d, r28	; 61
    1ce2:	cf 91       	pop	r28
    1ce4:	df 91       	pop	r29
    1ce6:	08 95       	ret

00001ce8 <SPI_u8TransceiveASynch>:
/*Discription : Function to send and receive dada ASynchronously
 * Input : 1- Copy_pu8ReceivedData : pointer to hold the received data
 * 		   2- Copy_u8SendData : to send the data
 * Output : Local_u8ErrorStatus		*/
u8 SPI_u8TransceiveASynch(u8 *Copy_pu8ReceivedData,u8 *Copy_u8SendData,void(*Copy_pvNotificationFunc)(void))
{
    1ce8:	df 93       	push	r29
    1cea:	cf 93       	push	r28
    1cec:	cd b7       	in	r28, 0x3d	; 61
    1cee:	de b7       	in	r29, 0x3e	; 62
    1cf0:	27 97       	sbiw	r28, 0x07	; 7
    1cf2:	0f b6       	in	r0, 0x3f	; 63
    1cf4:	f8 94       	cli
    1cf6:	de bf       	out	0x3e, r29	; 62
    1cf8:	0f be       	out	0x3f, r0	; 63
    1cfa:	cd bf       	out	0x3d, r28	; 61
    1cfc:	9b 83       	std	Y+3, r25	; 0x03
    1cfe:	8a 83       	std	Y+2, r24	; 0x02
    1d00:	7d 83       	std	Y+5, r23	; 0x05
    1d02:	6c 83       	std	Y+4, r22	; 0x04
    1d04:	5f 83       	std	Y+7, r21	; 0x07
    1d06:	4e 83       	std	Y+6, r20	; 0x06
	u8 Local_u8ErrorStatus = OK;
    1d08:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8ReceivedData == NULL || Copy_pvNotificationFunc == NULL)
    1d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d0e:	00 97       	sbiw	r24, 0x00	; 0
    1d10:	21 f0       	breq	.+8      	; 0x1d1a <SPI_u8TransceiveASynch+0x32>
    1d12:	8e 81       	ldd	r24, Y+6	; 0x06
    1d14:	9f 81       	ldd	r25, Y+7	; 0x07
    1d16:	00 97       	sbiw	r24, 0x00	; 0
    1d18:	19 f4       	brne	.+6      	; 0x1d20 <SPI_u8TransceiveASynch+0x38>
	{
		Local_u8ErrorStatus = NULL_POINTER;
    1d1a:	82 e0       	ldi	r24, 0x02	; 2
    1d1c:	89 83       	std	Y+1, r24	; 0x01
    1d1e:	2b c0       	rjmp	.+86     	; 0x1d76 <SPI_u8TransceiveASynch+0x8e>
	}
	else
	{
		if(SPI_u8BusyState == IDLE)
    1d20:	80 91 ca 01 	lds	r24, 0x01CA
    1d24:	88 23       	and	r24, r24
    1d26:	29 f5       	brne	.+74     	; 0x1d72 <SPI_u8TransceiveASynch+0x8a>
		{
			/*Make SPI Busy*/
			SPI_u8BusyState = BUSY;
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	80 93 ca 01 	sts	0x01CA, r24

			/*Initialize the receving data variable globally*/
			SPI_pu8ReceivedData = Copy_pu8ReceivedData;
    1d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d30:	9b 81       	ldd	r25, Y+3	; 0x03
    1d32:	90 93 c7 01 	sts	0x01C7, r25
    1d36:	80 93 c6 01 	sts	0x01C6, r24

			/*Initialize the sending data variable globally*/
			SPI_pu8SendData =Copy_u8SendData;
    1d3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d3c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d3e:	90 93 c9 01 	sts	0x01C9, r25
    1d42:	80 93 c8 01 	sts	0x01C8, r24

			/*Initialize the callback notification function globally*/
			SPI_pvCallBackNotificationFunc = Copy_pvNotificationFunc;
    1d46:	8e 81       	ldd	r24, Y+6	; 0x06
    1d48:	9f 81       	ldd	r25, Y+7	; 0x07
    1d4a:	90 93 c5 01 	sts	0x01C5, r25
    1d4e:	80 93 c4 01 	sts	0x01C4, r24

			SPDR=*SPI_pu8SendData;
    1d52:	af e2       	ldi	r26, 0x2F	; 47
    1d54:	b0 e0       	ldi	r27, 0x00	; 0
    1d56:	e0 91 c8 01 	lds	r30, 0x01C8
    1d5a:	f0 91 c9 01 	lds	r31, 0x01C9
    1d5e:	80 81       	ld	r24, Z
    1d60:	8c 93       	st	X, r24

			/* Enable SPI Interrupt*/
			SET_BIT(SPCR,SPCR_SPIE);
    1d62:	ad e2       	ldi	r26, 0x2D	; 45
    1d64:	b0 e0       	ldi	r27, 0x00	; 0
    1d66:	ed e2       	ldi	r30, 0x2D	; 45
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	80 81       	ld	r24, Z
    1d6c:	80 68       	ori	r24, 0x80	; 128
    1d6e:	8c 93       	st	X, r24
    1d70:	02 c0       	rjmp	.+4      	; 0x1d76 <SPI_u8TransceiveASynch+0x8e>
		}
		else
		{
			Local_u8ErrorStatus = BUSY_FUNC;
    1d72:	83 e0       	ldi	r24, 0x03	; 3
    1d74:	89 83       	std	Y+1, r24	; 0x01
		}
	}

	return Local_u8ErrorStatus;
    1d76:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d78:	27 96       	adiw	r28, 0x07	; 7
    1d7a:	0f b6       	in	r0, 0x3f	; 63
    1d7c:	f8 94       	cli
    1d7e:	de bf       	out	0x3e, r29	; 62
    1d80:	0f be       	out	0x3f, r0	; 63
    1d82:	cd bf       	out	0x3d, r28	; 61
    1d84:	cf 91       	pop	r28
    1d86:	df 91       	pop	r29
    1d88:	08 95       	ret

00001d8a <__vector_12>:

void __vector_12 (void)	 __attribute__((signal));
void __vector_12 (void)
{
    1d8a:	1f 92       	push	r1
    1d8c:	0f 92       	push	r0
    1d8e:	0f b6       	in	r0, 0x3f	; 63
    1d90:	0f 92       	push	r0
    1d92:	11 24       	eor	r1, r1
    1d94:	2f 93       	push	r18
    1d96:	3f 93       	push	r19
    1d98:	4f 93       	push	r20
    1d9a:	5f 93       	push	r21
    1d9c:	6f 93       	push	r22
    1d9e:	7f 93       	push	r23
    1da0:	8f 93       	push	r24
    1da2:	9f 93       	push	r25
    1da4:	af 93       	push	r26
    1da6:	bf 93       	push	r27
    1da8:	ef 93       	push	r30
    1daa:	ff 93       	push	r31
    1dac:	df 93       	push	r29
    1dae:	cf 93       	push	r28
    1db0:	cd b7       	in	r28, 0x3d	; 61
    1db2:	de b7       	in	r29, 0x3e	; 62
	/*Reading the received Data byte*/
	*SPI_pu8ReceivedData = SPDR;
    1db4:	a0 91 c6 01 	lds	r26, 0x01C6
    1db8:	b0 91 c7 01 	lds	r27, 0x01C7
    1dbc:	ef e2       	ldi	r30, 0x2F	; 47
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	80 81       	ld	r24, Z
    1dc2:	8c 93       	st	X, r24

	/*Make SPI State IDLE*/
	SPI_u8BusyState = IDLE;
    1dc4:	10 92 ca 01 	sts	0x01CA, r1

	/*Invoke SPI Notification Function*/
	SPI_pvCallBackNotificationFunc();
    1dc8:	e0 91 c4 01 	lds	r30, 0x01C4
    1dcc:	f0 91 c5 01 	lds	r31, 0x01C5
    1dd0:	09 95       	icall

	/*Disable SPI Interrupt*/
	CLR_BIT(SPCR,SPCR_SPIE);
    1dd2:	ad e2       	ldi	r26, 0x2D	; 45
    1dd4:	b0 e0       	ldi	r27, 0x00	; 0
    1dd6:	ed e2       	ldi	r30, 0x2D	; 45
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	8f 77       	andi	r24, 0x7F	; 127
    1dde:	8c 93       	st	X, r24
}
    1de0:	cf 91       	pop	r28
    1de2:	df 91       	pop	r29
    1de4:	ff 91       	pop	r31
    1de6:	ef 91       	pop	r30
    1de8:	bf 91       	pop	r27
    1dea:	af 91       	pop	r26
    1dec:	9f 91       	pop	r25
    1dee:	8f 91       	pop	r24
    1df0:	7f 91       	pop	r23
    1df2:	6f 91       	pop	r22
    1df4:	5f 91       	pop	r21
    1df6:	4f 91       	pop	r20
    1df8:	3f 91       	pop	r19
    1dfa:	2f 91       	pop	r18
    1dfc:	0f 90       	pop	r0
    1dfe:	0f be       	out	0x3f, r0	; 63
    1e00:	0f 90       	pop	r0
    1e02:	1f 90       	pop	r1
    1e04:	18 95       	reti

00001e06 <SSD_voidSetNumber>:
#include <util/delay.h>



void SSD_voidSetNumber(SSD_t* Copy_u8SSD,u8 Copy_u8Number)
{
    1e06:	df 93       	push	r29
    1e08:	cf 93       	push	r28
    1e0a:	cd b7       	in	r28, 0x3d	; 61
    1e0c:	de b7       	in	r29, 0x3e	; 62
    1e0e:	62 97       	sbiw	r28, 0x12	; 18
    1e10:	0f b6       	in	r0, 0x3f	; 63
    1e12:	f8 94       	cli
    1e14:	de bf       	out	0x3e, r29	; 62
    1e16:	0f be       	out	0x3f, r0	; 63
    1e18:	cd bf       	out	0x3d, r28	; 61
    1e1a:	9c 87       	std	Y+12, r25	; 0x0c
    1e1c:	8b 87       	std	Y+11, r24	; 0x0b
    1e1e:	6d 87       	std	Y+13, r22	; 0x0d
	u8 Local_u8SSDValue[10]=SSD_ARR_VAL;
    1e20:	ce 01       	movw	r24, r28
    1e22:	01 96       	adiw	r24, 0x01	; 1
    1e24:	9f 87       	std	Y+15, r25	; 0x0f
    1e26:	8e 87       	std	Y+14, r24	; 0x0e
    1e28:	e8 ea       	ldi	r30, 0xA8	; 168
    1e2a:	f1 e0       	ldi	r31, 0x01	; 1
    1e2c:	f9 8b       	std	Y+17, r31	; 0x11
    1e2e:	e8 8b       	std	Y+16, r30	; 0x10
    1e30:	fa e0       	ldi	r31, 0x0A	; 10
    1e32:	fa 8b       	std	Y+18, r31	; 0x12
    1e34:	e8 89       	ldd	r30, Y+16	; 0x10
    1e36:	f9 89       	ldd	r31, Y+17	; 0x11
    1e38:	00 80       	ld	r0, Z
    1e3a:	88 89       	ldd	r24, Y+16	; 0x10
    1e3c:	99 89       	ldd	r25, Y+17	; 0x11
    1e3e:	01 96       	adiw	r24, 0x01	; 1
    1e40:	99 8b       	std	Y+17, r25	; 0x11
    1e42:	88 8b       	std	Y+16, r24	; 0x10
    1e44:	ee 85       	ldd	r30, Y+14	; 0x0e
    1e46:	ff 85       	ldd	r31, Y+15	; 0x0f
    1e48:	00 82       	st	Z, r0
    1e4a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e4c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e4e:	01 96       	adiw	r24, 0x01	; 1
    1e50:	9f 87       	std	Y+15, r25	; 0x0f
    1e52:	8e 87       	std	Y+14, r24	; 0x0e
    1e54:	9a 89       	ldd	r25, Y+18	; 0x12
    1e56:	91 50       	subi	r25, 0x01	; 1
    1e58:	9a 8b       	std	Y+18, r25	; 0x12
    1e5a:	ea 89       	ldd	r30, Y+18	; 0x12
    1e5c:	ee 23       	and	r30, r30
    1e5e:	51 f7       	brne	.-44     	; 0x1e34 <SSD_voidSetNumber+0x2e>

	if(Copy_u8SSD->Com_Type == SSD_u8ComCathode)
    1e60:	eb 85       	ldd	r30, Y+11	; 0x0b
    1e62:	fc 85       	ldd	r31, Y+12	; 0x0c
    1e64:	83 81       	ldd	r24, Z+3	; 0x03
    1e66:	88 23       	and	r24, r24
    1e68:	d9 f4       	brne	.+54     	; 0x1ea0 <SSD_voidSetNumber+0x9a>
	{
		DIO_u8SetPinValue(Copy_u8SSD->Enable_Port,Copy_u8SSD->Enable_Pin,DIO_u8PIN_LOW);
    1e6a:	eb 85       	ldd	r30, Y+11	; 0x0b
    1e6c:	fc 85       	ldd	r31, Y+12	; 0x0c
    1e6e:	81 81       	ldd	r24, Z+1	; 0x01
    1e70:	eb 85       	ldd	r30, Y+11	; 0x0b
    1e72:	fc 85       	ldd	r31, Y+12	; 0x0c
    1e74:	92 81       	ldd	r25, Z+2	; 0x02
    1e76:	69 2f       	mov	r22, r25
    1e78:	40 e0       	ldi	r20, 0x00	; 0
    1e7a:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <DIO_u8SetPinValue>
		DIO_u8SetPortValue(Copy_u8SSD->Port,Local_u8SSDValue[Copy_u8Number]);
    1e7e:	eb 85       	ldd	r30, Y+11	; 0x0b
    1e80:	fc 85       	ldd	r31, Y+12	; 0x0c
    1e82:	40 81       	ld	r20, Z
    1e84:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e86:	28 2f       	mov	r18, r24
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	ce 01       	movw	r24, r28
    1e8c:	01 96       	adiw	r24, 0x01	; 1
    1e8e:	fc 01       	movw	r30, r24
    1e90:	e2 0f       	add	r30, r18
    1e92:	f3 1f       	adc	r31, r19
    1e94:	90 81       	ld	r25, Z
    1e96:	84 2f       	mov	r24, r20
    1e98:	69 2f       	mov	r22, r25
    1e9a:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <DIO_u8SetPortValue>
    1e9e:	1f c0       	rjmp	.+62     	; 0x1ede <SSD_voidSetNumber+0xd8>
	}
	else if(Copy_u8SSD->Com_Type == SSD_u8ComAnode)
    1ea0:	eb 85       	ldd	r30, Y+11	; 0x0b
    1ea2:	fc 85       	ldd	r31, Y+12	; 0x0c
    1ea4:	83 81       	ldd	r24, Z+3	; 0x03
    1ea6:	81 30       	cpi	r24, 0x01	; 1
    1ea8:	d1 f4       	brne	.+52     	; 0x1ede <SSD_voidSetNumber+0xd8>
	{
		DIO_u8SetPinValue(Copy_u8SSD->Enable_Port,Copy_u8SSD->Enable_Pin,DIO_u8PIN_HIGH);
    1eaa:	eb 85       	ldd	r30, Y+11	; 0x0b
    1eac:	fc 85       	ldd	r31, Y+12	; 0x0c
    1eae:	81 81       	ldd	r24, Z+1	; 0x01
    1eb0:	eb 85       	ldd	r30, Y+11	; 0x0b
    1eb2:	fc 85       	ldd	r31, Y+12	; 0x0c
    1eb4:	92 81       	ldd	r25, Z+2	; 0x02
    1eb6:	69 2f       	mov	r22, r25
    1eb8:	41 e0       	ldi	r20, 0x01	; 1
    1eba:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <DIO_u8SetPinValue>
		DIO_u8SetPortValue(Copy_u8SSD->Port,Local_u8SSDValue[Copy_u8Number]);
    1ebe:	eb 85       	ldd	r30, Y+11	; 0x0b
    1ec0:	fc 85       	ldd	r31, Y+12	; 0x0c
    1ec2:	40 81       	ld	r20, Z
    1ec4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ec6:	28 2f       	mov	r18, r24
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	ce 01       	movw	r24, r28
    1ecc:	01 96       	adiw	r24, 0x01	; 1
    1ece:	fc 01       	movw	r30, r24
    1ed0:	e2 0f       	add	r30, r18
    1ed2:	f3 1f       	adc	r31, r19
    1ed4:	90 81       	ld	r25, Z
    1ed6:	84 2f       	mov	r24, r20
    1ed8:	69 2f       	mov	r22, r25
    1eda:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <DIO_u8SetPortValue>
	}

}
    1ede:	62 96       	adiw	r28, 0x12	; 18
    1ee0:	0f b6       	in	r0, 0x3f	; 63
    1ee2:	f8 94       	cli
    1ee4:	de bf       	out	0x3e, r29	; 62
    1ee6:	0f be       	out	0x3f, r0	; 63
    1ee8:	cd bf       	out	0x3d, r28	; 61
    1eea:	cf 91       	pop	r28
    1eec:	df 91       	pop	r29
    1eee:	08 95       	ret

00001ef0 <SSD_voidMultiplex>:

void SSD_voidMultiplex(SSD_t* Copy_u8SSD1,SSD_t* Copy_u8SSD2,u8 Copy_u8Number1,u8 Copy_u8Number2)
{
    1ef0:	df 93       	push	r29
    1ef2:	cf 93       	push	r28
    1ef4:	cd b7       	in	r28, 0x3d	; 61
    1ef6:	de b7       	in	r29, 0x3e	; 62
    1ef8:	a2 97       	sbiw	r28, 0x22	; 34
    1efa:	0f b6       	in	r0, 0x3f	; 63
    1efc:	f8 94       	cli
    1efe:	de bf       	out	0x3e, r29	; 62
    1f00:	0f be       	out	0x3f, r0	; 63
    1f02:	cd bf       	out	0x3d, r28	; 61
    1f04:	9e 8f       	std	Y+30, r25	; 0x1e
    1f06:	8d 8f       	std	Y+29, r24	; 0x1d
    1f08:	78 a3       	std	Y+32, r23	; 0x20
    1f0a:	6f 8f       	std	Y+31, r22	; 0x1f
    1f0c:	49 a3       	std	Y+33, r20	; 0x21
    1f0e:	2a a3       	std	Y+34, r18	; 0x22

	SSD_voidSetNumber(Copy_u8SSD1,Copy_u8Number1);
    1f10:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f12:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f14:	69 a1       	ldd	r22, Y+33	; 0x21
    1f16:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <SSD_voidSetNumber>
	DIO_u8SetPinValue(Copy_u8SSD2->Enable_Port,Copy_u8SSD2->Enable_Pin,DIO_u8PIN_HIGH);
    1f1a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1f1c:	f8 a1       	ldd	r31, Y+32	; 0x20
    1f1e:	81 81       	ldd	r24, Z+1	; 0x01
    1f20:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1f22:	f8 a1       	ldd	r31, Y+32	; 0x20
    1f24:	92 81       	ldd	r25, Z+2	; 0x02
    1f26:	69 2f       	mov	r22, r25
    1f28:	41 e0       	ldi	r20, 0x01	; 1
    1f2a:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <DIO_u8SetPinValue>
    1f2e:	80 e0       	ldi	r24, 0x00	; 0
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	a0 e2       	ldi	r26, 0x20	; 32
    1f34:	b1 e4       	ldi	r27, 0x41	; 65
    1f36:	89 8f       	std	Y+25, r24	; 0x19
    1f38:	9a 8f       	std	Y+26, r25	; 0x1a
    1f3a:	ab 8f       	std	Y+27, r26	; 0x1b
    1f3c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f3e:	69 8d       	ldd	r22, Y+25	; 0x19
    1f40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	4a ef       	ldi	r20, 0xFA	; 250
    1f4c:	54 e4       	ldi	r21, 0x44	; 68
    1f4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f52:	dc 01       	movw	r26, r24
    1f54:	cb 01       	movw	r24, r22
    1f56:	8d 8b       	std	Y+21, r24	; 0x15
    1f58:	9e 8b       	std	Y+22, r25	; 0x16
    1f5a:	af 8b       	std	Y+23, r26	; 0x17
    1f5c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f5e:	6d 89       	ldd	r22, Y+21	; 0x15
    1f60:	7e 89       	ldd	r23, Y+22	; 0x16
    1f62:	8f 89       	ldd	r24, Y+23	; 0x17
    1f64:	98 8d       	ldd	r25, Y+24	; 0x18
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	40 e8       	ldi	r20, 0x80	; 128
    1f6c:	5f e3       	ldi	r21, 0x3F	; 63
    1f6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f72:	88 23       	and	r24, r24
    1f74:	2c f4       	brge	.+10     	; 0x1f80 <SSD_voidMultiplex+0x90>
		__ticks = 1;
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	9c 8b       	std	Y+20, r25	; 0x14
    1f7c:	8b 8b       	std	Y+19, r24	; 0x13
    1f7e:	3f c0       	rjmp	.+126    	; 0x1ffe <SSD_voidMultiplex+0x10e>
	else if (__tmp > 65535)
    1f80:	6d 89       	ldd	r22, Y+21	; 0x15
    1f82:	7e 89       	ldd	r23, Y+22	; 0x16
    1f84:	8f 89       	ldd	r24, Y+23	; 0x17
    1f86:	98 8d       	ldd	r25, Y+24	; 0x18
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	3f ef       	ldi	r19, 0xFF	; 255
    1f8c:	4f e7       	ldi	r20, 0x7F	; 127
    1f8e:	57 e4       	ldi	r21, 0x47	; 71
    1f90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f94:	18 16       	cp	r1, r24
    1f96:	4c f5       	brge	.+82     	; 0x1fea <SSD_voidMultiplex+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f98:	69 8d       	ldd	r22, Y+25	; 0x19
    1f9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	40 e2       	ldi	r20, 0x20	; 32
    1fa6:	51 e4       	ldi	r21, 0x41	; 65
    1fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	bc 01       	movw	r22, r24
    1fb2:	cd 01       	movw	r24, r26
    1fb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	9c 8b       	std	Y+20, r25	; 0x14
    1fbe:	8b 8b       	std	Y+19, r24	; 0x13
    1fc0:	0f c0       	rjmp	.+30     	; 0x1fe0 <SSD_voidMultiplex+0xf0>
    1fc2:	88 ec       	ldi	r24, 0xC8	; 200
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	9a 8b       	std	Y+18, r25	; 0x12
    1fc8:	89 8b       	std	Y+17, r24	; 0x11
    1fca:	89 89       	ldd	r24, Y+17	; 0x11
    1fcc:	9a 89       	ldd	r25, Y+18	; 0x12
    1fce:	01 97       	sbiw	r24, 0x01	; 1
    1fd0:	f1 f7       	brne	.-4      	; 0x1fce <SSD_voidMultiplex+0xde>
    1fd2:	9a 8b       	std	Y+18, r25	; 0x12
    1fd4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd6:	8b 89       	ldd	r24, Y+19	; 0x13
    1fd8:	9c 89       	ldd	r25, Y+20	; 0x14
    1fda:	01 97       	sbiw	r24, 0x01	; 1
    1fdc:	9c 8b       	std	Y+20, r25	; 0x14
    1fde:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fe0:	8b 89       	ldd	r24, Y+19	; 0x13
    1fe2:	9c 89       	ldd	r25, Y+20	; 0x14
    1fe4:	00 97       	sbiw	r24, 0x00	; 0
    1fe6:	69 f7       	brne	.-38     	; 0x1fc2 <SSD_voidMultiplex+0xd2>
    1fe8:	14 c0       	rjmp	.+40     	; 0x2012 <SSD_voidMultiplex+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fea:	6d 89       	ldd	r22, Y+21	; 0x15
    1fec:	7e 89       	ldd	r23, Y+22	; 0x16
    1fee:	8f 89       	ldd	r24, Y+23	; 0x17
    1ff0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	cb 01       	movw	r24, r22
    1ffa:	9c 8b       	std	Y+20, r25	; 0x14
    1ffc:	8b 8b       	std	Y+19, r24	; 0x13
    1ffe:	8b 89       	ldd	r24, Y+19	; 0x13
    2000:	9c 89       	ldd	r25, Y+20	; 0x14
    2002:	98 8b       	std	Y+16, r25	; 0x10
    2004:	8f 87       	std	Y+15, r24	; 0x0f
    2006:	8f 85       	ldd	r24, Y+15	; 0x0f
    2008:	98 89       	ldd	r25, Y+16	; 0x10
    200a:	01 97       	sbiw	r24, 0x01	; 1
    200c:	f1 f7       	brne	.-4      	; 0x200a <SSD_voidMultiplex+0x11a>
    200e:	98 8b       	std	Y+16, r25	; 0x10
    2010:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	SSD_voidSetNumber(Copy_u8SSD2,Copy_u8Number2);
    2012:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2014:	98 a1       	ldd	r25, Y+32	; 0x20
    2016:	6a a1       	ldd	r22, Y+34	; 0x22
    2018:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <SSD_voidSetNumber>
	DIO_u8SetPinValue(Copy_u8SSD1->Enable_Port,Copy_u8SSD1->Enable_Pin,DIO_u8PIN_HIGH);
    201c:	ed 8d       	ldd	r30, Y+29	; 0x1d
    201e:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2020:	81 81       	ldd	r24, Z+1	; 0x01
    2022:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2024:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2026:	92 81       	ldd	r25, Z+2	; 0x02
    2028:	69 2f       	mov	r22, r25
    202a:	41 e0       	ldi	r20, 0x01	; 1
    202c:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <DIO_u8SetPinValue>
    2030:	80 e0       	ldi	r24, 0x00	; 0
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	a0 e2       	ldi	r26, 0x20	; 32
    2036:	b1 e4       	ldi	r27, 0x41	; 65
    2038:	8b 87       	std	Y+11, r24	; 0x0b
    203a:	9c 87       	std	Y+12, r25	; 0x0c
    203c:	ad 87       	std	Y+13, r26	; 0x0d
    203e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2040:	6b 85       	ldd	r22, Y+11	; 0x0b
    2042:	7c 85       	ldd	r23, Y+12	; 0x0c
    2044:	8d 85       	ldd	r24, Y+13	; 0x0d
    2046:	9e 85       	ldd	r25, Y+14	; 0x0e
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	4a ef       	ldi	r20, 0xFA	; 250
    204e:	54 e4       	ldi	r21, 0x44	; 68
    2050:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2054:	dc 01       	movw	r26, r24
    2056:	cb 01       	movw	r24, r22
    2058:	8f 83       	std	Y+7, r24	; 0x07
    205a:	98 87       	std	Y+8, r25	; 0x08
    205c:	a9 87       	std	Y+9, r26	; 0x09
    205e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2060:	6f 81       	ldd	r22, Y+7	; 0x07
    2062:	78 85       	ldd	r23, Y+8	; 0x08
    2064:	89 85       	ldd	r24, Y+9	; 0x09
    2066:	9a 85       	ldd	r25, Y+10	; 0x0a
    2068:	20 e0       	ldi	r18, 0x00	; 0
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	40 e8       	ldi	r20, 0x80	; 128
    206e:	5f e3       	ldi	r21, 0x3F	; 63
    2070:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2074:	88 23       	and	r24, r24
    2076:	2c f4       	brge	.+10     	; 0x2082 <SSD_voidMultiplex+0x192>
		__ticks = 1;
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	9e 83       	std	Y+6, r25	; 0x06
    207e:	8d 83       	std	Y+5, r24	; 0x05
    2080:	3f c0       	rjmp	.+126    	; 0x2100 <SSD_voidMultiplex+0x210>
	else if (__tmp > 65535)
    2082:	6f 81       	ldd	r22, Y+7	; 0x07
    2084:	78 85       	ldd	r23, Y+8	; 0x08
    2086:	89 85       	ldd	r24, Y+9	; 0x09
    2088:	9a 85       	ldd	r25, Y+10	; 0x0a
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	3f ef       	ldi	r19, 0xFF	; 255
    208e:	4f e7       	ldi	r20, 0x7F	; 127
    2090:	57 e4       	ldi	r21, 0x47	; 71
    2092:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2096:	18 16       	cp	r1, r24
    2098:	4c f5       	brge	.+82     	; 0x20ec <SSD_voidMultiplex+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    209a:	6b 85       	ldd	r22, Y+11	; 0x0b
    209c:	7c 85       	ldd	r23, Y+12	; 0x0c
    209e:	8d 85       	ldd	r24, Y+13	; 0x0d
    20a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    20a2:	20 e0       	ldi	r18, 0x00	; 0
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	40 e2       	ldi	r20, 0x20	; 32
    20a8:	51 e4       	ldi	r21, 0x41	; 65
    20aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ae:	dc 01       	movw	r26, r24
    20b0:	cb 01       	movw	r24, r22
    20b2:	bc 01       	movw	r22, r24
    20b4:	cd 01       	movw	r24, r26
    20b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ba:	dc 01       	movw	r26, r24
    20bc:	cb 01       	movw	r24, r22
    20be:	9e 83       	std	Y+6, r25	; 0x06
    20c0:	8d 83       	std	Y+5, r24	; 0x05
    20c2:	0f c0       	rjmp	.+30     	; 0x20e2 <SSD_voidMultiplex+0x1f2>
    20c4:	88 ec       	ldi	r24, 0xC8	; 200
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	9c 83       	std	Y+4, r25	; 0x04
    20ca:	8b 83       	std	Y+3, r24	; 0x03
    20cc:	8b 81       	ldd	r24, Y+3	; 0x03
    20ce:	9c 81       	ldd	r25, Y+4	; 0x04
    20d0:	01 97       	sbiw	r24, 0x01	; 1
    20d2:	f1 f7       	brne	.-4      	; 0x20d0 <SSD_voidMultiplex+0x1e0>
    20d4:	9c 83       	std	Y+4, r25	; 0x04
    20d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d8:	8d 81       	ldd	r24, Y+5	; 0x05
    20da:	9e 81       	ldd	r25, Y+6	; 0x06
    20dc:	01 97       	sbiw	r24, 0x01	; 1
    20de:	9e 83       	std	Y+6, r25	; 0x06
    20e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20e2:	8d 81       	ldd	r24, Y+5	; 0x05
    20e4:	9e 81       	ldd	r25, Y+6	; 0x06
    20e6:	00 97       	sbiw	r24, 0x00	; 0
    20e8:	69 f7       	brne	.-38     	; 0x20c4 <SSD_voidMultiplex+0x1d4>
    20ea:	14 c0       	rjmp	.+40     	; 0x2114 <SSD_voidMultiplex+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ec:	6f 81       	ldd	r22, Y+7	; 0x07
    20ee:	78 85       	ldd	r23, Y+8	; 0x08
    20f0:	89 85       	ldd	r24, Y+9	; 0x09
    20f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	9e 83       	std	Y+6, r25	; 0x06
    20fe:	8d 83       	std	Y+5, r24	; 0x05
    2100:	8d 81       	ldd	r24, Y+5	; 0x05
    2102:	9e 81       	ldd	r25, Y+6	; 0x06
    2104:	9a 83       	std	Y+2, r25	; 0x02
    2106:	89 83       	std	Y+1, r24	; 0x01
    2108:	89 81       	ldd	r24, Y+1	; 0x01
    210a:	9a 81       	ldd	r25, Y+2	; 0x02
    210c:	01 97       	sbiw	r24, 0x01	; 1
    210e:	f1 f7       	brne	.-4      	; 0x210c <SSD_voidMultiplex+0x21c>
    2110:	9a 83       	std	Y+2, r25	; 0x02
    2112:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    2114:	a2 96       	adiw	r28, 0x22	; 34
    2116:	0f b6       	in	r0, 0x3f	; 63
    2118:	f8 94       	cli
    211a:	de bf       	out	0x3e, r29	; 62
    211c:	0f be       	out	0x3f, r0	; 63
    211e:	cd bf       	out	0x3d, r28	; 61
    2120:	cf 91       	pop	r28
    2122:	df 91       	pop	r29
    2124:	08 95       	ret

00002126 <TIMER0_voidInit>:


static void(*TIMER0_pvCallBackFunc[2])(void)={NULL};

void TIMER0_voidInit(u8 Copy_u8Mode, u8 Copy_u8Prescaler)
{
    2126:	df 93       	push	r29
    2128:	cf 93       	push	r28
    212a:	00 d0       	rcall	.+0      	; 0x212c <TIMER0_voidInit+0x6>
    212c:	00 d0       	rcall	.+0      	; 0x212e <TIMER0_voidInit+0x8>
    212e:	cd b7       	in	r28, 0x3d	; 61
    2130:	de b7       	in	r29, 0x3e	; 62
    2132:	89 83       	std	Y+1, r24	; 0x01
    2134:	6a 83       	std	Y+2, r22	; 0x02
	/*Select Waveform generation mode*/
	switch(Copy_u8Mode)
    2136:	89 81       	ldd	r24, Y+1	; 0x01
    2138:	28 2f       	mov	r18, r24
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	3c 83       	std	Y+4, r19	; 0x04
    213e:	2b 83       	std	Y+3, r18	; 0x03
    2140:	8b 81       	ldd	r24, Y+3	; 0x03
    2142:	9c 81       	ldd	r25, Y+4	; 0x04
    2144:	81 30       	cpi	r24, 0x01	; 1
    2146:	91 05       	cpc	r25, r1
    2148:	21 f1       	breq	.+72     	; 0x2192 <TIMER0_voidInit+0x6c>
    214a:	2b 81       	ldd	r18, Y+3	; 0x03
    214c:	3c 81       	ldd	r19, Y+4	; 0x04
    214e:	22 30       	cpi	r18, 0x02	; 2
    2150:	31 05       	cpc	r19, r1
    2152:	2c f4       	brge	.+10     	; 0x215e <TIMER0_voidInit+0x38>
    2154:	8b 81       	ldd	r24, Y+3	; 0x03
    2156:	9c 81       	ldd	r25, Y+4	; 0x04
    2158:	00 97       	sbiw	r24, 0x00	; 0
    215a:	61 f0       	breq	.+24     	; 0x2174 <TIMER0_voidInit+0x4e>
    215c:	46 c0       	rjmp	.+140    	; 0x21ea <TIMER0_voidInit+0xc4>
    215e:	2b 81       	ldd	r18, Y+3	; 0x03
    2160:	3c 81       	ldd	r19, Y+4	; 0x04
    2162:	22 30       	cpi	r18, 0x02	; 2
    2164:	31 05       	cpc	r19, r1
    2166:	21 f1       	breq	.+72     	; 0x21b0 <TIMER0_voidInit+0x8a>
    2168:	8b 81       	ldd	r24, Y+3	; 0x03
    216a:	9c 81       	ldd	r25, Y+4	; 0x04
    216c:	83 30       	cpi	r24, 0x03	; 3
    216e:	91 05       	cpc	r25, r1
    2170:	71 f1       	breq	.+92     	; 0x21ce <TIMER0_voidInit+0xa8>
    2172:	3b c0       	rjmp	.+118    	; 0x21ea <TIMER0_voidInit+0xc4>
	{
	case TIMER0_NORMAL_MODE: CLR_BIT(TCCR0,TCCR0_WGM00); CLR_BIT(TCCR0,TCCR0_WGM01); break;
    2174:	a3 e5       	ldi	r26, 0x53	; 83
    2176:	b0 e0       	ldi	r27, 0x00	; 0
    2178:	e3 e5       	ldi	r30, 0x53	; 83
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	80 81       	ld	r24, Z
    217e:	8f 7b       	andi	r24, 0xBF	; 191
    2180:	8c 93       	st	X, r24
    2182:	a3 e5       	ldi	r26, 0x53	; 83
    2184:	b0 e0       	ldi	r27, 0x00	; 0
    2186:	e3 e5       	ldi	r30, 0x53	; 83
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	80 81       	ld	r24, Z
    218c:	87 7f       	andi	r24, 0xF7	; 247
    218e:	8c 93       	st	X, r24
    2190:	2c c0       	rjmp	.+88     	; 0x21ea <TIMER0_voidInit+0xc4>
	case TIMER0_PHASE_CORRECT_PWM :SET_BIT(TCCR0,TCCR0_WGM00); CLR_BIT(TCCR0,TCCR0_WGM01); break;
    2192:	a3 e5       	ldi	r26, 0x53	; 83
    2194:	b0 e0       	ldi	r27, 0x00	; 0
    2196:	e3 e5       	ldi	r30, 0x53	; 83
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	80 81       	ld	r24, Z
    219c:	80 64       	ori	r24, 0x40	; 64
    219e:	8c 93       	st	X, r24
    21a0:	a3 e5       	ldi	r26, 0x53	; 83
    21a2:	b0 e0       	ldi	r27, 0x00	; 0
    21a4:	e3 e5       	ldi	r30, 0x53	; 83
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	80 81       	ld	r24, Z
    21aa:	87 7f       	andi	r24, 0xF7	; 247
    21ac:	8c 93       	st	X, r24
    21ae:	1d c0       	rjmp	.+58     	; 0x21ea <TIMER0_voidInit+0xc4>
	case TIMER0_CTC: CLR_BIT(TCCR0,TCCR0_WGM00); SET_BIT(TCCR0,TCCR0_WGM01); break;
    21b0:	a3 e5       	ldi	r26, 0x53	; 83
    21b2:	b0 e0       	ldi	r27, 0x00	; 0
    21b4:	e3 e5       	ldi	r30, 0x53	; 83
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	80 81       	ld	r24, Z
    21ba:	8f 7b       	andi	r24, 0xBF	; 191
    21bc:	8c 93       	st	X, r24
    21be:	a3 e5       	ldi	r26, 0x53	; 83
    21c0:	b0 e0       	ldi	r27, 0x00	; 0
    21c2:	e3 e5       	ldi	r30, 0x53	; 83
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	80 81       	ld	r24, Z
    21c8:	88 60       	ori	r24, 0x08	; 8
    21ca:	8c 93       	st	X, r24
    21cc:	0e c0       	rjmp	.+28     	; 0x21ea <TIMER0_voidInit+0xc4>
	case TIMER0_FAST_PWM: SET_BIT(TCCR0,TCCR0_WGM00); SET_BIT(TCCR0,TCCR0_WGM01); break;
    21ce:	a3 e5       	ldi	r26, 0x53	; 83
    21d0:	b0 e0       	ldi	r27, 0x00	; 0
    21d2:	e3 e5       	ldi	r30, 0x53	; 83
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	80 81       	ld	r24, Z
    21d8:	80 64       	ori	r24, 0x40	; 64
    21da:	8c 93       	st	X, r24
    21dc:	a3 e5       	ldi	r26, 0x53	; 83
    21de:	b0 e0       	ldi	r27, 0x00	; 0
    21e0:	e3 e5       	ldi	r30, 0x53	; 83
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	80 81       	ld	r24, Z
    21e6:	88 60       	ori	r24, 0x08	; 8
    21e8:	8c 93       	st	X, r24
	default: break;
	}


	/*Set Prescaler division factor*/
	TCCR0 &=PRESCALER_MASK;
    21ea:	a3 e5       	ldi	r26, 0x53	; 83
    21ec:	b0 e0       	ldi	r27, 0x00	; 0
    21ee:	e3 e5       	ldi	r30, 0x53	; 83
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	80 81       	ld	r24, Z
    21f4:	88 7f       	andi	r24, 0xF8	; 248
    21f6:	8c 93       	st	X, r24
	TCCR0 |=Copy_u8Prescaler;
    21f8:	a3 e5       	ldi	r26, 0x53	; 83
    21fa:	b0 e0       	ldi	r27, 0x00	; 0
    21fc:	e3 e5       	ldi	r30, 0x53	; 83
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	90 81       	ld	r25, Z
    2202:	8a 81       	ldd	r24, Y+2	; 0x02
    2204:	89 2b       	or	r24, r25
    2206:	8c 93       	st	X, r24

}
    2208:	0f 90       	pop	r0
    220a:	0f 90       	pop	r0
    220c:	0f 90       	pop	r0
    220e:	0f 90       	pop	r0
    2210:	cf 91       	pop	r28
    2212:	df 91       	pop	r29
    2214:	08 95       	ret

00002216 <TIMER0_voidSetCompMatchOutputMode>:

void TIMER0_voidSetCompMatchOutputMode(u8 Copy_u8CompOutputMode)
{
    2216:	df 93       	push	r29
    2218:	cf 93       	push	r28
    221a:	00 d0       	rcall	.+0      	; 0x221c <TIMER0_voidSetCompMatchOutputMode+0x6>
    221c:	0f 92       	push	r0
    221e:	cd b7       	in	r28, 0x3d	; 61
    2220:	de b7       	in	r29, 0x3e	; 62
    2222:	89 83       	std	Y+1, r24	; 0x01
	/*Select Compare match Output mode*/
	switch(Copy_u8CompOutputMode)
    2224:	89 81       	ldd	r24, Y+1	; 0x01
    2226:	28 2f       	mov	r18, r24
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	3b 83       	std	Y+3, r19	; 0x03
    222c:	2a 83       	std	Y+2, r18	; 0x02
    222e:	8a 81       	ldd	r24, Y+2	; 0x02
    2230:	9b 81       	ldd	r25, Y+3	; 0x03
    2232:	81 30       	cpi	r24, 0x01	; 1
    2234:	91 05       	cpc	r25, r1
    2236:	c1 f0       	breq	.+48     	; 0x2268 <TIMER0_voidSetCompMatchOutputMode+0x52>
    2238:	2a 81       	ldd	r18, Y+2	; 0x02
    223a:	3b 81       	ldd	r19, Y+3	; 0x03
    223c:	22 30       	cpi	r18, 0x02	; 2
    223e:	31 05       	cpc	r19, r1
    2240:	11 f1       	breq	.+68     	; 0x2286 <TIMER0_voidSetCompMatchOutputMode+0x70>
    2242:	8a 81       	ldd	r24, Y+2	; 0x02
    2244:	9b 81       	ldd	r25, Y+3	; 0x03
    2246:	00 97       	sbiw	r24, 0x00	; 0
    2248:	61 f5       	brne	.+88     	; 0x22a2 <TIMER0_voidSetCompMatchOutputMode+0x8c>
	{
	case NORMAL_OPERATION_MODE : CLR_BIT(TCCR0,TCCR0_COM00); CLR_BIT(TCCR0,TCCR0_COM01); break;
    224a:	a3 e5       	ldi	r26, 0x53	; 83
    224c:	b0 e0       	ldi	r27, 0x00	; 0
    224e:	e3 e5       	ldi	r30, 0x53	; 83
    2250:	f0 e0       	ldi	r31, 0x00	; 0
    2252:	80 81       	ld	r24, Z
    2254:	8f 7e       	andi	r24, 0xEF	; 239
    2256:	8c 93       	st	X, r24
    2258:	a3 e5       	ldi	r26, 0x53	; 83
    225a:	b0 e0       	ldi	r27, 0x00	; 0
    225c:	e3 e5       	ldi	r30, 0x53	; 83
    225e:	f0 e0       	ldi	r31, 0x00	; 0
    2260:	80 81       	ld	r24, Z
    2262:	8f 7d       	andi	r24, 0xDF	; 223
    2264:	8c 93       	st	X, r24
    2266:	1d c0       	rjmp	.+58     	; 0x22a2 <TIMER0_voidSetCompMatchOutputMode+0x8c>
	case NON_INVERTED_MODE: CLR_BIT(TCCR0,TCCR0_COM00); SET_BIT(TCCR0,TCCR0_COM01); break;
    2268:	a3 e5       	ldi	r26, 0x53	; 83
    226a:	b0 e0       	ldi	r27, 0x00	; 0
    226c:	e3 e5       	ldi	r30, 0x53	; 83
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	80 81       	ld	r24, Z
    2272:	8f 7e       	andi	r24, 0xEF	; 239
    2274:	8c 93       	st	X, r24
    2276:	a3 e5       	ldi	r26, 0x53	; 83
    2278:	b0 e0       	ldi	r27, 0x00	; 0
    227a:	e3 e5       	ldi	r30, 0x53	; 83
    227c:	f0 e0       	ldi	r31, 0x00	; 0
    227e:	80 81       	ld	r24, Z
    2280:	80 62       	ori	r24, 0x20	; 32
    2282:	8c 93       	st	X, r24
    2284:	0e c0       	rjmp	.+28     	; 0x22a2 <TIMER0_voidSetCompMatchOutputMode+0x8c>
	case INVERTED_MODE : SET_BIT(TCCR0,TCCR0_COM00); SET_BIT(TCCR0,TCCR0_COM01); break;
    2286:	a3 e5       	ldi	r26, 0x53	; 83
    2288:	b0 e0       	ldi	r27, 0x00	; 0
    228a:	e3 e5       	ldi	r30, 0x53	; 83
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	80 81       	ld	r24, Z
    2290:	80 61       	ori	r24, 0x10	; 16
    2292:	8c 93       	st	X, r24
    2294:	a3 e5       	ldi	r26, 0x53	; 83
    2296:	b0 e0       	ldi	r27, 0x00	; 0
    2298:	e3 e5       	ldi	r30, 0x53	; 83
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	80 81       	ld	r24, Z
    229e:	80 62       	ori	r24, 0x20	; 32
    22a0:	8c 93       	st	X, r24
	default : break;
	}

}
    22a2:	0f 90       	pop	r0
    22a4:	0f 90       	pop	r0
    22a6:	0f 90       	pop	r0
    22a8:	cf 91       	pop	r28
    22aa:	df 91       	pop	r29
    22ac:	08 95       	ret

000022ae <TIMER0_voidSetCompMatchValue>:

void TIMER0_voidSetCompMatchValue(u8 Copy_u8Value)
{
    22ae:	df 93       	push	r29
    22b0:	cf 93       	push	r28
    22b2:	0f 92       	push	r0
    22b4:	cd b7       	in	r28, 0x3d	; 61
    22b6:	de b7       	in	r29, 0x3e	; 62
    22b8:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8Value;
    22ba:	ec e5       	ldi	r30, 0x5C	; 92
    22bc:	f0 e0       	ldi	r31, 0x00	; 0
    22be:	89 81       	ldd	r24, Y+1	; 0x01
    22c0:	80 83       	st	Z, r24
}
    22c2:	0f 90       	pop	r0
    22c4:	cf 91       	pop	r28
    22c6:	df 91       	pop	r29
    22c8:	08 95       	ret

000022ca <TIMER0_voidSetTimerValue>:

void TIMER0_voidSetTimerValue(u8 Copy_u8Value)
{
    22ca:	df 93       	push	r29
    22cc:	cf 93       	push	r28
    22ce:	0f 92       	push	r0
    22d0:	cd b7       	in	r28, 0x3d	; 61
    22d2:	de b7       	in	r29, 0x3e	; 62
    22d4:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Value;
    22d6:	e2 e5       	ldi	r30, 0x52	; 82
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	89 81       	ldd	r24, Y+1	; 0x01
    22dc:	80 83       	st	Z, r24
}
    22de:	0f 90       	pop	r0
    22e0:	cf 91       	pop	r28
    22e2:	df 91       	pop	r29
    22e4:	08 95       	ret

000022e6 <TIMER0_u8ReadTimerValue>:

u8 TIMER0_u8ReadTimerValue(void)
{
    22e6:	df 93       	push	r29
    22e8:	cf 93       	push	r28
    22ea:	cd b7       	in	r28, 0x3d	; 61
    22ec:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
    22ee:	e2 e5       	ldi	r30, 0x52	; 82
    22f0:	f0 e0       	ldi	r31, 0x00	; 0
    22f2:	80 81       	ld	r24, Z
}
    22f4:	cf 91       	pop	r28
    22f6:	df 91       	pop	r29
    22f8:	08 95       	ret

000022fa <TIMER0_voidCompMatchInterruptEnable>:

void TIMER0_voidCompMatchInterruptEnable(void)
{
    22fa:	df 93       	push	r29
    22fc:	cf 93       	push	r28
    22fe:	cd b7       	in	r28, 0x3d	; 61
    2300:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_OCIE1);
    2302:	a9 e5       	ldi	r26, 0x59	; 89
    2304:	b0 e0       	ldi	r27, 0x00	; 0
    2306:	e9 e5       	ldi	r30, 0x59	; 89
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	80 81       	ld	r24, Z
    230c:	82 60       	ori	r24, 0x02	; 2
    230e:	8c 93       	st	X, r24
}
    2310:	cf 91       	pop	r28
    2312:	df 91       	pop	r29
    2314:	08 95       	ret

00002316 <TIMER0_voidCompMatchInterruptDisable>:

void TIMER0_voidCompMatchInterruptDisable(void)
{
    2316:	df 93       	push	r29
    2318:	cf 93       	push	r28
    231a:	cd b7       	in	r28, 0x3d	; 61
    231c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_OCIE1);
    231e:	a9 e5       	ldi	r26, 0x59	; 89
    2320:	b0 e0       	ldi	r27, 0x00	; 0
    2322:	e9 e5       	ldi	r30, 0x59	; 89
    2324:	f0 e0       	ldi	r31, 0x00	; 0
    2326:	80 81       	ld	r24, Z
    2328:	8d 7f       	andi	r24, 0xFD	; 253
    232a:	8c 93       	st	X, r24
}
    232c:	cf 91       	pop	r28
    232e:	df 91       	pop	r29
    2330:	08 95       	ret

00002332 <TIMER0_voidOVFInterruptEnable>:

void TIMER0_voidOVFInterruptEnable(void)
{
    2332:	df 93       	push	r29
    2334:	cf 93       	push	r28
    2336:	cd b7       	in	r28, 0x3d	; 61
    2338:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TOIE0);
    233a:	a9 e5       	ldi	r26, 0x59	; 89
    233c:	b0 e0       	ldi	r27, 0x00	; 0
    233e:	e9 e5       	ldi	r30, 0x59	; 89
    2340:	f0 e0       	ldi	r31, 0x00	; 0
    2342:	80 81       	ld	r24, Z
    2344:	81 60       	ori	r24, 0x01	; 1
    2346:	8c 93       	st	X, r24
}
    2348:	cf 91       	pop	r28
    234a:	df 91       	pop	r29
    234c:	08 95       	ret

0000234e <TIMER0_voidOVFInterruptDisable>:

void TIMER0_voidOVFInterruptDisable(void)
{
    234e:	df 93       	push	r29
    2350:	cf 93       	push	r28
    2352:	cd b7       	in	r28, 0x3d	; 61
    2354:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TOIE0);
    2356:	a9 e5       	ldi	r26, 0x59	; 89
    2358:	b0 e0       	ldi	r27, 0x00	; 0
    235a:	e9 e5       	ldi	r30, 0x59	; 89
    235c:	f0 e0       	ldi	r31, 0x00	; 0
    235e:	80 81       	ld	r24, Z
    2360:	8e 7f       	andi	r24, 0xFE	; 254
    2362:	8c 93       	st	X, r24
}
    2364:	cf 91       	pop	r28
    2366:	df 91       	pop	r29
    2368:	08 95       	ret

0000236a <TIMER0_voidSetDutyCycle>:

void TIMER0_voidSetDutyCycle(u8 Copy_u8DutyCycle)
{
    236a:	df 93       	push	r29
    236c:	cf 93       	push	r28
    236e:	00 d0       	rcall	.+0      	; 0x2370 <TIMER0_voidSetDutyCycle+0x6>
    2370:	cd b7       	in	r28, 0x3d	; 61
    2372:	de b7       	in	r29, 0x3e	; 62
    2374:	8a 83       	std	Y+2, r24	; 0x02
	if(Copy_u8DutyCycle <= 100)
    2376:	8a 81       	ldd	r24, Y+2	; 0x02
    2378:	85 36       	cpi	r24, 0x65	; 101
    237a:	20 f5       	brcc	.+72     	; 0x23c4 <TIMER0_voidSetDutyCycle+0x5a>
	{
		u8 Local_u8TimeOn = ((u16)Copy_u8DutyCycle * (TIMER0_MAX_COUNT))/100 ;
    237c:	8a 81       	ldd	r24, Y+2	; 0x02
    237e:	48 2f       	mov	r20, r24
    2380:	50 e0       	ldi	r21, 0x00	; 0
    2382:	ca 01       	movw	r24, r20
    2384:	9c 01       	movw	r18, r24
    2386:	22 0f       	add	r18, r18
    2388:	33 1f       	adc	r19, r19
    238a:	c9 01       	movw	r24, r18
    238c:	96 95       	lsr	r25
    238e:	98 2f       	mov	r25, r24
    2390:	88 27       	eor	r24, r24
    2392:	97 95       	ror	r25
    2394:	87 95       	ror	r24
    2396:	82 1b       	sub	r24, r18
    2398:	93 0b       	sbc	r25, r19
    239a:	84 0f       	add	r24, r20
    239c:	95 1f       	adc	r25, r21
    239e:	24 e6       	ldi	r18, 0x64	; 100
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	b9 01       	movw	r22, r18
    23a4:	0e 94 8c 2a 	call	0x5518	; 0x5518 <__udivmodhi4>
    23a8:	cb 01       	movw	r24, r22
    23aa:	89 83       	std	Y+1, r24	; 0x01

		if(Local_u8TimeOn >1)
    23ac:	89 81       	ldd	r24, Y+1	; 0x01
    23ae:	82 30       	cpi	r24, 0x02	; 2
    23b0:	30 f0       	brcs	.+12     	; 0x23be <TIMER0_voidSetDutyCycle+0x54>
		{
			OCR0 = TIMER0_MAX_COUNT-Local_u8TimeOn;
    23b2:	ec e5       	ldi	r30, 0x5C	; 92
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	89 81       	ldd	r24, Y+1	; 0x01
    23b8:	80 95       	com	r24
    23ba:	80 83       	st	Z, r24
    23bc:	03 c0       	rjmp	.+6      	; 0x23c4 <TIMER0_voidSetDutyCycle+0x5a>
		}
		else
		{
			OCR0 = 0;
    23be:	ec e5       	ldi	r30, 0x5C	; 92
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	10 82       	st	Z, r1
	}
	else
	{
		/*return Error*/
	}
}
    23c4:	0f 90       	pop	r0
    23c6:	0f 90       	pop	r0
    23c8:	cf 91       	pop	r28
    23ca:	df 91       	pop	r29
    23cc:	08 95       	ret

000023ce <TIMER0_u8SetCallBack>:

u8 TIMER0_u8SetCallBack(void (*Copy_pvCallBackFunc)(void), u8 Copy_u8IntNumber)
{
    23ce:	df 93       	push	r29
    23d0:	cf 93       	push	r28
    23d2:	00 d0       	rcall	.+0      	; 0x23d4 <TIMER0_u8SetCallBack+0x6>
    23d4:	00 d0       	rcall	.+0      	; 0x23d6 <TIMER0_u8SetCallBack+0x8>
    23d6:	cd b7       	in	r28, 0x3d	; 61
    23d8:	de b7       	in	r29, 0x3e	; 62
    23da:	9b 83       	std	Y+3, r25	; 0x03
    23dc:	8a 83       	std	Y+2, r24	; 0x02
    23de:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorStatus=OK;
    23e0:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pvCallBackFunc!=NULL)
    23e2:	8a 81       	ldd	r24, Y+2	; 0x02
    23e4:	9b 81       	ldd	r25, Y+3	; 0x03
    23e6:	00 97       	sbiw	r24, 0x00	; 0
    23e8:	69 f0       	breq	.+26     	; 0x2404 <TIMER0_u8SetCallBack+0x36>
	{
		TIMER0_pvCallBackFunc[Copy_u8IntNumber]= Copy_pvCallBackFunc;
    23ea:	8c 81       	ldd	r24, Y+4	; 0x04
    23ec:	88 2f       	mov	r24, r24
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	88 0f       	add	r24, r24
    23f2:	99 1f       	adc	r25, r25
    23f4:	fc 01       	movw	r30, r24
    23f6:	e5 53       	subi	r30, 0x35	; 53
    23f8:	fe 4f       	sbci	r31, 0xFE	; 254
    23fa:	8a 81       	ldd	r24, Y+2	; 0x02
    23fc:	9b 81       	ldd	r25, Y+3	; 0x03
    23fe:	91 83       	std	Z+1, r25	; 0x01
    2400:	80 83       	st	Z, r24
    2402:	02 c0       	rjmp	.+4      	; 0x2408 <TIMER0_u8SetCallBack+0x3a>
	}
	else
	{
		Local_u8ErrorStatus=NULL_POINTER;
    2404:	82 e0       	ldi	r24, 0x02	; 2
    2406:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorStatus;
    2408:	89 81       	ldd	r24, Y+1	; 0x01

}
    240a:	0f 90       	pop	r0
    240c:	0f 90       	pop	r0
    240e:	0f 90       	pop	r0
    2410:	0f 90       	pop	r0
    2412:	cf 91       	pop	r28
    2414:	df 91       	pop	r29
    2416:	08 95       	ret

00002418 <__vector_10>:

void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
    2418:	1f 92       	push	r1
    241a:	0f 92       	push	r0
    241c:	0f b6       	in	r0, 0x3f	; 63
    241e:	0f 92       	push	r0
    2420:	11 24       	eor	r1, r1
    2422:	2f 93       	push	r18
    2424:	3f 93       	push	r19
    2426:	4f 93       	push	r20
    2428:	5f 93       	push	r21
    242a:	6f 93       	push	r22
    242c:	7f 93       	push	r23
    242e:	8f 93       	push	r24
    2430:	9f 93       	push	r25
    2432:	af 93       	push	r26
    2434:	bf 93       	push	r27
    2436:	ef 93       	push	r30
    2438:	ff 93       	push	r31
    243a:	df 93       	push	r29
    243c:	cf 93       	push	r28
    243e:	cd b7       	in	r28, 0x3d	; 61
    2440:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvCallBackFunc[TIMER0_COMP] != NULL)
    2442:	80 91 cd 01 	lds	r24, 0x01CD
    2446:	90 91 ce 01 	lds	r25, 0x01CE
    244a:	00 97       	sbiw	r24, 0x00	; 0
    244c:	29 f0       	breq	.+10     	; 0x2458 <__vector_10+0x40>
	{
		TIMER0_pvCallBackFunc[TIMER0_COMP]();
    244e:	e0 91 cd 01 	lds	r30, 0x01CD
    2452:	f0 91 ce 01 	lds	r31, 0x01CE
    2456:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    2458:	cf 91       	pop	r28
    245a:	df 91       	pop	r29
    245c:	ff 91       	pop	r31
    245e:	ef 91       	pop	r30
    2460:	bf 91       	pop	r27
    2462:	af 91       	pop	r26
    2464:	9f 91       	pop	r25
    2466:	8f 91       	pop	r24
    2468:	7f 91       	pop	r23
    246a:	6f 91       	pop	r22
    246c:	5f 91       	pop	r21
    246e:	4f 91       	pop	r20
    2470:	3f 91       	pop	r19
    2472:	2f 91       	pop	r18
    2474:	0f 90       	pop	r0
    2476:	0f be       	out	0x3f, r0	; 63
    2478:	0f 90       	pop	r0
    247a:	1f 90       	pop	r1
    247c:	18 95       	reti

0000247e <__vector_11>:

void __vector_11 (void) __attribute__((signal));
void __vector_11 (void)
{
    247e:	1f 92       	push	r1
    2480:	0f 92       	push	r0
    2482:	0f b6       	in	r0, 0x3f	; 63
    2484:	0f 92       	push	r0
    2486:	11 24       	eor	r1, r1
    2488:	2f 93       	push	r18
    248a:	3f 93       	push	r19
    248c:	4f 93       	push	r20
    248e:	5f 93       	push	r21
    2490:	6f 93       	push	r22
    2492:	7f 93       	push	r23
    2494:	8f 93       	push	r24
    2496:	9f 93       	push	r25
    2498:	af 93       	push	r26
    249a:	bf 93       	push	r27
    249c:	ef 93       	push	r30
    249e:	ff 93       	push	r31
    24a0:	df 93       	push	r29
    24a2:	cf 93       	push	r28
    24a4:	cd b7       	in	r28, 0x3d	; 61
    24a6:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvCallBackFunc[TIMER0_OVF] != NULL)
    24a8:	80 91 cb 01 	lds	r24, 0x01CB
    24ac:	90 91 cc 01 	lds	r25, 0x01CC
    24b0:	00 97       	sbiw	r24, 0x00	; 0
    24b2:	29 f0       	breq	.+10     	; 0x24be <__vector_11+0x40>
	{
		TIMER0_pvCallBackFunc[TIMER0_OVF]();
    24b4:	e0 91 cb 01 	lds	r30, 0x01CB
    24b8:	f0 91 cc 01 	lds	r31, 0x01CC
    24bc:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    24be:	cf 91       	pop	r28
    24c0:	df 91       	pop	r29
    24c2:	ff 91       	pop	r31
    24c4:	ef 91       	pop	r30
    24c6:	bf 91       	pop	r27
    24c8:	af 91       	pop	r26
    24ca:	9f 91       	pop	r25
    24cc:	8f 91       	pop	r24
    24ce:	7f 91       	pop	r23
    24d0:	6f 91       	pop	r22
    24d2:	5f 91       	pop	r21
    24d4:	4f 91       	pop	r20
    24d6:	3f 91       	pop	r19
    24d8:	2f 91       	pop	r18
    24da:	0f 90       	pop	r0
    24dc:	0f be       	out	0x3f, r0	; 63
    24de:	0f 90       	pop	r0
    24e0:	1f 90       	pop	r1
    24e2:	18 95       	reti

000024e4 <TIMER1_voidInit>:


static void(*TIMER1_pvCallBackFunc[4])(void)={NULL};

void  TIMER1_voidInit(u8 Copy_u8Mode,u8 Copy_u8Prescaler)
{
    24e4:	df 93       	push	r29
    24e6:	cf 93       	push	r28
    24e8:	00 d0       	rcall	.+0      	; 0x24ea <TIMER1_voidInit+0x6>
    24ea:	00 d0       	rcall	.+0      	; 0x24ec <TIMER1_voidInit+0x8>
    24ec:	cd b7       	in	r28, 0x3d	; 61
    24ee:	de b7       	in	r29, 0x3e	; 62
    24f0:	89 83       	std	Y+1, r24	; 0x01
    24f2:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Mode)
    24f4:	89 81       	ldd	r24, Y+1	; 0x01
    24f6:	28 2f       	mov	r18, r24
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	3c 83       	std	Y+4, r19	; 0x04
    24fc:	2b 83       	std	Y+3, r18	; 0x03
    24fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2500:	9c 81       	ldd	r25, Y+4	; 0x04
    2502:	87 30       	cpi	r24, 0x07	; 7
    2504:	91 05       	cpc	r25, r1
    2506:	09 f4       	brne	.+2      	; 0x250a <TIMER1_voidInit+0x26>
    2508:	24 c1       	rjmp	.+584    	; 0x2752 <TIMER1_voidInit+0x26e>
    250a:	2b 81       	ldd	r18, Y+3	; 0x03
    250c:	3c 81       	ldd	r19, Y+4	; 0x04
    250e:	28 30       	cpi	r18, 0x08	; 8
    2510:	31 05       	cpc	r19, r1
    2512:	4c f5       	brge	.+82     	; 0x2566 <TIMER1_voidInit+0x82>
    2514:	8b 81       	ldd	r24, Y+3	; 0x03
    2516:	9c 81       	ldd	r25, Y+4	; 0x04
    2518:	83 30       	cpi	r24, 0x03	; 3
    251a:	91 05       	cpc	r25, r1
    251c:	09 f4       	brne	.+2      	; 0x2520 <TIMER1_voidInit+0x3c>
    251e:	a5 c0       	rjmp	.+330    	; 0x266a <TIMER1_voidInit+0x186>
    2520:	2b 81       	ldd	r18, Y+3	; 0x03
    2522:	3c 81       	ldd	r19, Y+4	; 0x04
    2524:	24 30       	cpi	r18, 0x04	; 4
    2526:	31 05       	cpc	r19, r1
    2528:	8c f4       	brge	.+34     	; 0x254c <TIMER1_voidInit+0x68>
    252a:	8b 81       	ldd	r24, Y+3	; 0x03
    252c:	9c 81       	ldd	r25, Y+4	; 0x04
    252e:	81 30       	cpi	r24, 0x01	; 1
    2530:	91 05       	cpc	r25, r1
    2532:	09 f4       	brne	.+2      	; 0x2536 <TIMER1_voidInit+0x52>
    2534:	60 c0       	rjmp	.+192    	; 0x25f6 <TIMER1_voidInit+0x112>
    2536:	2b 81       	ldd	r18, Y+3	; 0x03
    2538:	3c 81       	ldd	r19, Y+4	; 0x04
    253a:	22 30       	cpi	r18, 0x02	; 2
    253c:	31 05       	cpc	r19, r1
    253e:	0c f0       	brlt	.+2      	; 0x2542 <TIMER1_voidInit+0x5e>
    2540:	77 c0       	rjmp	.+238    	; 0x2630 <TIMER1_voidInit+0x14c>
    2542:	8b 81       	ldd	r24, Y+3	; 0x03
    2544:	9c 81       	ldd	r25, Y+4	; 0x04
    2546:	00 97       	sbiw	r24, 0x00	; 0
    2548:	c9 f1       	breq	.+114    	; 0x25bc <TIMER1_voidInit+0xd8>
    254a:	ea c1       	rjmp	.+980    	; 0x2920 <TIMER1_voidInit+0x43c>
    254c:	2b 81       	ldd	r18, Y+3	; 0x03
    254e:	3c 81       	ldd	r19, Y+4	; 0x04
    2550:	25 30       	cpi	r18, 0x05	; 5
    2552:	31 05       	cpc	r19, r1
    2554:	09 f4       	brne	.+2      	; 0x2558 <TIMER1_voidInit+0x74>
    2556:	c3 c0       	rjmp	.+390    	; 0x26de <TIMER1_voidInit+0x1fa>
    2558:	8b 81       	ldd	r24, Y+3	; 0x03
    255a:	9c 81       	ldd	r25, Y+4	; 0x04
    255c:	86 30       	cpi	r24, 0x06	; 6
    255e:	91 05       	cpc	r25, r1
    2560:	0c f0       	brlt	.+2      	; 0x2564 <TIMER1_voidInit+0x80>
    2562:	da c0       	rjmp	.+436    	; 0x2718 <TIMER1_voidInit+0x234>
    2564:	9f c0       	rjmp	.+318    	; 0x26a4 <TIMER1_voidInit+0x1c0>
    2566:	2b 81       	ldd	r18, Y+3	; 0x03
    2568:	3c 81       	ldd	r19, Y+4	; 0x04
    256a:	2b 30       	cpi	r18, 0x0B	; 11
    256c:	31 05       	cpc	r19, r1
    256e:	09 f4       	brne	.+2      	; 0x2572 <TIMER1_voidInit+0x8e>
    2570:	64 c1       	rjmp	.+712    	; 0x283a <TIMER1_voidInit+0x356>
    2572:	8b 81       	ldd	r24, Y+3	; 0x03
    2574:	9c 81       	ldd	r25, Y+4	; 0x04
    2576:	8c 30       	cpi	r24, 0x0C	; 12
    2578:	91 05       	cpc	r25, r1
    257a:	6c f4       	brge	.+26     	; 0x2596 <TIMER1_voidInit+0xb2>
    257c:	2b 81       	ldd	r18, Y+3	; 0x03
    257e:	3c 81       	ldd	r19, Y+4	; 0x04
    2580:	29 30       	cpi	r18, 0x09	; 9
    2582:	31 05       	cpc	r19, r1
    2584:	09 f4       	brne	.+2      	; 0x2588 <TIMER1_voidInit+0xa4>
    2586:	1f c1       	rjmp	.+574    	; 0x27c6 <TIMER1_voidInit+0x2e2>
    2588:	8b 81       	ldd	r24, Y+3	; 0x03
    258a:	9c 81       	ldd	r25, Y+4	; 0x04
    258c:	8a 30       	cpi	r24, 0x0A	; 10
    258e:	91 05       	cpc	r25, r1
    2590:	0c f0       	brlt	.+2      	; 0x2594 <TIMER1_voidInit+0xb0>
    2592:	36 c1       	rjmp	.+620    	; 0x2800 <TIMER1_voidInit+0x31c>
    2594:	fb c0       	rjmp	.+502    	; 0x278c <TIMER1_voidInit+0x2a8>
    2596:	2b 81       	ldd	r18, Y+3	; 0x03
    2598:	3c 81       	ldd	r19, Y+4	; 0x04
    259a:	2e 30       	cpi	r18, 0x0E	; 14
    259c:	31 05       	cpc	r19, r1
    259e:	09 f4       	brne	.+2      	; 0x25a2 <TIMER1_voidInit+0xbe>
    25a0:	86 c1       	rjmp	.+780    	; 0x28ae <TIMER1_voidInit+0x3ca>
    25a2:	8b 81       	ldd	r24, Y+3	; 0x03
    25a4:	9c 81       	ldd	r25, Y+4	; 0x04
    25a6:	8f 30       	cpi	r24, 0x0F	; 15
    25a8:	91 05       	cpc	r25, r1
    25aa:	09 f4       	brne	.+2      	; 0x25ae <TIMER1_voidInit+0xca>
    25ac:	9d c1       	rjmp	.+826    	; 0x28e8 <TIMER1_voidInit+0x404>
    25ae:	2b 81       	ldd	r18, Y+3	; 0x03
    25b0:	3c 81       	ldd	r19, Y+4	; 0x04
    25b2:	2c 30       	cpi	r18, 0x0C	; 12
    25b4:	31 05       	cpc	r19, r1
    25b6:	09 f4       	brne	.+2      	; 0x25ba <TIMER1_voidInit+0xd6>
    25b8:	5d c1       	rjmp	.+698    	; 0x2874 <TIMER1_voidInit+0x390>
    25ba:	b2 c1       	rjmp	.+868    	; 0x2920 <TIMER1_voidInit+0x43c>
	{
	case TIMER1_NORMAL_MODE:
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    25bc:	af e4       	ldi	r26, 0x4F	; 79
    25be:	b0 e0       	ldi	r27, 0x00	; 0
    25c0:	ef e4       	ldi	r30, 0x4F	; 79
    25c2:	f0 e0       	ldi	r31, 0x00	; 0
    25c4:	80 81       	ld	r24, Z
    25c6:	8e 7f       	andi	r24, 0xFE	; 254
    25c8:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    25ca:	af e4       	ldi	r26, 0x4F	; 79
    25cc:	b0 e0       	ldi	r27, 0x00	; 0
    25ce:	ef e4       	ldi	r30, 0x4F	; 79
    25d0:	f0 e0       	ldi	r31, 0x00	; 0
    25d2:	80 81       	ld	r24, Z
    25d4:	8d 7f       	andi	r24, 0xFD	; 253
    25d6:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    25d8:	ae e4       	ldi	r26, 0x4E	; 78
    25da:	b0 e0       	ldi	r27, 0x00	; 0
    25dc:	ee e4       	ldi	r30, 0x4E	; 78
    25de:	f0 e0       	ldi	r31, 0x00	; 0
    25e0:	80 81       	ld	r24, Z
    25e2:	87 7f       	andi	r24, 0xF7	; 247
    25e4:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    25e6:	ae e4       	ldi	r26, 0x4E	; 78
    25e8:	b0 e0       	ldi	r27, 0x00	; 0
    25ea:	ee e4       	ldi	r30, 0x4E	; 78
    25ec:	f0 e0       	ldi	r31, 0x00	; 0
    25ee:	80 81       	ld	r24, Z
    25f0:	8f 7e       	andi	r24, 0xEF	; 239
    25f2:	8c 93       	st	X, r24
    25f4:	95 c1       	rjmp	.+810    	; 0x2920 <TIMER1_voidInit+0x43c>
		break;
	case TIMER1_PHASE_CORRECT_PWM_8_BIT_MODE:
		SET_BIT(TCCR1A,TCCR1A_WGM10);
    25f6:	af e4       	ldi	r26, 0x4F	; 79
    25f8:	b0 e0       	ldi	r27, 0x00	; 0
    25fa:	ef e4       	ldi	r30, 0x4F	; 79
    25fc:	f0 e0       	ldi	r31, 0x00	; 0
    25fe:	80 81       	ld	r24, Z
    2600:	81 60       	ori	r24, 0x01	; 1
    2602:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    2604:	af e4       	ldi	r26, 0x4F	; 79
    2606:	b0 e0       	ldi	r27, 0x00	; 0
    2608:	ef e4       	ldi	r30, 0x4F	; 79
    260a:	f0 e0       	ldi	r31, 0x00	; 0
    260c:	80 81       	ld	r24, Z
    260e:	8d 7f       	andi	r24, 0xFD	; 253
    2610:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    2612:	ae e4       	ldi	r26, 0x4E	; 78
    2614:	b0 e0       	ldi	r27, 0x00	; 0
    2616:	ee e4       	ldi	r30, 0x4E	; 78
    2618:	f0 e0       	ldi	r31, 0x00	; 0
    261a:	80 81       	ld	r24, Z
    261c:	87 7f       	andi	r24, 0xF7	; 247
    261e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    2620:	ae e4       	ldi	r26, 0x4E	; 78
    2622:	b0 e0       	ldi	r27, 0x00	; 0
    2624:	ee e4       	ldi	r30, 0x4E	; 78
    2626:	f0 e0       	ldi	r31, 0x00	; 0
    2628:	80 81       	ld	r24, Z
    262a:	8f 7e       	andi	r24, 0xEF	; 239
    262c:	8c 93       	st	X, r24
    262e:	78 c1       	rjmp	.+752    	; 0x2920 <TIMER1_voidInit+0x43c>
		break;
	case TIMER1_PHASE_CORRECT_PWM_9_BIT_MODE:
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    2630:	af e4       	ldi	r26, 0x4F	; 79
    2632:	b0 e0       	ldi	r27, 0x00	; 0
    2634:	ef e4       	ldi	r30, 0x4F	; 79
    2636:	f0 e0       	ldi	r31, 0x00	; 0
    2638:	80 81       	ld	r24, Z
    263a:	8e 7f       	andi	r24, 0xFE	; 254
    263c:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    263e:	af e4       	ldi	r26, 0x4F	; 79
    2640:	b0 e0       	ldi	r27, 0x00	; 0
    2642:	ef e4       	ldi	r30, 0x4F	; 79
    2644:	f0 e0       	ldi	r31, 0x00	; 0
    2646:	80 81       	ld	r24, Z
    2648:	82 60       	ori	r24, 0x02	; 2
    264a:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    264c:	ae e4       	ldi	r26, 0x4E	; 78
    264e:	b0 e0       	ldi	r27, 0x00	; 0
    2650:	ee e4       	ldi	r30, 0x4E	; 78
    2652:	f0 e0       	ldi	r31, 0x00	; 0
    2654:	80 81       	ld	r24, Z
    2656:	87 7f       	andi	r24, 0xF7	; 247
    2658:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    265a:	ae e4       	ldi	r26, 0x4E	; 78
    265c:	b0 e0       	ldi	r27, 0x00	; 0
    265e:	ee e4       	ldi	r30, 0x4E	; 78
    2660:	f0 e0       	ldi	r31, 0x00	; 0
    2662:	80 81       	ld	r24, Z
    2664:	8f 7e       	andi	r24, 0xEF	; 239
    2666:	8c 93       	st	X, r24
    2668:	5b c1       	rjmp	.+694    	; 0x2920 <TIMER1_voidInit+0x43c>
		break;
	case TIMER1_PHASE_CORRECT_PWM_10_BIT_MODE:
		SET_BIT(TCCR1A,TCCR1A_WGM10);
    266a:	af e4       	ldi	r26, 0x4F	; 79
    266c:	b0 e0       	ldi	r27, 0x00	; 0
    266e:	ef e4       	ldi	r30, 0x4F	; 79
    2670:	f0 e0       	ldi	r31, 0x00	; 0
    2672:	80 81       	ld	r24, Z
    2674:	81 60       	ori	r24, 0x01	; 1
    2676:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    2678:	af e4       	ldi	r26, 0x4F	; 79
    267a:	b0 e0       	ldi	r27, 0x00	; 0
    267c:	ef e4       	ldi	r30, 0x4F	; 79
    267e:	f0 e0       	ldi	r31, 0x00	; 0
    2680:	80 81       	ld	r24, Z
    2682:	82 60       	ori	r24, 0x02	; 2
    2684:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    2686:	ae e4       	ldi	r26, 0x4E	; 78
    2688:	b0 e0       	ldi	r27, 0x00	; 0
    268a:	ee e4       	ldi	r30, 0x4E	; 78
    268c:	f0 e0       	ldi	r31, 0x00	; 0
    268e:	80 81       	ld	r24, Z
    2690:	87 7f       	andi	r24, 0xF7	; 247
    2692:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    2694:	ae e4       	ldi	r26, 0x4E	; 78
    2696:	b0 e0       	ldi	r27, 0x00	; 0
    2698:	ee e4       	ldi	r30, 0x4E	; 78
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	80 81       	ld	r24, Z
    269e:	8f 7e       	andi	r24, 0xEF	; 239
    26a0:	8c 93       	st	X, r24
    26a2:	3e c1       	rjmp	.+636    	; 0x2920 <TIMER1_voidInit+0x43c>
		break;
	case TIMER1_CTC_OCR1A_MODE:
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    26a4:	af e4       	ldi	r26, 0x4F	; 79
    26a6:	b0 e0       	ldi	r27, 0x00	; 0
    26a8:	ef e4       	ldi	r30, 0x4F	; 79
    26aa:	f0 e0       	ldi	r31, 0x00	; 0
    26ac:	80 81       	ld	r24, Z
    26ae:	8e 7f       	andi	r24, 0xFE	; 254
    26b0:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    26b2:	af e4       	ldi	r26, 0x4F	; 79
    26b4:	b0 e0       	ldi	r27, 0x00	; 0
    26b6:	ef e4       	ldi	r30, 0x4F	; 79
    26b8:	f0 e0       	ldi	r31, 0x00	; 0
    26ba:	80 81       	ld	r24, Z
    26bc:	8d 7f       	andi	r24, 0xFD	; 253
    26be:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    26c0:	ae e4       	ldi	r26, 0x4E	; 78
    26c2:	b0 e0       	ldi	r27, 0x00	; 0
    26c4:	ee e4       	ldi	r30, 0x4E	; 78
    26c6:	f0 e0       	ldi	r31, 0x00	; 0
    26c8:	80 81       	ld	r24, Z
    26ca:	88 60       	ori	r24, 0x08	; 8
    26cc:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    26ce:	ae e4       	ldi	r26, 0x4E	; 78
    26d0:	b0 e0       	ldi	r27, 0x00	; 0
    26d2:	ee e4       	ldi	r30, 0x4E	; 78
    26d4:	f0 e0       	ldi	r31, 0x00	; 0
    26d6:	80 81       	ld	r24, Z
    26d8:	8f 7e       	andi	r24, 0xEF	; 239
    26da:	8c 93       	st	X, r24
    26dc:	21 c1       	rjmp	.+578    	; 0x2920 <TIMER1_voidInit+0x43c>
		break;
	case TIMER1_FAST_PWM_8_BIT_MODE:
		SET_BIT(TCCR1A,TCCR1A_WGM10);
    26de:	af e4       	ldi	r26, 0x4F	; 79
    26e0:	b0 e0       	ldi	r27, 0x00	; 0
    26e2:	ef e4       	ldi	r30, 0x4F	; 79
    26e4:	f0 e0       	ldi	r31, 0x00	; 0
    26e6:	80 81       	ld	r24, Z
    26e8:	81 60       	ori	r24, 0x01	; 1
    26ea:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    26ec:	af e4       	ldi	r26, 0x4F	; 79
    26ee:	b0 e0       	ldi	r27, 0x00	; 0
    26f0:	ef e4       	ldi	r30, 0x4F	; 79
    26f2:	f0 e0       	ldi	r31, 0x00	; 0
    26f4:	80 81       	ld	r24, Z
    26f6:	8d 7f       	andi	r24, 0xFD	; 253
    26f8:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    26fa:	ae e4       	ldi	r26, 0x4E	; 78
    26fc:	b0 e0       	ldi	r27, 0x00	; 0
    26fe:	ee e4       	ldi	r30, 0x4E	; 78
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	80 81       	ld	r24, Z
    2704:	88 60       	ori	r24, 0x08	; 8
    2706:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    2708:	ae e4       	ldi	r26, 0x4E	; 78
    270a:	b0 e0       	ldi	r27, 0x00	; 0
    270c:	ee e4       	ldi	r30, 0x4E	; 78
    270e:	f0 e0       	ldi	r31, 0x00	; 0
    2710:	80 81       	ld	r24, Z
    2712:	8f 7e       	andi	r24, 0xEF	; 239
    2714:	8c 93       	st	X, r24
    2716:	04 c1       	rjmp	.+520    	; 0x2920 <TIMER1_voidInit+0x43c>
		break;
	case TIMER1_FAST_PWM_9_BIT_MODE:
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    2718:	af e4       	ldi	r26, 0x4F	; 79
    271a:	b0 e0       	ldi	r27, 0x00	; 0
    271c:	ef e4       	ldi	r30, 0x4F	; 79
    271e:	f0 e0       	ldi	r31, 0x00	; 0
    2720:	80 81       	ld	r24, Z
    2722:	8e 7f       	andi	r24, 0xFE	; 254
    2724:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    2726:	af e4       	ldi	r26, 0x4F	; 79
    2728:	b0 e0       	ldi	r27, 0x00	; 0
    272a:	ef e4       	ldi	r30, 0x4F	; 79
    272c:	f0 e0       	ldi	r31, 0x00	; 0
    272e:	80 81       	ld	r24, Z
    2730:	82 60       	ori	r24, 0x02	; 2
    2732:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    2734:	ae e4       	ldi	r26, 0x4E	; 78
    2736:	b0 e0       	ldi	r27, 0x00	; 0
    2738:	ee e4       	ldi	r30, 0x4E	; 78
    273a:	f0 e0       	ldi	r31, 0x00	; 0
    273c:	80 81       	ld	r24, Z
    273e:	88 60       	ori	r24, 0x08	; 8
    2740:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    2742:	ae e4       	ldi	r26, 0x4E	; 78
    2744:	b0 e0       	ldi	r27, 0x00	; 0
    2746:	ee e4       	ldi	r30, 0x4E	; 78
    2748:	f0 e0       	ldi	r31, 0x00	; 0
    274a:	80 81       	ld	r24, Z
    274c:	8f 7e       	andi	r24, 0xEF	; 239
    274e:	8c 93       	st	X, r24
    2750:	e7 c0       	rjmp	.+462    	; 0x2920 <TIMER1_voidInit+0x43c>
		break;
	case TIMER1_FAST_PWM_10_BIT_MODE:
		SET_BIT(TCCR1A,TCCR1A_WGM10);
    2752:	af e4       	ldi	r26, 0x4F	; 79
    2754:	b0 e0       	ldi	r27, 0x00	; 0
    2756:	ef e4       	ldi	r30, 0x4F	; 79
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	80 81       	ld	r24, Z
    275c:	81 60       	ori	r24, 0x01	; 1
    275e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    2760:	af e4       	ldi	r26, 0x4F	; 79
    2762:	b0 e0       	ldi	r27, 0x00	; 0
    2764:	ef e4       	ldi	r30, 0x4F	; 79
    2766:	f0 e0       	ldi	r31, 0x00	; 0
    2768:	80 81       	ld	r24, Z
    276a:	82 60       	ori	r24, 0x02	; 2
    276c:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    276e:	ae e4       	ldi	r26, 0x4E	; 78
    2770:	b0 e0       	ldi	r27, 0x00	; 0
    2772:	ee e4       	ldi	r30, 0x4E	; 78
    2774:	f0 e0       	ldi	r31, 0x00	; 0
    2776:	80 81       	ld	r24, Z
    2778:	88 60       	ori	r24, 0x08	; 8
    277a:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    277c:	ae e4       	ldi	r26, 0x4E	; 78
    277e:	b0 e0       	ldi	r27, 0x00	; 0
    2780:	ee e4       	ldi	r30, 0x4E	; 78
    2782:	f0 e0       	ldi	r31, 0x00	; 0
    2784:	80 81       	ld	r24, Z
    2786:	8f 7e       	andi	r24, 0xEF	; 239
    2788:	8c 93       	st	X, r24
    278a:	ca c0       	rjmp	.+404    	; 0x2920 <TIMER1_voidInit+0x43c>
		break;
	case TIMER1_PWM_PHASE_FREQ_CORRECT_ICR1_MODE:
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    278c:	af e4       	ldi	r26, 0x4F	; 79
    278e:	b0 e0       	ldi	r27, 0x00	; 0
    2790:	ef e4       	ldi	r30, 0x4F	; 79
    2792:	f0 e0       	ldi	r31, 0x00	; 0
    2794:	80 81       	ld	r24, Z
    2796:	8e 7f       	andi	r24, 0xFE	; 254
    2798:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    279a:	af e4       	ldi	r26, 0x4F	; 79
    279c:	b0 e0       	ldi	r27, 0x00	; 0
    279e:	ef e4       	ldi	r30, 0x4F	; 79
    27a0:	f0 e0       	ldi	r31, 0x00	; 0
    27a2:	80 81       	ld	r24, Z
    27a4:	8d 7f       	andi	r24, 0xFD	; 253
    27a6:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    27a8:	ae e4       	ldi	r26, 0x4E	; 78
    27aa:	b0 e0       	ldi	r27, 0x00	; 0
    27ac:	ee e4       	ldi	r30, 0x4E	; 78
    27ae:	f0 e0       	ldi	r31, 0x00	; 0
    27b0:	80 81       	ld	r24, Z
    27b2:	87 7f       	andi	r24, 0xF7	; 247
    27b4:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    27b6:	ae e4       	ldi	r26, 0x4E	; 78
    27b8:	b0 e0       	ldi	r27, 0x00	; 0
    27ba:	ee e4       	ldi	r30, 0x4E	; 78
    27bc:	f0 e0       	ldi	r31, 0x00	; 0
    27be:	80 81       	ld	r24, Z
    27c0:	80 61       	ori	r24, 0x10	; 16
    27c2:	8c 93       	st	X, r24
    27c4:	ad c0       	rjmp	.+346    	; 0x2920 <TIMER1_voidInit+0x43c>
		break;
	case TIMER1_PWM_PHASE_FREQ_CORRECT_OCR1A_NODE:
		SET_BIT(TCCR1A,TCCR1A_WGM10);
    27c6:	af e4       	ldi	r26, 0x4F	; 79
    27c8:	b0 e0       	ldi	r27, 0x00	; 0
    27ca:	ef e4       	ldi	r30, 0x4F	; 79
    27cc:	f0 e0       	ldi	r31, 0x00	; 0
    27ce:	80 81       	ld	r24, Z
    27d0:	81 60       	ori	r24, 0x01	; 1
    27d2:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    27d4:	af e4       	ldi	r26, 0x4F	; 79
    27d6:	b0 e0       	ldi	r27, 0x00	; 0
    27d8:	ef e4       	ldi	r30, 0x4F	; 79
    27da:	f0 e0       	ldi	r31, 0x00	; 0
    27dc:	80 81       	ld	r24, Z
    27de:	8d 7f       	andi	r24, 0xFD	; 253
    27e0:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    27e2:	ae e4       	ldi	r26, 0x4E	; 78
    27e4:	b0 e0       	ldi	r27, 0x00	; 0
    27e6:	ee e4       	ldi	r30, 0x4E	; 78
    27e8:	f0 e0       	ldi	r31, 0x00	; 0
    27ea:	80 81       	ld	r24, Z
    27ec:	87 7f       	andi	r24, 0xF7	; 247
    27ee:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    27f0:	ae e4       	ldi	r26, 0x4E	; 78
    27f2:	b0 e0       	ldi	r27, 0x00	; 0
    27f4:	ee e4       	ldi	r30, 0x4E	; 78
    27f6:	f0 e0       	ldi	r31, 0x00	; 0
    27f8:	80 81       	ld	r24, Z
    27fa:	80 61       	ori	r24, 0x10	; 16
    27fc:	8c 93       	st	X, r24
    27fe:	90 c0       	rjmp	.+288    	; 0x2920 <TIMER1_voidInit+0x43c>
		break;
	case TIMER1_PHASE_CORRECT_PWM_ICR1_MODE:
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    2800:	af e4       	ldi	r26, 0x4F	; 79
    2802:	b0 e0       	ldi	r27, 0x00	; 0
    2804:	ef e4       	ldi	r30, 0x4F	; 79
    2806:	f0 e0       	ldi	r31, 0x00	; 0
    2808:	80 81       	ld	r24, Z
    280a:	8e 7f       	andi	r24, 0xFE	; 254
    280c:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    280e:	af e4       	ldi	r26, 0x4F	; 79
    2810:	b0 e0       	ldi	r27, 0x00	; 0
    2812:	ef e4       	ldi	r30, 0x4F	; 79
    2814:	f0 e0       	ldi	r31, 0x00	; 0
    2816:	80 81       	ld	r24, Z
    2818:	82 60       	ori	r24, 0x02	; 2
    281a:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    281c:	ae e4       	ldi	r26, 0x4E	; 78
    281e:	b0 e0       	ldi	r27, 0x00	; 0
    2820:	ee e4       	ldi	r30, 0x4E	; 78
    2822:	f0 e0       	ldi	r31, 0x00	; 0
    2824:	80 81       	ld	r24, Z
    2826:	87 7f       	andi	r24, 0xF7	; 247
    2828:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    282a:	ae e4       	ldi	r26, 0x4E	; 78
    282c:	b0 e0       	ldi	r27, 0x00	; 0
    282e:	ee e4       	ldi	r30, 0x4E	; 78
    2830:	f0 e0       	ldi	r31, 0x00	; 0
    2832:	80 81       	ld	r24, Z
    2834:	80 61       	ori	r24, 0x10	; 16
    2836:	8c 93       	st	X, r24
    2838:	73 c0       	rjmp	.+230    	; 0x2920 <TIMER1_voidInit+0x43c>
		break;
	case TIMER1_PHASE_CORRECT_PWM_OCR1A_MODE:
		SET_BIT(TCCR1A,TCCR1A_WGM10);
    283a:	af e4       	ldi	r26, 0x4F	; 79
    283c:	b0 e0       	ldi	r27, 0x00	; 0
    283e:	ef e4       	ldi	r30, 0x4F	; 79
    2840:	f0 e0       	ldi	r31, 0x00	; 0
    2842:	80 81       	ld	r24, Z
    2844:	81 60       	ori	r24, 0x01	; 1
    2846:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    2848:	af e4       	ldi	r26, 0x4F	; 79
    284a:	b0 e0       	ldi	r27, 0x00	; 0
    284c:	ef e4       	ldi	r30, 0x4F	; 79
    284e:	f0 e0       	ldi	r31, 0x00	; 0
    2850:	80 81       	ld	r24, Z
    2852:	82 60       	ori	r24, 0x02	; 2
    2854:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    2856:	ae e4       	ldi	r26, 0x4E	; 78
    2858:	b0 e0       	ldi	r27, 0x00	; 0
    285a:	ee e4       	ldi	r30, 0x4E	; 78
    285c:	f0 e0       	ldi	r31, 0x00	; 0
    285e:	80 81       	ld	r24, Z
    2860:	87 7f       	andi	r24, 0xF7	; 247
    2862:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    2864:	ae e4       	ldi	r26, 0x4E	; 78
    2866:	b0 e0       	ldi	r27, 0x00	; 0
    2868:	ee e4       	ldi	r30, 0x4E	; 78
    286a:	f0 e0       	ldi	r31, 0x00	; 0
    286c:	80 81       	ld	r24, Z
    286e:	80 61       	ori	r24, 0x10	; 16
    2870:	8c 93       	st	X, r24
    2872:	56 c0       	rjmp	.+172    	; 0x2920 <TIMER1_voidInit+0x43c>
		break;
	case TIMER1_CTC_ICR1_MODE:
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    2874:	af e4       	ldi	r26, 0x4F	; 79
    2876:	b0 e0       	ldi	r27, 0x00	; 0
    2878:	ef e4       	ldi	r30, 0x4F	; 79
    287a:	f0 e0       	ldi	r31, 0x00	; 0
    287c:	80 81       	ld	r24, Z
    287e:	8e 7f       	andi	r24, 0xFE	; 254
    2880:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    2882:	af e4       	ldi	r26, 0x4F	; 79
    2884:	b0 e0       	ldi	r27, 0x00	; 0
    2886:	ef e4       	ldi	r30, 0x4F	; 79
    2888:	f0 e0       	ldi	r31, 0x00	; 0
    288a:	80 81       	ld	r24, Z
    288c:	8d 7f       	andi	r24, 0xFD	; 253
    288e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    2890:	ae e4       	ldi	r26, 0x4E	; 78
    2892:	b0 e0       	ldi	r27, 0x00	; 0
    2894:	ee e4       	ldi	r30, 0x4E	; 78
    2896:	f0 e0       	ldi	r31, 0x00	; 0
    2898:	80 81       	ld	r24, Z
    289a:	88 60       	ori	r24, 0x08	; 8
    289c:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    289e:	ae e4       	ldi	r26, 0x4E	; 78
    28a0:	b0 e0       	ldi	r27, 0x00	; 0
    28a2:	ee e4       	ldi	r30, 0x4E	; 78
    28a4:	f0 e0       	ldi	r31, 0x00	; 0
    28a6:	80 81       	ld	r24, Z
    28a8:	80 61       	ori	r24, 0x10	; 16
    28aa:	8c 93       	st	X, r24
    28ac:	39 c0       	rjmp	.+114    	; 0x2920 <TIMER1_voidInit+0x43c>
		break;
	case TIMER1_FAST_PWM_ICR1_MODE:
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    28ae:	af e4       	ldi	r26, 0x4F	; 79
    28b0:	b0 e0       	ldi	r27, 0x00	; 0
    28b2:	ef e4       	ldi	r30, 0x4F	; 79
    28b4:	f0 e0       	ldi	r31, 0x00	; 0
    28b6:	80 81       	ld	r24, Z
    28b8:	8e 7f       	andi	r24, 0xFE	; 254
    28ba:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    28bc:	af e4       	ldi	r26, 0x4F	; 79
    28be:	b0 e0       	ldi	r27, 0x00	; 0
    28c0:	ef e4       	ldi	r30, 0x4F	; 79
    28c2:	f0 e0       	ldi	r31, 0x00	; 0
    28c4:	80 81       	ld	r24, Z
    28c6:	82 60       	ori	r24, 0x02	; 2
    28c8:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    28ca:	ae e4       	ldi	r26, 0x4E	; 78
    28cc:	b0 e0       	ldi	r27, 0x00	; 0
    28ce:	ee e4       	ldi	r30, 0x4E	; 78
    28d0:	f0 e0       	ldi	r31, 0x00	; 0
    28d2:	80 81       	ld	r24, Z
    28d4:	88 60       	ori	r24, 0x08	; 8
    28d6:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    28d8:	ae e4       	ldi	r26, 0x4E	; 78
    28da:	b0 e0       	ldi	r27, 0x00	; 0
    28dc:	ee e4       	ldi	r30, 0x4E	; 78
    28de:	f0 e0       	ldi	r31, 0x00	; 0
    28e0:	80 81       	ld	r24, Z
    28e2:	80 61       	ori	r24, 0x10	; 16
    28e4:	8c 93       	st	X, r24
    28e6:	1c c0       	rjmp	.+56     	; 0x2920 <TIMER1_voidInit+0x43c>
		break;
	case TIMER1_FAST_PWM_OCR1A_MODE:
		SET_BIT(TCCR1A,TCCR1A_WGM10);
    28e8:	af e4       	ldi	r26, 0x4F	; 79
    28ea:	b0 e0       	ldi	r27, 0x00	; 0
    28ec:	ef e4       	ldi	r30, 0x4F	; 79
    28ee:	f0 e0       	ldi	r31, 0x00	; 0
    28f0:	80 81       	ld	r24, Z
    28f2:	81 60       	ori	r24, 0x01	; 1
    28f4:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    28f6:	af e4       	ldi	r26, 0x4F	; 79
    28f8:	b0 e0       	ldi	r27, 0x00	; 0
    28fa:	ef e4       	ldi	r30, 0x4F	; 79
    28fc:	f0 e0       	ldi	r31, 0x00	; 0
    28fe:	80 81       	ld	r24, Z
    2900:	82 60       	ori	r24, 0x02	; 2
    2902:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    2904:	ae e4       	ldi	r26, 0x4E	; 78
    2906:	b0 e0       	ldi	r27, 0x00	; 0
    2908:	ee e4       	ldi	r30, 0x4E	; 78
    290a:	f0 e0       	ldi	r31, 0x00	; 0
    290c:	80 81       	ld	r24, Z
    290e:	88 60       	ori	r24, 0x08	; 8
    2910:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    2912:	ae e4       	ldi	r26, 0x4E	; 78
    2914:	b0 e0       	ldi	r27, 0x00	; 0
    2916:	ee e4       	ldi	r30, 0x4E	; 78
    2918:	f0 e0       	ldi	r31, 0x00	; 0
    291a:	80 81       	ld	r24, Z
    291c:	80 61       	ori	r24, 0x10	; 16
    291e:	8c 93       	st	X, r24
		break;
	default:	 break;
	}

	/*Set Prescaler division factor*/
	TCCR1B &=PRESCALER_MASK;
    2920:	ae e4       	ldi	r26, 0x4E	; 78
    2922:	b0 e0       	ldi	r27, 0x00	; 0
    2924:	ee e4       	ldi	r30, 0x4E	; 78
    2926:	f0 e0       	ldi	r31, 0x00	; 0
    2928:	80 81       	ld	r24, Z
    292a:	88 7f       	andi	r24, 0xF8	; 248
    292c:	8c 93       	st	X, r24
	TCCR1B |=Copy_u8Prescaler;
    292e:	ae e4       	ldi	r26, 0x4E	; 78
    2930:	b0 e0       	ldi	r27, 0x00	; 0
    2932:	ee e4       	ldi	r30, 0x4E	; 78
    2934:	f0 e0       	ldi	r31, 0x00	; 0
    2936:	90 81       	ld	r25, Z
    2938:	8a 81       	ldd	r24, Y+2	; 0x02
    293a:	89 2b       	or	r24, r25
    293c:	8c 93       	st	X, r24
}
    293e:	0f 90       	pop	r0
    2940:	0f 90       	pop	r0
    2942:	0f 90       	pop	r0
    2944:	0f 90       	pop	r0
    2946:	cf 91       	pop	r28
    2948:	df 91       	pop	r29
    294a:	08 95       	ret

0000294c <TIMER1_voidSetCompareOutputMode>:
 * 		  2- Copy_u8Channel : a- Compare Output Mode for Channel A COM1A1:0
 * 		  					  b- Compare Output Mode for Channel B COM1B1:0
 * Output: void
 * 	*/
void TIMER1_voidSetCompareOutputMode(u8 Copy_u8CompOutputMode, u8 Copy_u8Channel)
{
    294c:	df 93       	push	r29
    294e:	cf 93       	push	r28
    2950:	cd b7       	in	r28, 0x3d	; 61
    2952:	de b7       	in	r29, 0x3e	; 62
    2954:	2a 97       	sbiw	r28, 0x0a	; 10
    2956:	0f b6       	in	r0, 0x3f	; 63
    2958:	f8 94       	cli
    295a:	de bf       	out	0x3e, r29	; 62
    295c:	0f be       	out	0x3f, r0	; 63
    295e:	cd bf       	out	0x3d, r28	; 61
    2960:	89 83       	std	Y+1, r24	; 0x01
    2962:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8CompOutputMode)
    2964:	89 81       	ldd	r24, Y+1	; 0x01
    2966:	28 2f       	mov	r18, r24
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	3a 87       	std	Y+10, r19	; 0x0a
    296c:	29 87       	std	Y+9, r18	; 0x09
    296e:	89 85       	ldd	r24, Y+9	; 0x09
    2970:	9a 85       	ldd	r25, Y+10	; 0x0a
    2972:	81 30       	cpi	r24, 0x01	; 1
    2974:	91 05       	cpc	r25, r1
    2976:	c1 f1       	breq	.+112    	; 0x29e8 <TIMER1_voidSetCompareOutputMode+0x9c>
    2978:	29 85       	ldd	r18, Y+9	; 0x09
    297a:	3a 85       	ldd	r19, Y+10	; 0x0a
    297c:	22 30       	cpi	r18, 0x02	; 2
    297e:	31 05       	cpc	r19, r1
    2980:	09 f4       	brne	.+2      	; 0x2984 <TIMER1_voidSetCompareOutputMode+0x38>
    2982:	5f c0       	rjmp	.+190    	; 0x2a42 <TIMER1_voidSetCompareOutputMode+0xf6>
    2984:	89 85       	ldd	r24, Y+9	; 0x09
    2986:	9a 85       	ldd	r25, Y+10	; 0x0a
    2988:	00 97       	sbiw	r24, 0x00	; 0
    298a:	09 f0       	breq	.+2      	; 0x298e <TIMER1_voidSetCompareOutputMode+0x42>
    298c:	86 c0       	rjmp	.+268    	; 0x2a9a <TIMER1_voidSetCompareOutputMode+0x14e>
	{
	case NORMAL_OPERATION_MODE:
		switch(Copy_u8Channel)
    298e:	8a 81       	ldd	r24, Y+2	; 0x02
    2990:	28 2f       	mov	r18, r24
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	38 87       	std	Y+8, r19	; 0x08
    2996:	2f 83       	std	Y+7, r18	; 0x07
    2998:	8f 81       	ldd	r24, Y+7	; 0x07
    299a:	98 85       	ldd	r25, Y+8	; 0x08
    299c:	00 97       	sbiw	r24, 0x00	; 0
    299e:	31 f0       	breq	.+12     	; 0x29ac <TIMER1_voidSetCompareOutputMode+0x60>
    29a0:	2f 81       	ldd	r18, Y+7	; 0x07
    29a2:	38 85       	ldd	r19, Y+8	; 0x08
    29a4:	21 30       	cpi	r18, 0x01	; 1
    29a6:	31 05       	cpc	r19, r1
    29a8:	81 f0       	breq	.+32     	; 0x29ca <TIMER1_voidSetCompareOutputMode+0x7e>
    29aa:	77 c0       	rjmp	.+238    	; 0x2a9a <TIMER1_voidSetCompareOutputMode+0x14e>
		{
		case TIMER1_OCR1A:
			CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    29ac:	af e4       	ldi	r26, 0x4F	; 79
    29ae:	b0 e0       	ldi	r27, 0x00	; 0
    29b0:	ef e4       	ldi	r30, 0x4F	; 79
    29b2:	f0 e0       	ldi	r31, 0x00	; 0
    29b4:	80 81       	ld	r24, Z
    29b6:	8f 7b       	andi	r24, 0xBF	; 191
    29b8:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    29ba:	af e4       	ldi	r26, 0x4F	; 79
    29bc:	b0 e0       	ldi	r27, 0x00	; 0
    29be:	ef e4       	ldi	r30, 0x4F	; 79
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
    29c2:	80 81       	ld	r24, Z
    29c4:	8f 77       	andi	r24, 0x7F	; 127
    29c6:	8c 93       	st	X, r24
    29c8:	68 c0       	rjmp	.+208    	; 0x2a9a <TIMER1_voidSetCompareOutputMode+0x14e>
			break;
		case TIMER1_OCR1B:
			CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    29ca:	af e4       	ldi	r26, 0x4F	; 79
    29cc:	b0 e0       	ldi	r27, 0x00	; 0
    29ce:	ef e4       	ldi	r30, 0x4F	; 79
    29d0:	f0 e0       	ldi	r31, 0x00	; 0
    29d2:	80 81       	ld	r24, Z
    29d4:	8f 7e       	andi	r24, 0xEF	; 239
    29d6:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    29d8:	af e4       	ldi	r26, 0x4F	; 79
    29da:	b0 e0       	ldi	r27, 0x00	; 0
    29dc:	ef e4       	ldi	r30, 0x4F	; 79
    29de:	f0 e0       	ldi	r31, 0x00	; 0
    29e0:	80 81       	ld	r24, Z
    29e2:	8f 7d       	andi	r24, 0xDF	; 223
    29e4:	8c 93       	st	X, r24
    29e6:	59 c0       	rjmp	.+178    	; 0x2a9a <TIMER1_voidSetCompareOutputMode+0x14e>
		default: break;
		}
		break;

		case NON_INVERTED_MODE:
			switch(Copy_u8Channel)
    29e8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ea:	28 2f       	mov	r18, r24
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	3e 83       	std	Y+6, r19	; 0x06
    29f0:	2d 83       	std	Y+5, r18	; 0x05
    29f2:	8d 81       	ldd	r24, Y+5	; 0x05
    29f4:	9e 81       	ldd	r25, Y+6	; 0x06
    29f6:	00 97       	sbiw	r24, 0x00	; 0
    29f8:	31 f0       	breq	.+12     	; 0x2a06 <TIMER1_voidSetCompareOutputMode+0xba>
    29fa:	2d 81       	ldd	r18, Y+5	; 0x05
    29fc:	3e 81       	ldd	r19, Y+6	; 0x06
    29fe:	21 30       	cpi	r18, 0x01	; 1
    2a00:	31 05       	cpc	r19, r1
    2a02:	81 f0       	breq	.+32     	; 0x2a24 <TIMER1_voidSetCompareOutputMode+0xd8>
    2a04:	4a c0       	rjmp	.+148    	; 0x2a9a <TIMER1_voidSetCompareOutputMode+0x14e>
			{
			case TIMER1_OCR1A:
				CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    2a06:	af e4       	ldi	r26, 0x4F	; 79
    2a08:	b0 e0       	ldi	r27, 0x00	; 0
    2a0a:	ef e4       	ldi	r30, 0x4F	; 79
    2a0c:	f0 e0       	ldi	r31, 0x00	; 0
    2a0e:	80 81       	ld	r24, Z
    2a10:	8f 7b       	andi	r24, 0xBF	; 191
    2a12:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,TCCR1A_COM1A1);
    2a14:	af e4       	ldi	r26, 0x4F	; 79
    2a16:	b0 e0       	ldi	r27, 0x00	; 0
    2a18:	ef e4       	ldi	r30, 0x4F	; 79
    2a1a:	f0 e0       	ldi	r31, 0x00	; 0
    2a1c:	80 81       	ld	r24, Z
    2a1e:	80 68       	ori	r24, 0x80	; 128
    2a20:	8c 93       	st	X, r24
    2a22:	3b c0       	rjmp	.+118    	; 0x2a9a <TIMER1_voidSetCompareOutputMode+0x14e>
				break;
			case TIMER1_OCR1B:
				CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    2a24:	af e4       	ldi	r26, 0x4F	; 79
    2a26:	b0 e0       	ldi	r27, 0x00	; 0
    2a28:	ef e4       	ldi	r30, 0x4F	; 79
    2a2a:	f0 e0       	ldi	r31, 0x00	; 0
    2a2c:	80 81       	ld	r24, Z
    2a2e:	8f 7e       	andi	r24, 0xEF	; 239
    2a30:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,TCCR1A_COM1B1);
    2a32:	af e4       	ldi	r26, 0x4F	; 79
    2a34:	b0 e0       	ldi	r27, 0x00	; 0
    2a36:	ef e4       	ldi	r30, 0x4F	; 79
    2a38:	f0 e0       	ldi	r31, 0x00	; 0
    2a3a:	80 81       	ld	r24, Z
    2a3c:	80 62       	ori	r24, 0x20	; 32
    2a3e:	8c 93       	st	X, r24
    2a40:	2c c0       	rjmp	.+88     	; 0x2a9a <TIMER1_voidSetCompareOutputMode+0x14e>
			default : break;
			}
			break;

			case INVERTED_MODE:
				switch(Copy_u8Channel)
    2a42:	8a 81       	ldd	r24, Y+2	; 0x02
    2a44:	28 2f       	mov	r18, r24
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	3c 83       	std	Y+4, r19	; 0x04
    2a4a:	2b 83       	std	Y+3, r18	; 0x03
    2a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a4e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a50:	00 97       	sbiw	r24, 0x00	; 0
    2a52:	31 f0       	breq	.+12     	; 0x2a60 <TIMER1_voidSetCompareOutputMode+0x114>
    2a54:	2b 81       	ldd	r18, Y+3	; 0x03
    2a56:	3c 81       	ldd	r19, Y+4	; 0x04
    2a58:	21 30       	cpi	r18, 0x01	; 1
    2a5a:	31 05       	cpc	r19, r1
    2a5c:	81 f0       	breq	.+32     	; 0x2a7e <TIMER1_voidSetCompareOutputMode+0x132>
    2a5e:	1d c0       	rjmp	.+58     	; 0x2a9a <TIMER1_voidSetCompareOutputMode+0x14e>
				{
				case TIMER1_OCR1A:
					SET_BIT(TCCR1A,TCCR1A_COM1A0);
    2a60:	af e4       	ldi	r26, 0x4F	; 79
    2a62:	b0 e0       	ldi	r27, 0x00	; 0
    2a64:	ef e4       	ldi	r30, 0x4F	; 79
    2a66:	f0 e0       	ldi	r31, 0x00	; 0
    2a68:	80 81       	ld	r24, Z
    2a6a:	80 64       	ori	r24, 0x40	; 64
    2a6c:	8c 93       	st	X, r24
					SET_BIT(TCCR1A,TCCR1A_COM1A1);
    2a6e:	af e4       	ldi	r26, 0x4F	; 79
    2a70:	b0 e0       	ldi	r27, 0x00	; 0
    2a72:	ef e4       	ldi	r30, 0x4F	; 79
    2a74:	f0 e0       	ldi	r31, 0x00	; 0
    2a76:	80 81       	ld	r24, Z
    2a78:	80 68       	ori	r24, 0x80	; 128
    2a7a:	8c 93       	st	X, r24
    2a7c:	0e c0       	rjmp	.+28     	; 0x2a9a <TIMER1_voidSetCompareOutputMode+0x14e>
					break;
				case TIMER1_OCR1B:
					SET_BIT(TCCR1A,TCCR1A_COM1B0);
    2a7e:	af e4       	ldi	r26, 0x4F	; 79
    2a80:	b0 e0       	ldi	r27, 0x00	; 0
    2a82:	ef e4       	ldi	r30, 0x4F	; 79
    2a84:	f0 e0       	ldi	r31, 0x00	; 0
    2a86:	80 81       	ld	r24, Z
    2a88:	80 61       	ori	r24, 0x10	; 16
    2a8a:	8c 93       	st	X, r24
					SET_BIT(TCCR1A,TCCR1A_COM1B1);
    2a8c:	af e4       	ldi	r26, 0x4F	; 79
    2a8e:	b0 e0       	ldi	r27, 0x00	; 0
    2a90:	ef e4       	ldi	r30, 0x4F	; 79
    2a92:	f0 e0       	ldi	r31, 0x00	; 0
    2a94:	80 81       	ld	r24, Z
    2a96:	80 62       	ori	r24, 0x20	; 32
    2a98:	8c 93       	st	X, r24
				}
				break;

				default : break;
	}
}
    2a9a:	2a 96       	adiw	r28, 0x0a	; 10
    2a9c:	0f b6       	in	r0, 0x3f	; 63
    2a9e:	f8 94       	cli
    2aa0:	de bf       	out	0x3e, r29	; 62
    2aa2:	0f be       	out	0x3f, r0	; 63
    2aa4:	cd bf       	out	0x3d, r28	; 61
    2aa6:	cf 91       	pop	r28
    2aa8:	df 91       	pop	r29
    2aaa:	08 95       	ret

00002aac <TIMER1_voidSetChannelACompMatchValue>:


void TIMER1_voidSetChannelACompMatchValue(u16 Copy_u16Value)
{
    2aac:	df 93       	push	r29
    2aae:	cf 93       	push	r28
    2ab0:	00 d0       	rcall	.+0      	; 0x2ab2 <TIMER1_voidSetChannelACompMatchValue+0x6>
    2ab2:	cd b7       	in	r28, 0x3d	; 61
    2ab4:	de b7       	in	r29, 0x3e	; 62
    2ab6:	9a 83       	std	Y+2, r25	; 0x02
    2ab8:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=Copy_u16Value;
    2aba:	ea e4       	ldi	r30, 0x4A	; 74
    2abc:	f0 e0       	ldi	r31, 0x00	; 0
    2abe:	89 81       	ldd	r24, Y+1	; 0x01
    2ac0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac2:	91 83       	std	Z+1, r25	; 0x01
    2ac4:	80 83       	st	Z, r24
}
    2ac6:	0f 90       	pop	r0
    2ac8:	0f 90       	pop	r0
    2aca:	cf 91       	pop	r28
    2acc:	df 91       	pop	r29
    2ace:	08 95       	ret

00002ad0 <TIMER1_voidSetChannelBCompMatchValue>:

void TIMER1_voidSetChannelBCompMatchValue(u16 Copy_u16Value)
{
    2ad0:	df 93       	push	r29
    2ad2:	cf 93       	push	r28
    2ad4:	00 d0       	rcall	.+0      	; 0x2ad6 <TIMER1_voidSetChannelBCompMatchValue+0x6>
    2ad6:	cd b7       	in	r28, 0x3d	; 61
    2ad8:	de b7       	in	r29, 0x3e	; 62
    2ada:	9a 83       	std	Y+2, r25	; 0x02
    2adc:	89 83       	std	Y+1, r24	; 0x01
	OCR1B=Copy_u16Value;
    2ade:	e8 e4       	ldi	r30, 0x48	; 72
    2ae0:	f0 e0       	ldi	r31, 0x00	; 0
    2ae2:	89 81       	ldd	r24, Y+1	; 0x01
    2ae4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ae6:	91 83       	std	Z+1, r25	; 0x01
    2ae8:	80 83       	st	Z, r24
}
    2aea:	0f 90       	pop	r0
    2aec:	0f 90       	pop	r0
    2aee:	cf 91       	pop	r28
    2af0:	df 91       	pop	r29
    2af2:	08 95       	ret

00002af4 <TIMER1_voidSetTimerValue>:

void TIMER1_voidSetTimerValue(u16 Copy_u16Value)
{
    2af4:	df 93       	push	r29
    2af6:	cf 93       	push	r28
    2af8:	00 d0       	rcall	.+0      	; 0x2afa <TIMER1_voidSetTimerValue+0x6>
    2afa:	cd b7       	in	r28, 0x3d	; 61
    2afc:	de b7       	in	r29, 0x3e	; 62
    2afe:	9a 83       	std	Y+2, r25	; 0x02
    2b00:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=Copy_u16Value;
    2b02:	ec e4       	ldi	r30, 0x4C	; 76
    2b04:	f0 e0       	ldi	r31, 0x00	; 0
    2b06:	89 81       	ldd	r24, Y+1	; 0x01
    2b08:	9a 81       	ldd	r25, Y+2	; 0x02
    2b0a:	91 83       	std	Z+1, r25	; 0x01
    2b0c:	80 83       	st	Z, r24
}
    2b0e:	0f 90       	pop	r0
    2b10:	0f 90       	pop	r0
    2b12:	cf 91       	pop	r28
    2b14:	df 91       	pop	r29
    2b16:	08 95       	ret

00002b18 <TIMER1_u16ReadTimerValue>:

u16 TIMER1_u16ReadTimerValue(void)
{
    2b18:	df 93       	push	r29
    2b1a:	cf 93       	push	r28
    2b1c:	cd b7       	in	r28, 0x3d	; 61
    2b1e:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    2b20:	ec e4       	ldi	r30, 0x4C	; 76
    2b22:	f0 e0       	ldi	r31, 0x00	; 0
    2b24:	80 81       	ld	r24, Z
    2b26:	91 81       	ldd	r25, Z+1	; 0x01
}
    2b28:	cf 91       	pop	r28
    2b2a:	df 91       	pop	r29
    2b2c:	08 95       	ret

00002b2e <PWM1_voidInit>:

void PWM1_voidInit(void)
{
    2b2e:	df 93       	push	r29
    2b30:	cf 93       	push	r28
    2b32:	cd b7       	in	r28, 0x3d	; 61
    2b34:	de b7       	in	r29, 0x3e	; 62
	TIMER1_voidInit(TIMER1_FAST_PWM_ICR1_MODE,DIVIDE_BY_8);
    2b36:	8e e0       	ldi	r24, 0x0E	; 14
    2b38:	62 e0       	ldi	r22, 0x02	; 2
    2b3a:	0e 94 72 12 	call	0x24e4	; 0x24e4 <TIMER1_voidInit>
	TIMER1_voidSetCompareOutputMode(NON_INVERTED_MODE,TIMER1_OCR1A);
    2b3e:	81 e0       	ldi	r24, 0x01	; 1
    2b40:	60 e0       	ldi	r22, 0x00	; 0
    2b42:	0e 94 a6 14 	call	0x294c	; 0x294c <TIMER1_voidSetCompareOutputMode>
}
    2b46:	cf 91       	pop	r28
    2b48:	df 91       	pop	r29
    2b4a:	08 95       	ret

00002b4c <PWM1_voidDutyCycle>:

void PWM1_voidDutyCycle(u16 Copy_u16Duty)
{
    2b4c:	ef 92       	push	r14
    2b4e:	ff 92       	push	r15
    2b50:	0f 93       	push	r16
    2b52:	1f 93       	push	r17
    2b54:	df 93       	push	r29
    2b56:	cf 93       	push	r28
    2b58:	00 d0       	rcall	.+0      	; 0x2b5a <PWM1_voidDutyCycle+0xe>
    2b5a:	00 d0       	rcall	.+0      	; 0x2b5c <PWM1_voidDutyCycle+0x10>
    2b5c:	cd b7       	in	r28, 0x3d	; 61
    2b5e:	de b7       	in	r29, 0x3e	; 62
    2b60:	9c 83       	std	Y+4, r25	; 0x04
    2b62:	8b 83       	std	Y+3, r24	; 0x03
	if (Copy_u16Duty <= 100)
    2b64:	8b 81       	ldd	r24, Y+3	; 0x03
    2b66:	9c 81       	ldd	r25, Y+4	; 0x04
    2b68:	85 36       	cpi	r24, 0x65	; 101
    2b6a:	91 05       	cpc	r25, r1
    2b6c:	80 f5       	brcc	.+96     	; 0x2bce <PWM1_voidDutyCycle+0x82>
	{
		u16 Local_u16TimeOn = ((u32)Copy_u16Duty * (ICR1 +1)) /100;
    2b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b70:	9c 81       	ldd	r25, Y+4	; 0x04
    2b72:	7c 01       	movw	r14, r24
    2b74:	00 e0       	ldi	r16, 0x00	; 0
    2b76:	10 e0       	ldi	r17, 0x00	; 0
    2b78:	e6 e4       	ldi	r30, 0x46	; 70
    2b7a:	f0 e0       	ldi	r31, 0x00	; 0
    2b7c:	80 81       	ld	r24, Z
    2b7e:	91 81       	ldd	r25, Z+1	; 0x01
    2b80:	01 96       	adiw	r24, 0x01	; 1
    2b82:	9c 01       	movw	r18, r24
    2b84:	40 e0       	ldi	r20, 0x00	; 0
    2b86:	50 e0       	ldi	r21, 0x00	; 0
    2b88:	c8 01       	movw	r24, r16
    2b8a:	b7 01       	movw	r22, r14
    2b8c:	0e 94 6d 2a 	call	0x54da	; 0x54da <__mulsi3>
    2b90:	dc 01       	movw	r26, r24
    2b92:	cb 01       	movw	r24, r22
    2b94:	24 e6       	ldi	r18, 0x64	; 100
    2b96:	30 e0       	ldi	r19, 0x00	; 0
    2b98:	40 e0       	ldi	r20, 0x00	; 0
    2b9a:	50 e0       	ldi	r21, 0x00	; 0
    2b9c:	bc 01       	movw	r22, r24
    2b9e:	cd 01       	movw	r24, r26
    2ba0:	0e 94 a0 2a 	call	0x5540	; 0x5540 <__udivmodsi4>
    2ba4:	da 01       	movw	r26, r20
    2ba6:	c9 01       	movw	r24, r18
    2ba8:	9a 83       	std	Y+2, r25	; 0x02
    2baa:	89 83       	std	Y+1, r24	; 0x01
		if(Local_u16TimeOn > 1)
    2bac:	89 81       	ldd	r24, Y+1	; 0x01
    2bae:	9a 81       	ldd	r25, Y+2	; 0x02
    2bb0:	82 30       	cpi	r24, 0x02	; 2
    2bb2:	91 05       	cpc	r25, r1
    2bb4:	40 f0       	brcs	.+16     	; 0x2bc6 <PWM1_voidDutyCycle+0x7a>
		{
			OCR1A = Local_u16TimeOn-1;
    2bb6:	ea e4       	ldi	r30, 0x4A	; 74
    2bb8:	f0 e0       	ldi	r31, 0x00	; 0
    2bba:	89 81       	ldd	r24, Y+1	; 0x01
    2bbc:	9a 81       	ldd	r25, Y+2	; 0x02
    2bbe:	01 97       	sbiw	r24, 0x01	; 1
    2bc0:	91 83       	std	Z+1, r25	; 0x01
    2bc2:	80 83       	st	Z, r24
    2bc4:	04 c0       	rjmp	.+8      	; 0x2bce <PWM1_voidDutyCycle+0x82>
		}
		else
		{
			OCR1A = 0;
    2bc6:	ea e4       	ldi	r30, 0x4A	; 74
    2bc8:	f0 e0       	ldi	r31, 0x00	; 0
    2bca:	11 82       	std	Z+1, r1	; 0x01
    2bcc:	10 82       	st	Z, r1
	}
	else
	{
		/*Return error*/
	}
}
    2bce:	0f 90       	pop	r0
    2bd0:	0f 90       	pop	r0
    2bd2:	0f 90       	pop	r0
    2bd4:	0f 90       	pop	r0
    2bd6:	cf 91       	pop	r28
    2bd8:	df 91       	pop	r29
    2bda:	1f 91       	pop	r17
    2bdc:	0f 91       	pop	r16
    2bde:	ff 90       	pop	r15
    2be0:	ef 90       	pop	r14
    2be2:	08 95       	ret

00002be4 <ICU_voidInit>:

void ICU_voidInit(void)
{
    2be4:	df 93       	push	r29
    2be6:	cf 93       	push	r28
    2be8:	cd b7       	in	r28, 0x3d	; 61
    2bea:	de b7       	in	r29, 0x3e	; 62
	/*set trigger source to rising edge initially*/
	SET_BIT(TCCR1B,TCCR1B_ICES1);
    2bec:	ae e4       	ldi	r26, 0x4E	; 78
    2bee:	b0 e0       	ldi	r27, 0x00	; 0
    2bf0:	ee e4       	ldi	r30, 0x4E	; 78
    2bf2:	f0 e0       	ldi	r31, 0x00	; 0
    2bf4:	80 81       	ld	r24, Z
    2bf6:	80 64       	ori	r24, 0x40	; 64
    2bf8:	8c 93       	st	X, r24

	/*Enable input capture interrupt*/
	SET_BIT(TIMSK,TIMSK_TICIE1);
    2bfa:	a9 e5       	ldi	r26, 0x59	; 89
    2bfc:	b0 e0       	ldi	r27, 0x00	; 0
    2bfe:	e9 e5       	ldi	r30, 0x59	; 89
    2c00:	f0 e0       	ldi	r31, 0x00	; 0
    2c02:	80 81       	ld	r24, Z
    2c04:	80 62       	ori	r24, 0x20	; 32
    2c06:	8c 93       	st	X, r24
}
    2c08:	cf 91       	pop	r28
    2c0a:	df 91       	pop	r29
    2c0c:	08 95       	ret

00002c0e <ICU_u8SetTriggerEdge>:

u8 ICU_u8SetTriggerEdge(u8 Copy_u8Edge)
{
    2c0e:	df 93       	push	r29
    2c10:	cf 93       	push	r28
    2c12:	00 d0       	rcall	.+0      	; 0x2c14 <ICU_u8SetTriggerEdge+0x6>
    2c14:	cd b7       	in	r28, 0x3d	; 61
    2c16:	de b7       	in	r29, 0x3e	; 62
    2c18:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus=OK;
    2c1a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Edge==ICU_RISING_EDGE)
    2c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c1e:	81 30       	cpi	r24, 0x01	; 1
    2c20:	41 f4       	brne	.+16     	; 0x2c32 <ICU_u8SetTriggerEdge+0x24>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    2c22:	ae e4       	ldi	r26, 0x4E	; 78
    2c24:	b0 e0       	ldi	r27, 0x00	; 0
    2c26:	ee e4       	ldi	r30, 0x4E	; 78
    2c28:	f0 e0       	ldi	r31, 0x00	; 0
    2c2a:	80 81       	ld	r24, Z
    2c2c:	80 64       	ori	r24, 0x40	; 64
    2c2e:	8c 93       	st	X, r24
    2c30:	0d c0       	rjmp	.+26     	; 0x2c4c <ICU_u8SetTriggerEdge+0x3e>
	}
	else if(Copy_u8Edge==ICU_FALLING_EDGE)
    2c32:	8a 81       	ldd	r24, Y+2	; 0x02
    2c34:	88 23       	and	r24, r24
    2c36:	41 f4       	brne	.+16     	; 0x2c48 <ICU_u8SetTriggerEdge+0x3a>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    2c38:	ae e4       	ldi	r26, 0x4E	; 78
    2c3a:	b0 e0       	ldi	r27, 0x00	; 0
    2c3c:	ee e4       	ldi	r30, 0x4E	; 78
    2c3e:	f0 e0       	ldi	r31, 0x00	; 0
    2c40:	80 81       	ld	r24, Z
    2c42:	8f 7b       	andi	r24, 0xBF	; 191
    2c44:	8c 93       	st	X, r24
    2c46:	02 c0       	rjmp	.+4      	; 0x2c4c <ICU_u8SetTriggerEdge+0x3e>
	}
	else
	{
		Local_u8ErrorStatus=NOK;
    2c48:	81 e0       	ldi	r24, 0x01	; 1
    2c4a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorStatus;
    2c4c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c4e:	0f 90       	pop	r0
    2c50:	0f 90       	pop	r0
    2c52:	cf 91       	pop	r28
    2c54:	df 91       	pop	r29
    2c56:	08 95       	ret

00002c58 <ICU_voidEnableInterrupt>:

void ICU_voidEnableInterrupt(void)
{
    2c58:	df 93       	push	r29
    2c5a:	cf 93       	push	r28
    2c5c:	cd b7       	in	r28, 0x3d	; 61
    2c5e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TICIE1);
    2c60:	a9 e5       	ldi	r26, 0x59	; 89
    2c62:	b0 e0       	ldi	r27, 0x00	; 0
    2c64:	e9 e5       	ldi	r30, 0x59	; 89
    2c66:	f0 e0       	ldi	r31, 0x00	; 0
    2c68:	80 81       	ld	r24, Z
    2c6a:	80 62       	ori	r24, 0x20	; 32
    2c6c:	8c 93       	st	X, r24
}
    2c6e:	cf 91       	pop	r28
    2c70:	df 91       	pop	r29
    2c72:	08 95       	ret

00002c74 <ICU_voidDisableInterrupt>:

void ICU_voidDisableInterrupt(void)
{
    2c74:	df 93       	push	r29
    2c76:	cf 93       	push	r28
    2c78:	cd b7       	in	r28, 0x3d	; 61
    2c7a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    2c7c:	a9 e5       	ldi	r26, 0x59	; 89
    2c7e:	b0 e0       	ldi	r27, 0x00	; 0
    2c80:	e9 e5       	ldi	r30, 0x59	; 89
    2c82:	f0 e0       	ldi	r31, 0x00	; 0
    2c84:	80 81       	ld	r24, Z
    2c86:	8f 7d       	andi	r24, 0xDF	; 223
    2c88:	8c 93       	st	X, r24
}
    2c8a:	cf 91       	pop	r28
    2c8c:	df 91       	pop	r29
    2c8e:	08 95       	ret

00002c90 <ICU_u16ReadInputCaptureRegister>:

u16 ICU_u16ReadInputCaptureRegister(void)
{
    2c90:	df 93       	push	r29
    2c92:	cf 93       	push	r28
    2c94:	cd b7       	in	r28, 0x3d	; 61
    2c96:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    2c98:	e6 e4       	ldi	r30, 0x46	; 70
    2c9a:	f0 e0       	ldi	r31, 0x00	; 0
    2c9c:	80 81       	ld	r24, Z
    2c9e:	91 81       	ldd	r25, Z+1	; 0x01
}
    2ca0:	cf 91       	pop	r28
    2ca2:	df 91       	pop	r29
    2ca4:	08 95       	ret

00002ca6 <ICU_voidSetInputCaptureRegister>:

void ICU_voidSetInputCaptureRegister(u16 Copy_u16Value)
{
    2ca6:	df 93       	push	r29
    2ca8:	cf 93       	push	r28
    2caa:	00 d0       	rcall	.+0      	; 0x2cac <ICU_voidSetInputCaptureRegister+0x6>
    2cac:	cd b7       	in	r28, 0x3d	; 61
    2cae:	de b7       	in	r29, 0x3e	; 62
    2cb0:	9a 83       	std	Y+2, r25	; 0x02
    2cb2:	89 83       	std	Y+1, r24	; 0x01
	ICR1=Copy_u16Value;
    2cb4:	e6 e4       	ldi	r30, 0x46	; 70
    2cb6:	f0 e0       	ldi	r31, 0x00	; 0
    2cb8:	89 81       	ldd	r24, Y+1	; 0x01
    2cba:	9a 81       	ldd	r25, Y+2	; 0x02
    2cbc:	91 83       	std	Z+1, r25	; 0x01
    2cbe:	80 83       	st	Z, r24
}
    2cc0:	0f 90       	pop	r0
    2cc2:	0f 90       	pop	r0
    2cc4:	cf 91       	pop	r28
    2cc6:	df 91       	pop	r29
    2cc8:	08 95       	ret

00002cca <TIMER1_voidOVFInterrruptEnable>:

void TIMER1_voidOVFInterrruptEnable(void)
{
    2cca:	df 93       	push	r29
    2ccc:	cf 93       	push	r28
    2cce:	cd b7       	in	r28, 0x3d	; 61
    2cd0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TOIE1);
    2cd2:	a9 e5       	ldi	r26, 0x59	; 89
    2cd4:	b0 e0       	ldi	r27, 0x00	; 0
    2cd6:	e9 e5       	ldi	r30, 0x59	; 89
    2cd8:	f0 e0       	ldi	r31, 0x00	; 0
    2cda:	80 81       	ld	r24, Z
    2cdc:	84 60       	ori	r24, 0x04	; 4
    2cde:	8c 93       	st	X, r24
}
    2ce0:	cf 91       	pop	r28
    2ce2:	df 91       	pop	r29
    2ce4:	08 95       	ret

00002ce6 <TIMER1_voidOVFInterrruptDisable>:

void TIMER1_voidOVFInterrruptDisable(void)
{
    2ce6:	df 93       	push	r29
    2ce8:	cf 93       	push	r28
    2cea:	cd b7       	in	r28, 0x3d	; 61
    2cec:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TOIE1);
    2cee:	a9 e5       	ldi	r26, 0x59	; 89
    2cf0:	b0 e0       	ldi	r27, 0x00	; 0
    2cf2:	e9 e5       	ldi	r30, 0x59	; 89
    2cf4:	f0 e0       	ldi	r31, 0x00	; 0
    2cf6:	80 81       	ld	r24, Z
    2cf8:	8b 7f       	andi	r24, 0xFB	; 251
    2cfa:	8c 93       	st	X, r24
}
    2cfc:	cf 91       	pop	r28
    2cfe:	df 91       	pop	r29
    2d00:	08 95       	ret

00002d02 <TIMER1_u8SetCallBack>:

u8 TIMER1_u8SetCallBack(void (*Copy_pvCallBackFunc)(void), u8 Copy_u8IntNumber)
{
    2d02:	df 93       	push	r29
    2d04:	cf 93       	push	r28
    2d06:	00 d0       	rcall	.+0      	; 0x2d08 <TIMER1_u8SetCallBack+0x6>
    2d08:	00 d0       	rcall	.+0      	; 0x2d0a <TIMER1_u8SetCallBack+0x8>
    2d0a:	cd b7       	in	r28, 0x3d	; 61
    2d0c:	de b7       	in	r29, 0x3e	; 62
    2d0e:	9b 83       	std	Y+3, r25	; 0x03
    2d10:	8a 83       	std	Y+2, r24	; 0x02
    2d12:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorStatus=OK;
    2d14:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pvCallBackFunc!=NULL)
    2d16:	8a 81       	ldd	r24, Y+2	; 0x02
    2d18:	9b 81       	ldd	r25, Y+3	; 0x03
    2d1a:	00 97       	sbiw	r24, 0x00	; 0
    2d1c:	69 f0       	breq	.+26     	; 0x2d38 <TIMER1_u8SetCallBack+0x36>
	{
		TIMER1_pvCallBackFunc[Copy_u8IntNumber]= Copy_pvCallBackFunc;
    2d1e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d20:	88 2f       	mov	r24, r24
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	88 0f       	add	r24, r24
    2d26:	99 1f       	adc	r25, r25
    2d28:	fc 01       	movw	r30, r24
    2d2a:	e1 53       	subi	r30, 0x31	; 49
    2d2c:	fe 4f       	sbci	r31, 0xFE	; 254
    2d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d30:	9b 81       	ldd	r25, Y+3	; 0x03
    2d32:	91 83       	std	Z+1, r25	; 0x01
    2d34:	80 83       	st	Z, r24
    2d36:	02 c0       	rjmp	.+4      	; 0x2d3c <TIMER1_u8SetCallBack+0x3a>
	}
	else
	{
		Local_u8ErrorStatus=NULL_POINTER;
    2d38:	82 e0       	ldi	r24, 0x02	; 2
    2d3a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorStatus;
    2d3c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d3e:	0f 90       	pop	r0
    2d40:	0f 90       	pop	r0
    2d42:	0f 90       	pop	r0
    2d44:	0f 90       	pop	r0
    2d46:	cf 91       	pop	r28
    2d48:	df 91       	pop	r29
    2d4a:	08 95       	ret

00002d4c <__vector_6>:


void __vector_6 (void) __attribute__((signal));
void __vector_6 (void)
{
    2d4c:	1f 92       	push	r1
    2d4e:	0f 92       	push	r0
    2d50:	0f b6       	in	r0, 0x3f	; 63
    2d52:	0f 92       	push	r0
    2d54:	11 24       	eor	r1, r1
    2d56:	2f 93       	push	r18
    2d58:	3f 93       	push	r19
    2d5a:	4f 93       	push	r20
    2d5c:	5f 93       	push	r21
    2d5e:	6f 93       	push	r22
    2d60:	7f 93       	push	r23
    2d62:	8f 93       	push	r24
    2d64:	9f 93       	push	r25
    2d66:	af 93       	push	r26
    2d68:	bf 93       	push	r27
    2d6a:	ef 93       	push	r30
    2d6c:	ff 93       	push	r31
    2d6e:	df 93       	push	r29
    2d70:	cf 93       	push	r28
    2d72:	cd b7       	in	r28, 0x3d	; 61
    2d74:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_pvCallBackFunc[TIMER1_ICU] != NULL)
    2d76:	80 91 cf 01 	lds	r24, 0x01CF
    2d7a:	90 91 d0 01 	lds	r25, 0x01D0
    2d7e:	00 97       	sbiw	r24, 0x00	; 0
    2d80:	29 f0       	breq	.+10     	; 0x2d8c <__vector_6+0x40>
	{
		TIMER1_pvCallBackFunc[TIMER1_ICU]();
    2d82:	e0 91 cf 01 	lds	r30, 0x01CF
    2d86:	f0 91 d0 01 	lds	r31, 0x01D0
    2d8a:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    2d8c:	cf 91       	pop	r28
    2d8e:	df 91       	pop	r29
    2d90:	ff 91       	pop	r31
    2d92:	ef 91       	pop	r30
    2d94:	bf 91       	pop	r27
    2d96:	af 91       	pop	r26
    2d98:	9f 91       	pop	r25
    2d9a:	8f 91       	pop	r24
    2d9c:	7f 91       	pop	r23
    2d9e:	6f 91       	pop	r22
    2da0:	5f 91       	pop	r21
    2da2:	4f 91       	pop	r20
    2da4:	3f 91       	pop	r19
    2da6:	2f 91       	pop	r18
    2da8:	0f 90       	pop	r0
    2daa:	0f be       	out	0x3f, r0	; 63
    2dac:	0f 90       	pop	r0
    2dae:	1f 90       	pop	r1
    2db0:	18 95       	reti

00002db2 <__vector_7>:

void __vector_7 (void) __attribute__((signal));
void __vector_7 (void)
{
    2db2:	1f 92       	push	r1
    2db4:	0f 92       	push	r0
    2db6:	0f b6       	in	r0, 0x3f	; 63
    2db8:	0f 92       	push	r0
    2dba:	11 24       	eor	r1, r1
    2dbc:	2f 93       	push	r18
    2dbe:	3f 93       	push	r19
    2dc0:	4f 93       	push	r20
    2dc2:	5f 93       	push	r21
    2dc4:	6f 93       	push	r22
    2dc6:	7f 93       	push	r23
    2dc8:	8f 93       	push	r24
    2dca:	9f 93       	push	r25
    2dcc:	af 93       	push	r26
    2dce:	bf 93       	push	r27
    2dd0:	ef 93       	push	r30
    2dd2:	ff 93       	push	r31
    2dd4:	df 93       	push	r29
    2dd6:	cf 93       	push	r28
    2dd8:	cd b7       	in	r28, 0x3d	; 61
    2dda:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_pvCallBackFunc[TIMER1_COMPA] != NULL)
    2ddc:	80 91 d1 01 	lds	r24, 0x01D1
    2de0:	90 91 d2 01 	lds	r25, 0x01D2
    2de4:	00 97       	sbiw	r24, 0x00	; 0
    2de6:	29 f0       	breq	.+10     	; 0x2df2 <__vector_7+0x40>
	{
		TIMER1_pvCallBackFunc[TIMER1_COMPA]();
    2de8:	e0 91 d1 01 	lds	r30, 0x01D1
    2dec:	f0 91 d2 01 	lds	r31, 0x01D2
    2df0:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    2df2:	cf 91       	pop	r28
    2df4:	df 91       	pop	r29
    2df6:	ff 91       	pop	r31
    2df8:	ef 91       	pop	r30
    2dfa:	bf 91       	pop	r27
    2dfc:	af 91       	pop	r26
    2dfe:	9f 91       	pop	r25
    2e00:	8f 91       	pop	r24
    2e02:	7f 91       	pop	r23
    2e04:	6f 91       	pop	r22
    2e06:	5f 91       	pop	r21
    2e08:	4f 91       	pop	r20
    2e0a:	3f 91       	pop	r19
    2e0c:	2f 91       	pop	r18
    2e0e:	0f 90       	pop	r0
    2e10:	0f be       	out	0x3f, r0	; 63
    2e12:	0f 90       	pop	r0
    2e14:	1f 90       	pop	r1
    2e16:	18 95       	reti

00002e18 <__vector_8>:

void __vector_8 (void) __attribute__((signal));
void __vector_8 (void)
{
    2e18:	1f 92       	push	r1
    2e1a:	0f 92       	push	r0
    2e1c:	0f b6       	in	r0, 0x3f	; 63
    2e1e:	0f 92       	push	r0
    2e20:	11 24       	eor	r1, r1
    2e22:	2f 93       	push	r18
    2e24:	3f 93       	push	r19
    2e26:	4f 93       	push	r20
    2e28:	5f 93       	push	r21
    2e2a:	6f 93       	push	r22
    2e2c:	7f 93       	push	r23
    2e2e:	8f 93       	push	r24
    2e30:	9f 93       	push	r25
    2e32:	af 93       	push	r26
    2e34:	bf 93       	push	r27
    2e36:	ef 93       	push	r30
    2e38:	ff 93       	push	r31
    2e3a:	df 93       	push	r29
    2e3c:	cf 93       	push	r28
    2e3e:	cd b7       	in	r28, 0x3d	; 61
    2e40:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_pvCallBackFunc[TIMER1_COMPB] != NULL)
    2e42:	80 91 d3 01 	lds	r24, 0x01D3
    2e46:	90 91 d4 01 	lds	r25, 0x01D4
    2e4a:	00 97       	sbiw	r24, 0x00	; 0
    2e4c:	29 f0       	breq	.+10     	; 0x2e58 <__vector_8+0x40>
	{
		TIMER1_pvCallBackFunc[TIMER1_COMPB]();
    2e4e:	e0 91 d3 01 	lds	r30, 0x01D3
    2e52:	f0 91 d4 01 	lds	r31, 0x01D4
    2e56:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    2e58:	cf 91       	pop	r28
    2e5a:	df 91       	pop	r29
    2e5c:	ff 91       	pop	r31
    2e5e:	ef 91       	pop	r30
    2e60:	bf 91       	pop	r27
    2e62:	af 91       	pop	r26
    2e64:	9f 91       	pop	r25
    2e66:	8f 91       	pop	r24
    2e68:	7f 91       	pop	r23
    2e6a:	6f 91       	pop	r22
    2e6c:	5f 91       	pop	r21
    2e6e:	4f 91       	pop	r20
    2e70:	3f 91       	pop	r19
    2e72:	2f 91       	pop	r18
    2e74:	0f 90       	pop	r0
    2e76:	0f be       	out	0x3f, r0	; 63
    2e78:	0f 90       	pop	r0
    2e7a:	1f 90       	pop	r1
    2e7c:	18 95       	reti

00002e7e <__vector_9>:

void __vector_9 (void) __attribute__((signal));
void __vector_9 (void)
{
    2e7e:	1f 92       	push	r1
    2e80:	0f 92       	push	r0
    2e82:	0f b6       	in	r0, 0x3f	; 63
    2e84:	0f 92       	push	r0
    2e86:	11 24       	eor	r1, r1
    2e88:	2f 93       	push	r18
    2e8a:	3f 93       	push	r19
    2e8c:	4f 93       	push	r20
    2e8e:	5f 93       	push	r21
    2e90:	6f 93       	push	r22
    2e92:	7f 93       	push	r23
    2e94:	8f 93       	push	r24
    2e96:	9f 93       	push	r25
    2e98:	af 93       	push	r26
    2e9a:	bf 93       	push	r27
    2e9c:	ef 93       	push	r30
    2e9e:	ff 93       	push	r31
    2ea0:	df 93       	push	r29
    2ea2:	cf 93       	push	r28
    2ea4:	cd b7       	in	r28, 0x3d	; 61
    2ea6:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_pvCallBackFunc[TIMER1_OVF] != NULL)
    2ea8:	80 91 d5 01 	lds	r24, 0x01D5
    2eac:	90 91 d6 01 	lds	r25, 0x01D6
    2eb0:	00 97       	sbiw	r24, 0x00	; 0
    2eb2:	29 f0       	breq	.+10     	; 0x2ebe <__vector_9+0x40>
	{
		TIMER1_pvCallBackFunc[TIMER1_OVF]();
    2eb4:	e0 91 d5 01 	lds	r30, 0x01D5
    2eb8:	f0 91 d6 01 	lds	r31, 0x01D6
    2ebc:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    2ebe:	cf 91       	pop	r28
    2ec0:	df 91       	pop	r29
    2ec2:	ff 91       	pop	r31
    2ec4:	ef 91       	pop	r30
    2ec6:	bf 91       	pop	r27
    2ec8:	af 91       	pop	r26
    2eca:	9f 91       	pop	r25
    2ecc:	8f 91       	pop	r24
    2ece:	7f 91       	pop	r23
    2ed0:	6f 91       	pop	r22
    2ed2:	5f 91       	pop	r21
    2ed4:	4f 91       	pop	r20
    2ed6:	3f 91       	pop	r19
    2ed8:	2f 91       	pop	r18
    2eda:	0f 90       	pop	r0
    2edc:	0f be       	out	0x3f, r0	; 63
    2ede:	0f 90       	pop	r0
    2ee0:	1f 90       	pop	r1
    2ee2:	18 95       	reti

00002ee4 <TIMER2_voidInit>:


static void(*TIMER2_pvCallBackFunc[2])(void)={NULL};

void TIMER2_voidInit(u8 Copy_u8Mode, u8 Copy_u8Prescaler)
{
    2ee4:	df 93       	push	r29
    2ee6:	cf 93       	push	r28
    2ee8:	00 d0       	rcall	.+0      	; 0x2eea <TIMER2_voidInit+0x6>
    2eea:	00 d0       	rcall	.+0      	; 0x2eec <TIMER2_voidInit+0x8>
    2eec:	cd b7       	in	r28, 0x3d	; 61
    2eee:	de b7       	in	r29, 0x3e	; 62
    2ef0:	89 83       	std	Y+1, r24	; 0x01
    2ef2:	6a 83       	std	Y+2, r22	; 0x02
	/*Select Waveform generation mode*/
	switch(Copy_u8Mode)
    2ef4:	89 81       	ldd	r24, Y+1	; 0x01
    2ef6:	28 2f       	mov	r18, r24
    2ef8:	30 e0       	ldi	r19, 0x00	; 0
    2efa:	3c 83       	std	Y+4, r19	; 0x04
    2efc:	2b 83       	std	Y+3, r18	; 0x03
    2efe:	8b 81       	ldd	r24, Y+3	; 0x03
    2f00:	9c 81       	ldd	r25, Y+4	; 0x04
    2f02:	81 30       	cpi	r24, 0x01	; 1
    2f04:	91 05       	cpc	r25, r1
    2f06:	21 f1       	breq	.+72     	; 0x2f50 <TIMER2_voidInit+0x6c>
    2f08:	2b 81       	ldd	r18, Y+3	; 0x03
    2f0a:	3c 81       	ldd	r19, Y+4	; 0x04
    2f0c:	22 30       	cpi	r18, 0x02	; 2
    2f0e:	31 05       	cpc	r19, r1
    2f10:	2c f4       	brge	.+10     	; 0x2f1c <TIMER2_voidInit+0x38>
    2f12:	8b 81       	ldd	r24, Y+3	; 0x03
    2f14:	9c 81       	ldd	r25, Y+4	; 0x04
    2f16:	00 97       	sbiw	r24, 0x00	; 0
    2f18:	61 f0       	breq	.+24     	; 0x2f32 <TIMER2_voidInit+0x4e>
    2f1a:	46 c0       	rjmp	.+140    	; 0x2fa8 <TIMER2_voidInit+0xc4>
    2f1c:	2b 81       	ldd	r18, Y+3	; 0x03
    2f1e:	3c 81       	ldd	r19, Y+4	; 0x04
    2f20:	22 30       	cpi	r18, 0x02	; 2
    2f22:	31 05       	cpc	r19, r1
    2f24:	21 f1       	breq	.+72     	; 0x2f6e <TIMER2_voidInit+0x8a>
    2f26:	8b 81       	ldd	r24, Y+3	; 0x03
    2f28:	9c 81       	ldd	r25, Y+4	; 0x04
    2f2a:	83 30       	cpi	r24, 0x03	; 3
    2f2c:	91 05       	cpc	r25, r1
    2f2e:	71 f1       	breq	.+92     	; 0x2f8c <TIMER2_voidInit+0xa8>
    2f30:	3b c0       	rjmp	.+118    	; 0x2fa8 <TIMER2_voidInit+0xc4>
	{
	case TIMER2_NORMAL_MODE: CLR_BIT(TCCR2,TCCR2_WGM20); CLR_BIT(TCCR2,TCCR2_WGM21); break;
    2f32:	a5 e4       	ldi	r26, 0x45	; 69
    2f34:	b0 e0       	ldi	r27, 0x00	; 0
    2f36:	e5 e4       	ldi	r30, 0x45	; 69
    2f38:	f0 e0       	ldi	r31, 0x00	; 0
    2f3a:	80 81       	ld	r24, Z
    2f3c:	8f 7b       	andi	r24, 0xBF	; 191
    2f3e:	8c 93       	st	X, r24
    2f40:	a5 e4       	ldi	r26, 0x45	; 69
    2f42:	b0 e0       	ldi	r27, 0x00	; 0
    2f44:	e5 e4       	ldi	r30, 0x45	; 69
    2f46:	f0 e0       	ldi	r31, 0x00	; 0
    2f48:	80 81       	ld	r24, Z
    2f4a:	87 7f       	andi	r24, 0xF7	; 247
    2f4c:	8c 93       	st	X, r24
    2f4e:	2c c0       	rjmp	.+88     	; 0x2fa8 <TIMER2_voidInit+0xc4>
	case TIMER2_PHASE_CORRECT_PWM :SET_BIT(TCCR2,TCCR2_WGM20); CLR_BIT(TCCR2,TCCR2_WGM21); break;
    2f50:	a5 e4       	ldi	r26, 0x45	; 69
    2f52:	b0 e0       	ldi	r27, 0x00	; 0
    2f54:	e5 e4       	ldi	r30, 0x45	; 69
    2f56:	f0 e0       	ldi	r31, 0x00	; 0
    2f58:	80 81       	ld	r24, Z
    2f5a:	80 64       	ori	r24, 0x40	; 64
    2f5c:	8c 93       	st	X, r24
    2f5e:	a5 e4       	ldi	r26, 0x45	; 69
    2f60:	b0 e0       	ldi	r27, 0x00	; 0
    2f62:	e5 e4       	ldi	r30, 0x45	; 69
    2f64:	f0 e0       	ldi	r31, 0x00	; 0
    2f66:	80 81       	ld	r24, Z
    2f68:	87 7f       	andi	r24, 0xF7	; 247
    2f6a:	8c 93       	st	X, r24
    2f6c:	1d c0       	rjmp	.+58     	; 0x2fa8 <TIMER2_voidInit+0xc4>
	case TIMER2_CTC: CLR_BIT(TCCR2,TCCR2_WGM20); SET_BIT(TCCR2,TCCR2_WGM21); break;
    2f6e:	a5 e4       	ldi	r26, 0x45	; 69
    2f70:	b0 e0       	ldi	r27, 0x00	; 0
    2f72:	e5 e4       	ldi	r30, 0x45	; 69
    2f74:	f0 e0       	ldi	r31, 0x00	; 0
    2f76:	80 81       	ld	r24, Z
    2f78:	8f 7b       	andi	r24, 0xBF	; 191
    2f7a:	8c 93       	st	X, r24
    2f7c:	a5 e4       	ldi	r26, 0x45	; 69
    2f7e:	b0 e0       	ldi	r27, 0x00	; 0
    2f80:	e5 e4       	ldi	r30, 0x45	; 69
    2f82:	f0 e0       	ldi	r31, 0x00	; 0
    2f84:	80 81       	ld	r24, Z
    2f86:	88 60       	ori	r24, 0x08	; 8
    2f88:	8c 93       	st	X, r24
    2f8a:	0e c0       	rjmp	.+28     	; 0x2fa8 <TIMER2_voidInit+0xc4>
	case TIMER2_FAST_PWM: SET_BIT(TCCR2,TCCR2_WGM20); SET_BIT(TCCR2,TCCR2_WGM21); break;
    2f8c:	a5 e4       	ldi	r26, 0x45	; 69
    2f8e:	b0 e0       	ldi	r27, 0x00	; 0
    2f90:	e5 e4       	ldi	r30, 0x45	; 69
    2f92:	f0 e0       	ldi	r31, 0x00	; 0
    2f94:	80 81       	ld	r24, Z
    2f96:	80 64       	ori	r24, 0x40	; 64
    2f98:	8c 93       	st	X, r24
    2f9a:	a5 e4       	ldi	r26, 0x45	; 69
    2f9c:	b0 e0       	ldi	r27, 0x00	; 0
    2f9e:	e5 e4       	ldi	r30, 0x45	; 69
    2fa0:	f0 e0       	ldi	r31, 0x00	; 0
    2fa2:	80 81       	ld	r24, Z
    2fa4:	88 60       	ori	r24, 0x08	; 8
    2fa6:	8c 93       	st	X, r24
	default: break;
	}


	/*Set Prescaler division factor*/
	TCCR2 &=PRESCALER_MASK;
    2fa8:	a5 e4       	ldi	r26, 0x45	; 69
    2faa:	b0 e0       	ldi	r27, 0x00	; 0
    2fac:	e5 e4       	ldi	r30, 0x45	; 69
    2fae:	f0 e0       	ldi	r31, 0x00	; 0
    2fb0:	80 81       	ld	r24, Z
    2fb2:	88 7f       	andi	r24, 0xF8	; 248
    2fb4:	8c 93       	st	X, r24
	TCCR2 |=Copy_u8Prescaler;
    2fb6:	a5 e4       	ldi	r26, 0x45	; 69
    2fb8:	b0 e0       	ldi	r27, 0x00	; 0
    2fba:	e5 e4       	ldi	r30, 0x45	; 69
    2fbc:	f0 e0       	ldi	r31, 0x00	; 0
    2fbe:	90 81       	ld	r25, Z
    2fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc2:	89 2b       	or	r24, r25
    2fc4:	8c 93       	st	X, r24

}
    2fc6:	0f 90       	pop	r0
    2fc8:	0f 90       	pop	r0
    2fca:	0f 90       	pop	r0
    2fcc:	0f 90       	pop	r0
    2fce:	cf 91       	pop	r28
    2fd0:	df 91       	pop	r29
    2fd2:	08 95       	ret

00002fd4 <TIMER2_voidSetCompMatchOutputMode>:

void TIMER2_voidSetCompMatchOutputMode(u8 Copy_u8CompOutputMode)
{
    2fd4:	df 93       	push	r29
    2fd6:	cf 93       	push	r28
    2fd8:	00 d0       	rcall	.+0      	; 0x2fda <TIMER2_voidSetCompMatchOutputMode+0x6>
    2fda:	0f 92       	push	r0
    2fdc:	cd b7       	in	r28, 0x3d	; 61
    2fde:	de b7       	in	r29, 0x3e	; 62
    2fe0:	89 83       	std	Y+1, r24	; 0x01
	/*Select Compare match Output mode*/
	switch(Copy_u8CompOutputMode)
    2fe2:	89 81       	ldd	r24, Y+1	; 0x01
    2fe4:	28 2f       	mov	r18, r24
    2fe6:	30 e0       	ldi	r19, 0x00	; 0
    2fe8:	3b 83       	std	Y+3, r19	; 0x03
    2fea:	2a 83       	std	Y+2, r18	; 0x02
    2fec:	8a 81       	ldd	r24, Y+2	; 0x02
    2fee:	9b 81       	ldd	r25, Y+3	; 0x03
    2ff0:	81 30       	cpi	r24, 0x01	; 1
    2ff2:	91 05       	cpc	r25, r1
    2ff4:	c1 f0       	breq	.+48     	; 0x3026 <TIMER2_voidSetCompMatchOutputMode+0x52>
    2ff6:	2a 81       	ldd	r18, Y+2	; 0x02
    2ff8:	3b 81       	ldd	r19, Y+3	; 0x03
    2ffa:	22 30       	cpi	r18, 0x02	; 2
    2ffc:	31 05       	cpc	r19, r1
    2ffe:	11 f1       	breq	.+68     	; 0x3044 <TIMER2_voidSetCompMatchOutputMode+0x70>
    3000:	8a 81       	ldd	r24, Y+2	; 0x02
    3002:	9b 81       	ldd	r25, Y+3	; 0x03
    3004:	00 97       	sbiw	r24, 0x00	; 0
    3006:	61 f5       	brne	.+88     	; 0x3060 <TIMER2_voidSetCompMatchOutputMode+0x8c>
	{
	case NORMAL_OPERATION_MODE : CLR_BIT(TCCR2,TCCR2_COM20); CLR_BIT(TCCR2,TCCR2_COM21); break;
    3008:	a5 e4       	ldi	r26, 0x45	; 69
    300a:	b0 e0       	ldi	r27, 0x00	; 0
    300c:	e5 e4       	ldi	r30, 0x45	; 69
    300e:	f0 e0       	ldi	r31, 0x00	; 0
    3010:	80 81       	ld	r24, Z
    3012:	8f 7e       	andi	r24, 0xEF	; 239
    3014:	8c 93       	st	X, r24
    3016:	a5 e4       	ldi	r26, 0x45	; 69
    3018:	b0 e0       	ldi	r27, 0x00	; 0
    301a:	e5 e4       	ldi	r30, 0x45	; 69
    301c:	f0 e0       	ldi	r31, 0x00	; 0
    301e:	80 81       	ld	r24, Z
    3020:	8f 7d       	andi	r24, 0xDF	; 223
    3022:	8c 93       	st	X, r24
    3024:	1d c0       	rjmp	.+58     	; 0x3060 <TIMER2_voidSetCompMatchOutputMode+0x8c>
	case NON_INVERTED_MODE: CLR_BIT(TCCR2,TCCR2_COM20); SET_BIT(TCCR2,TCCR2_COM21); break;
    3026:	a5 e4       	ldi	r26, 0x45	; 69
    3028:	b0 e0       	ldi	r27, 0x00	; 0
    302a:	e5 e4       	ldi	r30, 0x45	; 69
    302c:	f0 e0       	ldi	r31, 0x00	; 0
    302e:	80 81       	ld	r24, Z
    3030:	8f 7e       	andi	r24, 0xEF	; 239
    3032:	8c 93       	st	X, r24
    3034:	a5 e4       	ldi	r26, 0x45	; 69
    3036:	b0 e0       	ldi	r27, 0x00	; 0
    3038:	e5 e4       	ldi	r30, 0x45	; 69
    303a:	f0 e0       	ldi	r31, 0x00	; 0
    303c:	80 81       	ld	r24, Z
    303e:	80 62       	ori	r24, 0x20	; 32
    3040:	8c 93       	st	X, r24
    3042:	0e c0       	rjmp	.+28     	; 0x3060 <TIMER2_voidSetCompMatchOutputMode+0x8c>
	case INVERTED_MODE : SET_BIT(TCCR2,TCCR2_COM20); SET_BIT(TCCR2,TCCR2_COM21); break;
    3044:	a5 e4       	ldi	r26, 0x45	; 69
    3046:	b0 e0       	ldi	r27, 0x00	; 0
    3048:	e5 e4       	ldi	r30, 0x45	; 69
    304a:	f0 e0       	ldi	r31, 0x00	; 0
    304c:	80 81       	ld	r24, Z
    304e:	80 61       	ori	r24, 0x10	; 16
    3050:	8c 93       	st	X, r24
    3052:	a5 e4       	ldi	r26, 0x45	; 69
    3054:	b0 e0       	ldi	r27, 0x00	; 0
    3056:	e5 e4       	ldi	r30, 0x45	; 69
    3058:	f0 e0       	ldi	r31, 0x00	; 0
    305a:	80 81       	ld	r24, Z
    305c:	80 62       	ori	r24, 0x20	; 32
    305e:	8c 93       	st	X, r24
	default : break;
	}

}
    3060:	0f 90       	pop	r0
    3062:	0f 90       	pop	r0
    3064:	0f 90       	pop	r0
    3066:	cf 91       	pop	r28
    3068:	df 91       	pop	r29
    306a:	08 95       	ret

0000306c <TIMER2_voidSetCompMatchValue>:

void TIMER2_voidSetCompMatchValue(u8 Copy_u8Value)
{
    306c:	df 93       	push	r29
    306e:	cf 93       	push	r28
    3070:	0f 92       	push	r0
    3072:	cd b7       	in	r28, 0x3d	; 61
    3074:	de b7       	in	r29, 0x3e	; 62
    3076:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = Copy_u8Value;
    3078:	e3 e4       	ldi	r30, 0x43	; 67
    307a:	f0 e0       	ldi	r31, 0x00	; 0
    307c:	89 81       	ldd	r24, Y+1	; 0x01
    307e:	80 83       	st	Z, r24
}
    3080:	0f 90       	pop	r0
    3082:	cf 91       	pop	r28
    3084:	df 91       	pop	r29
    3086:	08 95       	ret

00003088 <TIMER2_voidSetTimerValue>:

void TIMER2_voidSetTimerValue(u8 Copy_u8Value)
{
    3088:	df 93       	push	r29
    308a:	cf 93       	push	r28
    308c:	0f 92       	push	r0
    308e:	cd b7       	in	r28, 0x3d	; 61
    3090:	de b7       	in	r29, 0x3e	; 62
    3092:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = Copy_u8Value;
    3094:	e4 e4       	ldi	r30, 0x44	; 68
    3096:	f0 e0       	ldi	r31, 0x00	; 0
    3098:	89 81       	ldd	r24, Y+1	; 0x01
    309a:	80 83       	st	Z, r24
}
    309c:	0f 90       	pop	r0
    309e:	cf 91       	pop	r28
    30a0:	df 91       	pop	r29
    30a2:	08 95       	ret

000030a4 <TIMER2_u8ReadTimerValue>:

u8 TIMER2_u8ReadTimerValue(void)
{
    30a4:	df 93       	push	r29
    30a6:	cf 93       	push	r28
    30a8:	cd b7       	in	r28, 0x3d	; 61
    30aa:	de b7       	in	r29, 0x3e	; 62
	return TCNT2;
    30ac:	e4 e4       	ldi	r30, 0x44	; 68
    30ae:	f0 e0       	ldi	r31, 0x00	; 0
    30b0:	80 81       	ld	r24, Z
}
    30b2:	cf 91       	pop	r28
    30b4:	df 91       	pop	r29
    30b6:	08 95       	ret

000030b8 <TIMER2_voidCompMatchInterruptEnable>:

void TIMER2_voidCompMatchInterruptEnable(void)
{
    30b8:	df 93       	push	r29
    30ba:	cf 93       	push	r28
    30bc:	cd b7       	in	r28, 0x3d	; 61
    30be:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_OCIE2);
    30c0:	a9 e5       	ldi	r26, 0x59	; 89
    30c2:	b0 e0       	ldi	r27, 0x00	; 0
    30c4:	e9 e5       	ldi	r30, 0x59	; 89
    30c6:	f0 e0       	ldi	r31, 0x00	; 0
    30c8:	80 81       	ld	r24, Z
    30ca:	80 68       	ori	r24, 0x80	; 128
    30cc:	8c 93       	st	X, r24
}
    30ce:	cf 91       	pop	r28
    30d0:	df 91       	pop	r29
    30d2:	08 95       	ret

000030d4 <TIMER2_voidCompMatchInterruptDisable>:

void TIMER2_voidCompMatchInterruptDisable(void)
{
    30d4:	df 93       	push	r29
    30d6:	cf 93       	push	r28
    30d8:	cd b7       	in	r28, 0x3d	; 61
    30da:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_OCIE2);
    30dc:	a9 e5       	ldi	r26, 0x59	; 89
    30de:	b0 e0       	ldi	r27, 0x00	; 0
    30e0:	e9 e5       	ldi	r30, 0x59	; 89
    30e2:	f0 e0       	ldi	r31, 0x00	; 0
    30e4:	80 81       	ld	r24, Z
    30e6:	8f 77       	andi	r24, 0x7F	; 127
    30e8:	8c 93       	st	X, r24
}
    30ea:	cf 91       	pop	r28
    30ec:	df 91       	pop	r29
    30ee:	08 95       	ret

000030f0 <TIMER2_voidOVFInterruptEnable>:

void TIMER2_voidOVFInterruptEnable(void)
{
    30f0:	df 93       	push	r29
    30f2:	cf 93       	push	r28
    30f4:	cd b7       	in	r28, 0x3d	; 61
    30f6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TOIE2);
    30f8:	a9 e5       	ldi	r26, 0x59	; 89
    30fa:	b0 e0       	ldi	r27, 0x00	; 0
    30fc:	e9 e5       	ldi	r30, 0x59	; 89
    30fe:	f0 e0       	ldi	r31, 0x00	; 0
    3100:	80 81       	ld	r24, Z
    3102:	80 64       	ori	r24, 0x40	; 64
    3104:	8c 93       	st	X, r24
}
    3106:	cf 91       	pop	r28
    3108:	df 91       	pop	r29
    310a:	08 95       	ret

0000310c <TIMER2_voidOVFInterruptDisable>:

void TIMER2_voidOVFInterruptDisable(void)
{
    310c:	df 93       	push	r29
    310e:	cf 93       	push	r28
    3110:	cd b7       	in	r28, 0x3d	; 61
    3112:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TOIE2);
    3114:	a9 e5       	ldi	r26, 0x59	; 89
    3116:	b0 e0       	ldi	r27, 0x00	; 0
    3118:	e9 e5       	ldi	r30, 0x59	; 89
    311a:	f0 e0       	ldi	r31, 0x00	; 0
    311c:	80 81       	ld	r24, Z
    311e:	8f 7b       	andi	r24, 0xBF	; 191
    3120:	8c 93       	st	X, r24
}
    3122:	cf 91       	pop	r28
    3124:	df 91       	pop	r29
    3126:	08 95       	ret

00003128 <TIMER2_voidSetDutyCycle>:

void TIMER2_voidSetDutyCycle(u8 Copy_u8DutyCycle)
{
    3128:	df 93       	push	r29
    312a:	cf 93       	push	r28
    312c:	00 d0       	rcall	.+0      	; 0x312e <TIMER2_voidSetDutyCycle+0x6>
    312e:	cd b7       	in	r28, 0x3d	; 61
    3130:	de b7       	in	r29, 0x3e	; 62
    3132:	8a 83       	std	Y+2, r24	; 0x02
	if(Copy_u8DutyCycle <= 100)
    3134:	8a 81       	ldd	r24, Y+2	; 0x02
    3136:	85 36       	cpi	r24, 0x65	; 101
    3138:	20 f5       	brcc	.+72     	; 0x3182 <TIMER2_voidSetDutyCycle+0x5a>
	{
		u8 Local_u8TimeOn = ((u16)Copy_u8DutyCycle * (TIMER2_MAX_COUNT))/100 ;
    313a:	8a 81       	ldd	r24, Y+2	; 0x02
    313c:	48 2f       	mov	r20, r24
    313e:	50 e0       	ldi	r21, 0x00	; 0
    3140:	ca 01       	movw	r24, r20
    3142:	9c 01       	movw	r18, r24
    3144:	22 0f       	add	r18, r18
    3146:	33 1f       	adc	r19, r19
    3148:	c9 01       	movw	r24, r18
    314a:	96 95       	lsr	r25
    314c:	98 2f       	mov	r25, r24
    314e:	88 27       	eor	r24, r24
    3150:	97 95       	ror	r25
    3152:	87 95       	ror	r24
    3154:	82 1b       	sub	r24, r18
    3156:	93 0b       	sbc	r25, r19
    3158:	84 0f       	add	r24, r20
    315a:	95 1f       	adc	r25, r21
    315c:	24 e6       	ldi	r18, 0x64	; 100
    315e:	30 e0       	ldi	r19, 0x00	; 0
    3160:	b9 01       	movw	r22, r18
    3162:	0e 94 8c 2a 	call	0x5518	; 0x5518 <__udivmodhi4>
    3166:	cb 01       	movw	r24, r22
    3168:	89 83       	std	Y+1, r24	; 0x01

		if(Local_u8TimeOn >1)
    316a:	89 81       	ldd	r24, Y+1	; 0x01
    316c:	82 30       	cpi	r24, 0x02	; 2
    316e:	30 f0       	brcs	.+12     	; 0x317c <TIMER2_voidSetDutyCycle+0x54>
		{
			OCR2 = TIMER2_MAX_COUNT-Local_u8TimeOn;
    3170:	e3 e4       	ldi	r30, 0x43	; 67
    3172:	f0 e0       	ldi	r31, 0x00	; 0
    3174:	89 81       	ldd	r24, Y+1	; 0x01
    3176:	80 95       	com	r24
    3178:	80 83       	st	Z, r24
    317a:	03 c0       	rjmp	.+6      	; 0x3182 <TIMER2_voidSetDutyCycle+0x5a>
		}
		else
		{
			OCR2 = 0;
    317c:	e3 e4       	ldi	r30, 0x43	; 67
    317e:	f0 e0       	ldi	r31, 0x00	; 0
    3180:	10 82       	st	Z, r1
	}
	else
	{
		/*return Error*/
	}
}
    3182:	0f 90       	pop	r0
    3184:	0f 90       	pop	r0
    3186:	cf 91       	pop	r28
    3188:	df 91       	pop	r29
    318a:	08 95       	ret

0000318c <TIMER2_u8SetCallBack>:

u8 TIMER2_u8SetCallBack(void (*Copy_pvCallBackFunc)(void), u8 Copy_u8IntNumber)
{
    318c:	df 93       	push	r29
    318e:	cf 93       	push	r28
    3190:	00 d0       	rcall	.+0      	; 0x3192 <TIMER2_u8SetCallBack+0x6>
    3192:	00 d0       	rcall	.+0      	; 0x3194 <TIMER2_u8SetCallBack+0x8>
    3194:	cd b7       	in	r28, 0x3d	; 61
    3196:	de b7       	in	r29, 0x3e	; 62
    3198:	9b 83       	std	Y+3, r25	; 0x03
    319a:	8a 83       	std	Y+2, r24	; 0x02
    319c:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorStatus=OK;
    319e:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pvCallBackFunc!=NULL)
    31a0:	8a 81       	ldd	r24, Y+2	; 0x02
    31a2:	9b 81       	ldd	r25, Y+3	; 0x03
    31a4:	00 97       	sbiw	r24, 0x00	; 0
    31a6:	69 f0       	breq	.+26     	; 0x31c2 <TIMER2_u8SetCallBack+0x36>
	{
		TIMER2_pvCallBackFunc[Copy_u8IntNumber]= Copy_pvCallBackFunc;
    31a8:	8c 81       	ldd	r24, Y+4	; 0x04
    31aa:	88 2f       	mov	r24, r24
    31ac:	90 e0       	ldi	r25, 0x00	; 0
    31ae:	88 0f       	add	r24, r24
    31b0:	99 1f       	adc	r25, r25
    31b2:	fc 01       	movw	r30, r24
    31b4:	e9 52       	subi	r30, 0x29	; 41
    31b6:	fe 4f       	sbci	r31, 0xFE	; 254
    31b8:	8a 81       	ldd	r24, Y+2	; 0x02
    31ba:	9b 81       	ldd	r25, Y+3	; 0x03
    31bc:	91 83       	std	Z+1, r25	; 0x01
    31be:	80 83       	st	Z, r24
    31c0:	02 c0       	rjmp	.+4      	; 0x31c6 <TIMER2_u8SetCallBack+0x3a>
	}
	else
	{
		Local_u8ErrorStatus=NULL_POINTER;
    31c2:	82 e0       	ldi	r24, 0x02	; 2
    31c4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorStatus;
    31c6:	89 81       	ldd	r24, Y+1	; 0x01

}
    31c8:	0f 90       	pop	r0
    31ca:	0f 90       	pop	r0
    31cc:	0f 90       	pop	r0
    31ce:	0f 90       	pop	r0
    31d0:	cf 91       	pop	r28
    31d2:	df 91       	pop	r29
    31d4:	08 95       	ret

000031d6 <__vector_4>:

void __vector_4 (void) __attribute__((signal));
void __vector_4 (void)
{
    31d6:	1f 92       	push	r1
    31d8:	0f 92       	push	r0
    31da:	0f b6       	in	r0, 0x3f	; 63
    31dc:	0f 92       	push	r0
    31de:	11 24       	eor	r1, r1
    31e0:	2f 93       	push	r18
    31e2:	3f 93       	push	r19
    31e4:	4f 93       	push	r20
    31e6:	5f 93       	push	r21
    31e8:	6f 93       	push	r22
    31ea:	7f 93       	push	r23
    31ec:	8f 93       	push	r24
    31ee:	9f 93       	push	r25
    31f0:	af 93       	push	r26
    31f2:	bf 93       	push	r27
    31f4:	ef 93       	push	r30
    31f6:	ff 93       	push	r31
    31f8:	df 93       	push	r29
    31fa:	cf 93       	push	r28
    31fc:	cd b7       	in	r28, 0x3d	; 61
    31fe:	de b7       	in	r29, 0x3e	; 62
	if(TIMER2_pvCallBackFunc[TIMER2_COMP] != NULL)
    3200:	80 91 d9 01 	lds	r24, 0x01D9
    3204:	90 91 da 01 	lds	r25, 0x01DA
    3208:	00 97       	sbiw	r24, 0x00	; 0
    320a:	29 f0       	breq	.+10     	; 0x3216 <__vector_4+0x40>
	{
		TIMER2_pvCallBackFunc[TIMER2_COMP]();
    320c:	e0 91 d9 01 	lds	r30, 0x01D9
    3210:	f0 91 da 01 	lds	r31, 0x01DA
    3214:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    3216:	cf 91       	pop	r28
    3218:	df 91       	pop	r29
    321a:	ff 91       	pop	r31
    321c:	ef 91       	pop	r30
    321e:	bf 91       	pop	r27
    3220:	af 91       	pop	r26
    3222:	9f 91       	pop	r25
    3224:	8f 91       	pop	r24
    3226:	7f 91       	pop	r23
    3228:	6f 91       	pop	r22
    322a:	5f 91       	pop	r21
    322c:	4f 91       	pop	r20
    322e:	3f 91       	pop	r19
    3230:	2f 91       	pop	r18
    3232:	0f 90       	pop	r0
    3234:	0f be       	out	0x3f, r0	; 63
    3236:	0f 90       	pop	r0
    3238:	1f 90       	pop	r1
    323a:	18 95       	reti

0000323c <__vector_5>:

void __vector_5 (void) __attribute__((signal));
void __vector_5 (void)
{
    323c:	1f 92       	push	r1
    323e:	0f 92       	push	r0
    3240:	0f b6       	in	r0, 0x3f	; 63
    3242:	0f 92       	push	r0
    3244:	11 24       	eor	r1, r1
    3246:	2f 93       	push	r18
    3248:	3f 93       	push	r19
    324a:	4f 93       	push	r20
    324c:	5f 93       	push	r21
    324e:	6f 93       	push	r22
    3250:	7f 93       	push	r23
    3252:	8f 93       	push	r24
    3254:	9f 93       	push	r25
    3256:	af 93       	push	r26
    3258:	bf 93       	push	r27
    325a:	ef 93       	push	r30
    325c:	ff 93       	push	r31
    325e:	df 93       	push	r29
    3260:	cf 93       	push	r28
    3262:	cd b7       	in	r28, 0x3d	; 61
    3264:	de b7       	in	r29, 0x3e	; 62
	if(TIMER2_pvCallBackFunc[TIMER2_OVF] != NULL)
    3266:	80 91 d7 01 	lds	r24, 0x01D7
    326a:	90 91 d8 01 	lds	r25, 0x01D8
    326e:	00 97       	sbiw	r24, 0x00	; 0
    3270:	29 f0       	breq	.+10     	; 0x327c <__vector_5+0x40>
	{
		TIMER2_pvCallBackFunc[TIMER2_OVF]();
    3272:	e0 91 d7 01 	lds	r30, 0x01D7
    3276:	f0 91 d8 01 	lds	r31, 0x01D8
    327a:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    327c:	cf 91       	pop	r28
    327e:	df 91       	pop	r29
    3280:	ff 91       	pop	r31
    3282:	ef 91       	pop	r30
    3284:	bf 91       	pop	r27
    3286:	af 91       	pop	r26
    3288:	9f 91       	pop	r25
    328a:	8f 91       	pop	r24
    328c:	7f 91       	pop	r23
    328e:	6f 91       	pop	r22
    3290:	5f 91       	pop	r21
    3292:	4f 91       	pop	r20
    3294:	3f 91       	pop	r19
    3296:	2f 91       	pop	r18
    3298:	0f 90       	pop	r0
    329a:	0f be       	out	0x3f, r0	; 63
    329c:	0f 90       	pop	r0
    329e:	1f 90       	pop	r1
    32a0:	18 95       	reti

000032a2 <main>:
u8 App_u8ADCReading2;

u8 Global_u8Flag=0;

void main(void)
{
    32a2:	af 92       	push	r10
    32a4:	bf 92       	push	r11
    32a6:	cf 92       	push	r12
    32a8:	df 92       	push	r13
    32aa:	ef 92       	push	r14
    32ac:	ff 92       	push	r15
    32ae:	0f 93       	push	r16
    32b0:	1f 93       	push	r17
    32b2:	df 93       	push	r29
    32b4:	cf 93       	push	r28
    32b6:	cd b7       	in	r28, 0x3d	; 61
    32b8:	de b7       	in	r29, 0x3e	; 62
    32ba:	cf 58       	subi	r28, 0x8F	; 143
    32bc:	d0 40       	sbci	r29, 0x00	; 0
    32be:	0f b6       	in	r0, 0x3f	; 63
    32c0:	f8 94       	cli
    32c2:	de bf       	out	0x3e, r29	; 62
    32c4:	0f be       	out	0x3f, r0	; 63
    32c6:	cd bf       	out	0x3d, r28	; 61
	PORT_voidInit();
    32c8:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <PORT_voidInit>
	CLCD_voidInit();
    32cc:	0e 94 22 09 	call	0x1244	; 0x1244 <CLCD_voidInit>
	ADC_voidInit();
    32d0:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_voidInit>
	SPI_voidInit();
    32d4:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <SPI_voidInit>

	TIMER0_voidInit(TIMER0_FAST_PWM,DIVIDE_BY_8);
    32d8:	83 e0       	ldi	r24, 0x03	; 3
    32da:	62 e0       	ldi	r22, 0x02	; 2
    32dc:	0e 94 93 10 	call	0x2126	; 0x2126 <TIMER0_voidInit>
	TIMER0_voidSetCompMatchOutputMode(NON_INVERTED_MODE);
    32e0:	81 e0       	ldi	r24, 0x01	; 1
    32e2:	0e 94 0b 11 	call	0x2216	; 0x2216 <TIMER0_voidSetCompMatchOutputMode>

	SERVO_voidInit();
    32e6:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <SERVO_voidInit>

	GIE_voidEnable();
    32ea:	0e 94 de 0c 	call	0x19bc	; 0x19bc <GIE_voidEnable>
	u16 Temp,LDR;
	s32 Local_s32LDRPWM;
	u8 Local_u8Duty;
	u8 Local_ReceiveData;

	Start();
    32ee:	0e 94 b8 21 	call	0x4370	; 0x4370 <Start>


	while(1)
	{

		if(Global_u8Flag ==4)
    32f2:	80 91 db 01 	lds	r24, 0x01DB
    32f6:	84 30       	cpi	r24, 0x04	; 4
    32f8:	e1 f7       	brne	.-8      	; 0x32f2 <main+0x50>
		{
			Door();
    32fa:	0e 94 3a 28 	call	0x5074	; 0x5074 <Door>
			Global_u8Flag=0;
    32fe:	10 92 db 01 	sts	0x01DB, r1
			CLCD_voidSendCommand(1);
    3302:	81 e0       	ldi	r24, 0x01	; 1
    3304:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidSendCommand>
			CLCD_voidSendString("Choose Option");
    3308:	80 e6       	ldi	r24, 0x60	; 96
    330a:	90 e0       	ldi	r25, 0x00	; 0
    330c:	0e 94 b0 09 	call	0x1360	; 0x1360 <CLCD_voidSendString>
    3310:	fe 01       	movw	r30, r28
    3312:	e5 58       	subi	r30, 0x85	; 133
    3314:	ff 4f       	sbci	r31, 0xFF	; 255
    3316:	80 e0       	ldi	r24, 0x00	; 0
    3318:	90 e0       	ldi	r25, 0x00	; 0
    331a:	aa e7       	ldi	r26, 0x7A	; 122
    331c:	b4 e4       	ldi	r27, 0x44	; 68
    331e:	80 83       	st	Z, r24
    3320:	91 83       	std	Z+1, r25	; 0x01
    3322:	a2 83       	std	Z+2, r26	; 0x02
    3324:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3326:	8e 01       	movw	r16, r28
    3328:	09 58       	subi	r16, 0x89	; 137
    332a:	1f 4f       	sbci	r17, 0xFF	; 255
    332c:	fe 01       	movw	r30, r28
    332e:	e5 58       	subi	r30, 0x85	; 133
    3330:	ff 4f       	sbci	r31, 0xFF	; 255
    3332:	60 81       	ld	r22, Z
    3334:	71 81       	ldd	r23, Z+1	; 0x01
    3336:	82 81       	ldd	r24, Z+2	; 0x02
    3338:	93 81       	ldd	r25, Z+3	; 0x03
    333a:	20 e0       	ldi	r18, 0x00	; 0
    333c:	30 e0       	ldi	r19, 0x00	; 0
    333e:	4a ef       	ldi	r20, 0xFA	; 250
    3340:	54 e4       	ldi	r21, 0x44	; 68
    3342:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3346:	dc 01       	movw	r26, r24
    3348:	cb 01       	movw	r24, r22
    334a:	f8 01       	movw	r30, r16
    334c:	80 83       	st	Z, r24
    334e:	91 83       	std	Z+1, r25	; 0x01
    3350:	a2 83       	std	Z+2, r26	; 0x02
    3352:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3354:	fe 01       	movw	r30, r28
    3356:	e9 58       	subi	r30, 0x89	; 137
    3358:	ff 4f       	sbci	r31, 0xFF	; 255
    335a:	60 81       	ld	r22, Z
    335c:	71 81       	ldd	r23, Z+1	; 0x01
    335e:	82 81       	ldd	r24, Z+2	; 0x02
    3360:	93 81       	ldd	r25, Z+3	; 0x03
    3362:	20 e0       	ldi	r18, 0x00	; 0
    3364:	30 e0       	ldi	r19, 0x00	; 0
    3366:	40 e8       	ldi	r20, 0x80	; 128
    3368:	5f e3       	ldi	r21, 0x3F	; 63
    336a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    336e:	88 23       	and	r24, r24
    3370:	44 f4       	brge	.+16     	; 0x3382 <main+0xe0>
		__ticks = 1;
    3372:	fe 01       	movw	r30, r28
    3374:	eb 58       	subi	r30, 0x8B	; 139
    3376:	ff 4f       	sbci	r31, 0xFF	; 255
    3378:	81 e0       	ldi	r24, 0x01	; 1
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	91 83       	std	Z+1, r25	; 0x01
    337e:	80 83       	st	Z, r24
    3380:	64 c0       	rjmp	.+200    	; 0x344a <main+0x1a8>
	else if (__tmp > 65535)
    3382:	fe 01       	movw	r30, r28
    3384:	e9 58       	subi	r30, 0x89	; 137
    3386:	ff 4f       	sbci	r31, 0xFF	; 255
    3388:	60 81       	ld	r22, Z
    338a:	71 81       	ldd	r23, Z+1	; 0x01
    338c:	82 81       	ldd	r24, Z+2	; 0x02
    338e:	93 81       	ldd	r25, Z+3	; 0x03
    3390:	20 e0       	ldi	r18, 0x00	; 0
    3392:	3f ef       	ldi	r19, 0xFF	; 255
    3394:	4f e7       	ldi	r20, 0x7F	; 127
    3396:	57 e4       	ldi	r21, 0x47	; 71
    3398:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    339c:	18 16       	cp	r1, r24
    339e:	0c f0       	brlt	.+2      	; 0x33a2 <main+0x100>
    33a0:	43 c0       	rjmp	.+134    	; 0x3428 <main+0x186>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33a2:	fe 01       	movw	r30, r28
    33a4:	e5 58       	subi	r30, 0x85	; 133
    33a6:	ff 4f       	sbci	r31, 0xFF	; 255
    33a8:	60 81       	ld	r22, Z
    33aa:	71 81       	ldd	r23, Z+1	; 0x01
    33ac:	82 81       	ldd	r24, Z+2	; 0x02
    33ae:	93 81       	ldd	r25, Z+3	; 0x03
    33b0:	20 e0       	ldi	r18, 0x00	; 0
    33b2:	30 e0       	ldi	r19, 0x00	; 0
    33b4:	40 e2       	ldi	r20, 0x20	; 32
    33b6:	51 e4       	ldi	r21, 0x41	; 65
    33b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33bc:	dc 01       	movw	r26, r24
    33be:	cb 01       	movw	r24, r22
    33c0:	8e 01       	movw	r16, r28
    33c2:	0b 58       	subi	r16, 0x8B	; 139
    33c4:	1f 4f       	sbci	r17, 0xFF	; 255
    33c6:	bc 01       	movw	r22, r24
    33c8:	cd 01       	movw	r24, r26
    33ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ce:	dc 01       	movw	r26, r24
    33d0:	cb 01       	movw	r24, r22
    33d2:	f8 01       	movw	r30, r16
    33d4:	91 83       	std	Z+1, r25	; 0x01
    33d6:	80 83       	st	Z, r24
    33d8:	1f c0       	rjmp	.+62     	; 0x3418 <main+0x176>
    33da:	fe 01       	movw	r30, r28
    33dc:	ed 58       	subi	r30, 0x8D	; 141
    33de:	ff 4f       	sbci	r31, 0xFF	; 255
    33e0:	88 ec       	ldi	r24, 0xC8	; 200
    33e2:	90 e0       	ldi	r25, 0x00	; 0
    33e4:	91 83       	std	Z+1, r25	; 0x01
    33e6:	80 83       	st	Z, r24
    33e8:	fe 01       	movw	r30, r28
    33ea:	ed 58       	subi	r30, 0x8D	; 141
    33ec:	ff 4f       	sbci	r31, 0xFF	; 255
    33ee:	80 81       	ld	r24, Z
    33f0:	91 81       	ldd	r25, Z+1	; 0x01
    33f2:	01 97       	sbiw	r24, 0x01	; 1
    33f4:	f1 f7       	brne	.-4      	; 0x33f2 <main+0x150>
    33f6:	fe 01       	movw	r30, r28
    33f8:	ed 58       	subi	r30, 0x8D	; 141
    33fa:	ff 4f       	sbci	r31, 0xFF	; 255
    33fc:	91 83       	std	Z+1, r25	; 0x01
    33fe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3400:	de 01       	movw	r26, r28
    3402:	ab 58       	subi	r26, 0x8B	; 139
    3404:	bf 4f       	sbci	r27, 0xFF	; 255
    3406:	fe 01       	movw	r30, r28
    3408:	eb 58       	subi	r30, 0x8B	; 139
    340a:	ff 4f       	sbci	r31, 0xFF	; 255
    340c:	80 81       	ld	r24, Z
    340e:	91 81       	ldd	r25, Z+1	; 0x01
    3410:	01 97       	sbiw	r24, 0x01	; 1
    3412:	11 96       	adiw	r26, 0x01	; 1
    3414:	9c 93       	st	X, r25
    3416:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3418:	fe 01       	movw	r30, r28
    341a:	eb 58       	subi	r30, 0x8B	; 139
    341c:	ff 4f       	sbci	r31, 0xFF	; 255
    341e:	80 81       	ld	r24, Z
    3420:	91 81       	ldd	r25, Z+1	; 0x01
    3422:	00 97       	sbiw	r24, 0x00	; 0
    3424:	d1 f6       	brne	.-76     	; 0x33da <main+0x138>
    3426:	27 c0       	rjmp	.+78     	; 0x3476 <main+0x1d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3428:	8e 01       	movw	r16, r28
    342a:	0b 58       	subi	r16, 0x8B	; 139
    342c:	1f 4f       	sbci	r17, 0xFF	; 255
    342e:	fe 01       	movw	r30, r28
    3430:	e9 58       	subi	r30, 0x89	; 137
    3432:	ff 4f       	sbci	r31, 0xFF	; 255
    3434:	60 81       	ld	r22, Z
    3436:	71 81       	ldd	r23, Z+1	; 0x01
    3438:	82 81       	ldd	r24, Z+2	; 0x02
    343a:	93 81       	ldd	r25, Z+3	; 0x03
    343c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3440:	dc 01       	movw	r26, r24
    3442:	cb 01       	movw	r24, r22
    3444:	f8 01       	movw	r30, r16
    3446:	91 83       	std	Z+1, r25	; 0x01
    3448:	80 83       	st	Z, r24
    344a:	de 01       	movw	r26, r28
    344c:	af 58       	subi	r26, 0x8F	; 143
    344e:	bf 4f       	sbci	r27, 0xFF	; 255
    3450:	fe 01       	movw	r30, r28
    3452:	eb 58       	subi	r30, 0x8B	; 139
    3454:	ff 4f       	sbci	r31, 0xFF	; 255
    3456:	80 81       	ld	r24, Z
    3458:	91 81       	ldd	r25, Z+1	; 0x01
    345a:	8d 93       	st	X+, r24
    345c:	9c 93       	st	X, r25
    345e:	fe 01       	movw	r30, r28
    3460:	ef 58       	subi	r30, 0x8F	; 143
    3462:	ff 4f       	sbci	r31, 0xFF	; 255
    3464:	80 81       	ld	r24, Z
    3466:	91 81       	ldd	r25, Z+1	; 0x01
    3468:	01 97       	sbiw	r24, 0x01	; 1
    346a:	f1 f7       	brne	.-4      	; 0x3468 <main+0x1c6>
    346c:	fe 01       	movw	r30, r28
    346e:	ef 58       	subi	r30, 0x8F	; 143
    3470:	ff 4f       	sbci	r31, 0xFF	; 255
    3472:	91 83       	std	Z+1, r25	; 0x01
    3474:	80 83       	st	Z, r24
			_delay_ms(1000);

			lable1:CLCD_voidSendCommand(1);
    3476:	81 e0       	ldi	r24, 0x01	; 1
    3478:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidSendCommand>
			CLCD_voidSendString("1-Room1");
    347c:	8e e6       	ldi	r24, 0x6E	; 110
    347e:	90 e0       	ldi	r25, 0x00	; 0
    3480:	0e 94 b0 09 	call	0x1360	; 0x1360 <CLCD_voidSendString>
			CLCD_voidGoToXY(0,8);
    3484:	80 e0       	ldi	r24, 0x00	; 0
    3486:	68 e0       	ldi	r22, 0x08	; 8
    3488:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <CLCD_voidGoToXY>
			CLCD_voidSendString("2-Room2");
    348c:	86 e7       	ldi	r24, 0x76	; 118
    348e:	90 e0       	ldi	r25, 0x00	; 0
    3490:	0e 94 b0 09 	call	0x1360	; 0x1360 <CLCD_voidSendString>
			CLCD_voidGoToXY(1,0);
    3494:	81 e0       	ldi	r24, 0x01	; 1
    3496:	60 e0       	ldi	r22, 0x00	; 0
    3498:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <CLCD_voidGoToXY>
			CLCD_voidSendString("3-Room3");
    349c:	8e e7       	ldi	r24, 0x7E	; 126
    349e:	90 e0       	ldi	r25, 0x00	; 0
    34a0:	0e 94 b0 09 	call	0x1360	; 0x1360 <CLCD_voidSendString>
			CLCD_voidGoToXY(1,8);
    34a4:	81 e0       	ldi	r24, 0x01	; 1
    34a6:	68 e0       	ldi	r22, 0x08	; 8
    34a8:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <CLCD_voidGoToXY>
			CLCD_voidSendString("4-More");
    34ac:	86 e8       	ldi	r24, 0x86	; 134
    34ae:	90 e0       	ldi	r25, 0x00	; 0
    34b0:	0e 94 b0 09 	call	0x1360	; 0x1360 <CLCD_voidSendString>

			do
			{
				Local_u8Key=KPD_u8GetPressedKey();
    34b4:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <KPD_u8GetPressedKey>
    34b8:	fe 01       	movw	r30, r28
    34ba:	e2 57       	subi	r30, 0x72	; 114
    34bc:	ff 4f       	sbci	r31, 0xFF	; 255
    34be:	80 83       	st	Z, r24
			}while(Local_u8Key==0xff);
    34c0:	fe 01       	movw	r30, r28
    34c2:	e2 57       	subi	r30, 0x72	; 114
    34c4:	ff 4f       	sbci	r31, 0xFF	; 255
    34c6:	80 81       	ld	r24, Z
    34c8:	8f 3f       	cpi	r24, 0xFF	; 255
    34ca:	a1 f3       	breq	.-24     	; 0x34b4 <main+0x212>

			if(Local_u8Key == 1)
    34cc:	fe 01       	movw	r30, r28
    34ce:	e2 57       	subi	r30, 0x72	; 114
    34d0:	ff 4f       	sbci	r31, 0xFF	; 255
    34d2:	80 81       	ld	r24, Z
    34d4:	81 30       	cpi	r24, 0x01	; 1
    34d6:	09 f0       	breq	.+2      	; 0x34da <main+0x238>
    34d8:	51 c0       	rjmp	.+162    	; 0x357c <main+0x2da>
    34da:	48 c0       	rjmp	.+144    	; 0x356c <main+0x2ca>
			{
				/*Room 1*/
				while(Local_u8Key !=0)
				{
					CLCD_voidSendCommand(1);
    34dc:	81 e0       	ldi	r24, 0x01	; 1
    34de:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidSendCommand>
					CLCD_voidSendString("LED1:");
    34e2:	8d e8       	ldi	r24, 0x8D	; 141
    34e4:	90 e0       	ldi	r25, 0x00	; 0
    34e6:	0e 94 b0 09 	call	0x1360	; 0x1360 <CLCD_voidSendString>
					CLCD_voidGoToXY(0,7);
    34ea:	80 e0       	ldi	r24, 0x00	; 0
    34ec:	67 e0       	ldi	r22, 0x07	; 7
    34ee:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <CLCD_voidGoToXY>
					CLCD_voidSendString("1-ON");
    34f2:	83 e9       	ldi	r24, 0x93	; 147
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	0e 94 b0 09 	call	0x1360	; 0x1360 <CLCD_voidSendString>
					CLCD_voidGoToXY(1,0);
    34fa:	81 e0       	ldi	r24, 0x01	; 1
    34fc:	60 e0       	ldi	r22, 0x00	; 0
    34fe:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <CLCD_voidGoToXY>
					CLCD_voidSendString("2-OFF");
    3502:	88 e9       	ldi	r24, 0x98	; 152
    3504:	90 e0       	ldi	r25, 0x00	; 0
    3506:	0e 94 b0 09 	call	0x1360	; 0x1360 <CLCD_voidSendString>
					CLCD_voidGoToXY(1,7);
    350a:	81 e0       	ldi	r24, 0x01	; 1
    350c:	67 e0       	ldi	r22, 0x07	; 7
    350e:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <CLCD_voidGoToXY>
					CLCD_voidSendString("0-ret");
    3512:	8e e9       	ldi	r24, 0x9E	; 158
    3514:	90 e0       	ldi	r25, 0x00	; 0
    3516:	0e 94 b0 09 	call	0x1360	; 0x1360 <CLCD_voidSendString>

					do
					{
						Local_u8Key=KPD_u8GetPressedKey();
    351a:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <KPD_u8GetPressedKey>
    351e:	fe 01       	movw	r30, r28
    3520:	e2 57       	subi	r30, 0x72	; 114
    3522:	ff 4f       	sbci	r31, 0xFF	; 255
    3524:	80 83       	st	Z, r24
					}while(Local_u8Key==0xff);
    3526:	fe 01       	movw	r30, r28
    3528:	e2 57       	subi	r30, 0x72	; 114
    352a:	ff 4f       	sbci	r31, 0xFF	; 255
    352c:	80 81       	ld	r24, Z
    352e:	8f 3f       	cpi	r24, 0xFF	; 255
    3530:	a1 f3       	breq	.-24     	; 0x351a <main+0x278>

					if(Local_u8Key == 1)
    3532:	fe 01       	movw	r30, r28
    3534:	e2 57       	subi	r30, 0x72	; 114
    3536:	ff 4f       	sbci	r31, 0xFF	; 255
    3538:	80 81       	ld	r24, Z
    353a:	81 30       	cpi	r24, 0x01	; 1
    353c:	29 f4       	brne	.+10     	; 0x3548 <main+0x2a6>
					{
						DIO_u8SetPinValue(DIO_u8PORTB,DIO_u8PIN0,DIO_u8PIN_HIGH);
    353e:	81 e0       	ldi	r24, 0x01	; 1
    3540:	60 e0       	ldi	r22, 0x00	; 0
    3542:	41 e0       	ldi	r20, 0x01	; 1
    3544:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <DIO_u8SetPinValue>
					}
					if(Local_u8Key == 2)
    3548:	fe 01       	movw	r30, r28
    354a:	e2 57       	subi	r30, 0x72	; 114
    354c:	ff 4f       	sbci	r31, 0xFF	; 255
    354e:	80 81       	ld	r24, Z
    3550:	82 30       	cpi	r24, 0x02	; 2
    3552:	29 f4       	brne	.+10     	; 0x355e <main+0x2bc>
					{
						DIO_u8SetPinValue(DIO_u8PORTB,DIO_u8PIN0,DIO_u8PIN_LOW);
    3554:	81 e0       	ldi	r24, 0x01	; 1
    3556:	60 e0       	ldi	r22, 0x00	; 0
    3558:	40 e0       	ldi	r20, 0x00	; 0
    355a:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <DIO_u8SetPinValue>
					}
					if (Local_u8Key== 0)
    355e:	fe 01       	movw	r30, r28
    3560:	e2 57       	subi	r30, 0x72	; 114
    3562:	ff 4f       	sbci	r31, 0xFF	; 255
    3564:	80 81       	ld	r24, Z
    3566:	88 23       	and	r24, r24
    3568:	09 f4       	brne	.+2      	; 0x356c <main+0x2ca>
    356a:	85 cf       	rjmp	.-246    	; 0x3476 <main+0x1d4>
			}while(Local_u8Key==0xff);

			if(Local_u8Key == 1)
			{
				/*Room 1*/
				while(Local_u8Key !=0)
    356c:	fe 01       	movw	r30, r28
    356e:	e2 57       	subi	r30, 0x72	; 114
    3570:	ff 4f       	sbci	r31, 0xFF	; 255
    3572:	80 81       	ld	r24, Z
    3574:	88 23       	and	r24, r24
    3576:	09 f0       	breq	.+2      	; 0x357a <main+0x2d8>
    3578:	b1 cf       	rjmp	.-158    	; 0x34dc <main+0x23a>
    357a:	bb ce       	rjmp	.-650    	; 0x32f2 <main+0x50>
					{
						goto lable1;
					}
				}
			}
			else if(Local_u8Key ==2)
    357c:	fe 01       	movw	r30, r28
    357e:	e2 57       	subi	r30, 0x72	; 114
    3580:	ff 4f       	sbci	r31, 0xFF	; 255
    3582:	80 81       	ld	r24, Z
    3584:	82 30       	cpi	r24, 0x02	; 2
    3586:	09 f0       	breq	.+2      	; 0x358a <main+0x2e8>
    3588:	51 c0       	rjmp	.+162    	; 0x362c <main+0x38a>
    358a:	48 c0       	rjmp	.+144    	; 0x361c <main+0x37a>
			{
				/*Room 2*/
				while(Local_u8Key !=0)
				{
					CLCD_voidSendCommand(1);
    358c:	81 e0       	ldi	r24, 0x01	; 1
    358e:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidSendCommand>
					CLCD_voidSendString("LED2:");
    3592:	84 ea       	ldi	r24, 0xA4	; 164
    3594:	90 e0       	ldi	r25, 0x00	; 0
    3596:	0e 94 b0 09 	call	0x1360	; 0x1360 <CLCD_voidSendString>
					CLCD_voidGoToXY(0,7);
    359a:	80 e0       	ldi	r24, 0x00	; 0
    359c:	67 e0       	ldi	r22, 0x07	; 7
    359e:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <CLCD_voidGoToXY>
					CLCD_voidSendString("1-ON");
    35a2:	83 e9       	ldi	r24, 0x93	; 147
    35a4:	90 e0       	ldi	r25, 0x00	; 0
    35a6:	0e 94 b0 09 	call	0x1360	; 0x1360 <CLCD_voidSendString>
					CLCD_voidGoToXY(1,0);
    35aa:	81 e0       	ldi	r24, 0x01	; 1
    35ac:	60 e0       	ldi	r22, 0x00	; 0
    35ae:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <CLCD_voidGoToXY>
					CLCD_voidSendString("2-OFF");
    35b2:	88 e9       	ldi	r24, 0x98	; 152
    35b4:	90 e0       	ldi	r25, 0x00	; 0
    35b6:	0e 94 b0 09 	call	0x1360	; 0x1360 <CLCD_voidSendString>
					CLCD_voidGoToXY(1,7);
    35ba:	81 e0       	ldi	r24, 0x01	; 1
    35bc:	67 e0       	ldi	r22, 0x07	; 7
    35be:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <CLCD_voidGoToXY>
					CLCD_voidSendString("0-ret");
    35c2:	8e e9       	ldi	r24, 0x9E	; 158
    35c4:	90 e0       	ldi	r25, 0x00	; 0
    35c6:	0e 94 b0 09 	call	0x1360	; 0x1360 <CLCD_voidSendString>

					do
					{
						Local_u8Key=KPD_u8GetPressedKey();
    35ca:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <KPD_u8GetPressedKey>
    35ce:	fe 01       	movw	r30, r28
    35d0:	e2 57       	subi	r30, 0x72	; 114
    35d2:	ff 4f       	sbci	r31, 0xFF	; 255
    35d4:	80 83       	st	Z, r24
					}while(Local_u8Key==0xff);
    35d6:	fe 01       	movw	r30, r28
    35d8:	e2 57       	subi	r30, 0x72	; 114
    35da:	ff 4f       	sbci	r31, 0xFF	; 255
    35dc:	80 81       	ld	r24, Z
    35de:	8f 3f       	cpi	r24, 0xFF	; 255
    35e0:	a1 f3       	breq	.-24     	; 0x35ca <main+0x328>

					if(Local_u8Key == 1)
    35e2:	fe 01       	movw	r30, r28
    35e4:	e2 57       	subi	r30, 0x72	; 114
    35e6:	ff 4f       	sbci	r31, 0xFF	; 255
    35e8:	80 81       	ld	r24, Z
    35ea:	81 30       	cpi	r24, 0x01	; 1
    35ec:	29 f4       	brne	.+10     	; 0x35f8 <main+0x356>
					{
						DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN3,DIO_u8PIN_HIGH);
    35ee:	80 e0       	ldi	r24, 0x00	; 0
    35f0:	63 e0       	ldi	r22, 0x03	; 3
    35f2:	41 e0       	ldi	r20, 0x01	; 1
    35f4:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <DIO_u8SetPinValue>
					}
					if(Local_u8Key == 2)
    35f8:	fe 01       	movw	r30, r28
    35fa:	e2 57       	subi	r30, 0x72	; 114
    35fc:	ff 4f       	sbci	r31, 0xFF	; 255
    35fe:	80 81       	ld	r24, Z
    3600:	82 30       	cpi	r24, 0x02	; 2
    3602:	29 f4       	brne	.+10     	; 0x360e <main+0x36c>
					{
						DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN3,DIO_u8PIN_LOW);
    3604:	80 e0       	ldi	r24, 0x00	; 0
    3606:	63 e0       	ldi	r22, 0x03	; 3
    3608:	40 e0       	ldi	r20, 0x00	; 0
    360a:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <DIO_u8SetPinValue>
					}
					if (Local_u8Key== 0)
    360e:	fe 01       	movw	r30, r28
    3610:	e2 57       	subi	r30, 0x72	; 114
    3612:	ff 4f       	sbci	r31, 0xFF	; 255
    3614:	80 81       	ld	r24, Z
    3616:	88 23       	and	r24, r24
    3618:	09 f4       	brne	.+2      	; 0x361c <main+0x37a>
    361a:	2d cf       	rjmp	.-422    	; 0x3476 <main+0x1d4>
				}
			}
			else if(Local_u8Key ==2)
			{
				/*Room 2*/
				while(Local_u8Key !=0)
    361c:	fe 01       	movw	r30, r28
    361e:	e2 57       	subi	r30, 0x72	; 114
    3620:	ff 4f       	sbci	r31, 0xFF	; 255
    3622:	80 81       	ld	r24, Z
    3624:	88 23       	and	r24, r24
    3626:	09 f0       	breq	.+2      	; 0x362a <main+0x388>
    3628:	b1 cf       	rjmp	.-158    	; 0x358c <main+0x2ea>
    362a:	63 ce       	rjmp	.-826    	; 0x32f2 <main+0x50>
					}


				}
			}
			else if(Local_u8Key == 3)
    362c:	fe 01       	movw	r30, r28
    362e:	e2 57       	subi	r30, 0x72	; 114
    3630:	ff 4f       	sbci	r31, 0xFF	; 255
    3632:	80 81       	ld	r24, Z
    3634:	83 30       	cpi	r24, 0x03	; 3
    3636:	09 f0       	breq	.+2      	; 0x363a <main+0x398>
    3638:	51 c0       	rjmp	.+162    	; 0x36dc <main+0x43a>
    363a:	48 c0       	rjmp	.+144    	; 0x36cc <main+0x42a>
			{
				/*Room 3*/
				while(Local_u8Key !=0)
				{
					CLCD_voidSendCommand(1);
    363c:	81 e0       	ldi	r24, 0x01	; 1
    363e:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidSendCommand>
					CLCD_voidSendString("LED3:");
    3642:	8a ea       	ldi	r24, 0xAA	; 170
    3644:	90 e0       	ldi	r25, 0x00	; 0
    3646:	0e 94 b0 09 	call	0x1360	; 0x1360 <CLCD_voidSendString>
					CLCD_voidGoToXY(0,7);
    364a:	80 e0       	ldi	r24, 0x00	; 0
    364c:	67 e0       	ldi	r22, 0x07	; 7
    364e:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <CLCD_voidGoToXY>
					CLCD_voidSendString("1-ON");
    3652:	83 e9       	ldi	r24, 0x93	; 147
    3654:	90 e0       	ldi	r25, 0x00	; 0
    3656:	0e 94 b0 09 	call	0x1360	; 0x1360 <CLCD_voidSendString>
					CLCD_voidGoToXY(1,0);
    365a:	81 e0       	ldi	r24, 0x01	; 1
    365c:	60 e0       	ldi	r22, 0x00	; 0
    365e:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <CLCD_voidGoToXY>
					CLCD_voidSendString("2-OFF");
    3662:	88 e9       	ldi	r24, 0x98	; 152
    3664:	90 e0       	ldi	r25, 0x00	; 0
    3666:	0e 94 b0 09 	call	0x1360	; 0x1360 <CLCD_voidSendString>
					CLCD_voidGoToXY(1,7);
    366a:	81 e0       	ldi	r24, 0x01	; 1
    366c:	67 e0       	ldi	r22, 0x07	; 7
    366e:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <CLCD_voidGoToXY>
					CLCD_voidSendString("0-ret");
    3672:	8e e9       	ldi	r24, 0x9E	; 158
    3674:	90 e0       	ldi	r25, 0x00	; 0
    3676:	0e 94 b0 09 	call	0x1360	; 0x1360 <CLCD_voidSendString>
					do
					{
						Local_u8Key=KPD_u8GetPressedKey();
    367a:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <KPD_u8GetPressedKey>
    367e:	fe 01       	movw	r30, r28
    3680:	e2 57       	subi	r30, 0x72	; 114
    3682:	ff 4f       	sbci	r31, 0xFF	; 255
    3684:	80 83       	st	Z, r24
					}while(Local_u8Key==0xff);
    3686:	fe 01       	movw	r30, r28
    3688:	e2 57       	subi	r30, 0x72	; 114
    368a:	ff 4f       	sbci	r31, 0xFF	; 255
    368c:	80 81       	ld	r24, Z
    368e:	8f 3f       	cpi	r24, 0xFF	; 255
    3690:	a1 f3       	breq	.-24     	; 0x367a <main+0x3d8>
					if(Local_u8Key == 1)
    3692:	fe 01       	movw	r30, r28
    3694:	e2 57       	subi	r30, 0x72	; 114
    3696:	ff 4f       	sbci	r31, 0xFF	; 255
    3698:	80 81       	ld	r24, Z
    369a:	81 30       	cpi	r24, 0x01	; 1
    369c:	29 f4       	brne	.+10     	; 0x36a8 <main+0x406>
					{
						DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN2,DIO_u8PIN_HIGH);
    369e:	80 e0       	ldi	r24, 0x00	; 0
    36a0:	62 e0       	ldi	r22, 0x02	; 2
    36a2:	41 e0       	ldi	r20, 0x01	; 1
    36a4:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <DIO_u8SetPinValue>
					}
					if(Local_u8Key == 2)
    36a8:	fe 01       	movw	r30, r28
    36aa:	e2 57       	subi	r30, 0x72	; 114
    36ac:	ff 4f       	sbci	r31, 0xFF	; 255
    36ae:	80 81       	ld	r24, Z
    36b0:	82 30       	cpi	r24, 0x02	; 2
    36b2:	29 f4       	brne	.+10     	; 0x36be <main+0x41c>
					{
						DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN2,DIO_u8PIN_LOW);
    36b4:	80 e0       	ldi	r24, 0x00	; 0
    36b6:	62 e0       	ldi	r22, 0x02	; 2
    36b8:	40 e0       	ldi	r20, 0x00	; 0
    36ba:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <DIO_u8SetPinValue>
					}
					if (Local_u8Key== 0)
    36be:	fe 01       	movw	r30, r28
    36c0:	e2 57       	subi	r30, 0x72	; 114
    36c2:	ff 4f       	sbci	r31, 0xFF	; 255
    36c4:	80 81       	ld	r24, Z
    36c6:	88 23       	and	r24, r24
    36c8:	09 f4       	brne	.+2      	; 0x36cc <main+0x42a>
    36ca:	d5 ce       	rjmp	.-598    	; 0x3476 <main+0x1d4>
				}
			}
			else if(Local_u8Key == 3)
			{
				/*Room 3*/
				while(Local_u8Key !=0)
    36cc:	fe 01       	movw	r30, r28
    36ce:	e2 57       	subi	r30, 0x72	; 114
    36d0:	ff 4f       	sbci	r31, 0xFF	; 255
    36d2:	80 81       	ld	r24, Z
    36d4:	88 23       	and	r24, r24
    36d6:	09 f0       	breq	.+2      	; 0x36da <main+0x438>
    36d8:	b1 cf       	rjmp	.-158    	; 0x363c <main+0x39a>
    36da:	0b ce       	rjmp	.-1002   	; 0x32f2 <main+0x50>
					{
						goto lable1;
					}
				}
			}
			else if(Local_u8Key == 4)
    36dc:	fe 01       	movw	r30, r28
    36de:	e2 57       	subi	r30, 0x72	; 114
    36e0:	ff 4f       	sbci	r31, 0xFF	; 255
    36e2:	80 81       	ld	r24, Z
    36e4:	84 30       	cpi	r24, 0x04	; 4
    36e6:	09 f0       	breq	.+2      	; 0x36ea <main+0x448>
    36e8:	c9 c5       	rjmp	.+2962   	; 0x427c <main+0xfda>
			{
				/*More*/
				do{

					lable2:CLCD_voidSendCommand(1);
    36ea:	81 e0       	ldi	r24, 0x01	; 1
    36ec:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidSendCommand>

					ADC_u8StartConversionSynch(0,&App_u8ADCReading1);
    36f0:	2c ed       	ldi	r18, 0xDC	; 220
    36f2:	31 e0       	ldi	r19, 0x01	; 1
    36f4:	80 e0       	ldi	r24, 0x00	; 0
    36f6:	b9 01       	movw	r22, r18
    36f8:	0e 94 d4 05 	call	0xba8	; 0xba8 <ADC_u8StartConversionSynch>
					ADC_u8StartConversionSynch(1,&App_u8ADCReading2);
    36fc:	2d ed       	ldi	r18, 0xDD	; 221
    36fe:	31 e0       	ldi	r19, 0x01	; 1
    3700:	81 e0       	ldi	r24, 0x01	; 1
    3702:	b9 01       	movw	r22, r18
    3704:	0e 94 d4 05 	call	0xba8	; 0xba8 <ADC_u8StartConversionSynch>
					Local_u8ADCReading1=App_u8ADCReading1;
    3708:	fe 01       	movw	r30, r28
    370a:	e3 57       	subi	r30, 0x73	; 115
    370c:	ff 4f       	sbci	r31, 0xFF	; 255
    370e:	80 91 dc 01 	lds	r24, 0x01DC
    3712:	80 83       	st	Z, r24
					Local_u8ADCReading2=App_u8ADCReading2;
    3714:	fe 01       	movw	r30, r28
    3716:	e4 57       	subi	r30, 0x74	; 116
    3718:	ff 4f       	sbci	r31, 0xFF	; 255
    371a:	80 91 dd 01 	lds	r24, 0x01DD
    371e:	80 83       	st	Z, r24
					Local_u8Key=KPD_u8GetPressedKey();
    3720:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <KPD_u8GetPressedKey>
    3724:	fe 01       	movw	r30, r28
    3726:	e2 57       	subi	r30, 0x72	; 114
    3728:	ff 4f       	sbci	r31, 0xFF	; 255
    372a:	80 83       	st	Z, r24


					Milli_Volt1= (u16)(((u32)Local_u8ADCReading1 * 5000UL)/256UL);
    372c:	fe 01       	movw	r30, r28
    372e:	e3 57       	subi	r30, 0x73	; 115
    3730:	ff 4f       	sbci	r31, 0xFF	; 255
    3732:	80 81       	ld	r24, Z
    3734:	88 2f       	mov	r24, r24
    3736:	90 e0       	ldi	r25, 0x00	; 0
    3738:	a0 e0       	ldi	r26, 0x00	; 0
    373a:	b0 e0       	ldi	r27, 0x00	; 0
    373c:	28 e8       	ldi	r18, 0x88	; 136
    373e:	33 e1       	ldi	r19, 0x13	; 19
    3740:	40 e0       	ldi	r20, 0x00	; 0
    3742:	50 e0       	ldi	r21, 0x00	; 0
    3744:	bc 01       	movw	r22, r24
    3746:	cd 01       	movw	r24, r26
    3748:	0e 94 6d 2a 	call	0x54da	; 0x54da <__mulsi3>
    374c:	dc 01       	movw	r26, r24
    374e:	cb 01       	movw	r24, r22
    3750:	89 2f       	mov	r24, r25
    3752:	9a 2f       	mov	r25, r26
    3754:	ab 2f       	mov	r26, r27
    3756:	bb 27       	eor	r27, r27
    3758:	fe 01       	movw	r30, r28
    375a:	e6 57       	subi	r30, 0x76	; 118
    375c:	ff 4f       	sbci	r31, 0xFF	; 255
    375e:	91 83       	std	Z+1, r25	; 0x01
    3760:	80 83       	st	Z, r24
					Milli_Volt2= (u16)(((u32)Local_u8ADCReading2 * 5000UL)/256UL);
    3762:	fe 01       	movw	r30, r28
    3764:	e4 57       	subi	r30, 0x74	; 116
    3766:	ff 4f       	sbci	r31, 0xFF	; 255
    3768:	80 81       	ld	r24, Z
    376a:	88 2f       	mov	r24, r24
    376c:	90 e0       	ldi	r25, 0x00	; 0
    376e:	a0 e0       	ldi	r26, 0x00	; 0
    3770:	b0 e0       	ldi	r27, 0x00	; 0
    3772:	28 e8       	ldi	r18, 0x88	; 136
    3774:	33 e1       	ldi	r19, 0x13	; 19
    3776:	40 e0       	ldi	r20, 0x00	; 0
    3778:	50 e0       	ldi	r21, 0x00	; 0
    377a:	bc 01       	movw	r22, r24
    377c:	cd 01       	movw	r24, r26
    377e:	0e 94 6d 2a 	call	0x54da	; 0x54da <__mulsi3>
    3782:	dc 01       	movw	r26, r24
    3784:	cb 01       	movw	r24, r22
    3786:	89 2f       	mov	r24, r25
    3788:	9a 2f       	mov	r25, r26
    378a:	ab 2f       	mov	r26, r27
    378c:	bb 27       	eor	r27, r27
    378e:	fe 01       	movw	r30, r28
    3790:	e8 57       	subi	r30, 0x78	; 120
    3792:	ff 4f       	sbci	r31, 0xFF	; 255
    3794:	91 83       	std	Z+1, r25	; 0x01
    3796:	80 83       	st	Z, r24

					Temp=Milli_Volt1/10;
    3798:	8e 01       	movw	r16, r28
    379a:	0a 57       	subi	r16, 0x7A	; 122
    379c:	1f 4f       	sbci	r17, 0xFF	; 255
    379e:	fe 01       	movw	r30, r28
    37a0:	e6 57       	subi	r30, 0x76	; 118
    37a2:	ff 4f       	sbci	r31, 0xFF	; 255
    37a4:	80 81       	ld	r24, Z
    37a6:	91 81       	ldd	r25, Z+1	; 0x01
    37a8:	2a e0       	ldi	r18, 0x0A	; 10
    37aa:	30 e0       	ldi	r19, 0x00	; 0
    37ac:	b9 01       	movw	r22, r18
    37ae:	0e 94 8c 2a 	call	0x5518	; 0x5518 <__udivmodhi4>
    37b2:	cb 01       	movw	r24, r22
    37b4:	f8 01       	movw	r30, r16
    37b6:	91 83       	std	Z+1, r25	; 0x01
    37b8:	80 83       	st	Z, r24
					LDR=Milli_Volt2;
    37ba:	de 01       	movw	r26, r28
    37bc:	ac 57       	subi	r26, 0x7C	; 124
    37be:	bf 4f       	sbci	r27, 0xFF	; 255
    37c0:	fe 01       	movw	r30, r28
    37c2:	e8 57       	subi	r30, 0x78	; 120
    37c4:	ff 4f       	sbci	r31, 0xFF	; 255
    37c6:	80 81       	ld	r24, Z
    37c8:	91 81       	ldd	r25, Z+1	; 0x01
    37ca:	8d 93       	st	X+, r24
    37cc:	9c 93       	st	X, r25

					Local_s32LDRPWM = Map(0,255,0,255,Local_u8ADCReading2);
    37ce:	fe 01       	movw	r30, r28
    37d0:	e4 57       	subi	r30, 0x74	; 116
    37d2:	ff 4f       	sbci	r31, 0xFF	; 255
    37d4:	80 81       	ld	r24, Z
    37d6:	88 2f       	mov	r24, r24
    37d8:	90 e0       	ldi	r25, 0x00	; 0
    37da:	a0 e0       	ldi	r26, 0x00	; 0
    37dc:	b0 e0       	ldi	r27, 0x00	; 0
    37de:	00 d0       	rcall	.+0      	; 0x37e0 <main+0x53e>
    37e0:	00 d0       	rcall	.+0      	; 0x37e2 <main+0x540>
    37e2:	ed b7       	in	r30, 0x3d	; 61
    37e4:	fe b7       	in	r31, 0x3e	; 62
    37e6:	31 96       	adiw	r30, 0x01	; 1
    37e8:	80 83       	st	Z, r24
    37ea:	91 83       	std	Z+1, r25	; 0x01
    37ec:	a2 83       	std	Z+2, r26	; 0x02
    37ee:	b3 83       	std	Z+3, r27	; 0x03
    37f0:	60 e0       	ldi	r22, 0x00	; 0
    37f2:	70 e0       	ldi	r23, 0x00	; 0
    37f4:	80 e0       	ldi	r24, 0x00	; 0
    37f6:	90 e0       	ldi	r25, 0x00	; 0
    37f8:	2f ef       	ldi	r18, 0xFF	; 255
    37fa:	30 e0       	ldi	r19, 0x00	; 0
    37fc:	40 e0       	ldi	r20, 0x00	; 0
    37fe:	50 e0       	ldi	r21, 0x00	; 0
    3800:	ee 24       	eor	r14, r14
    3802:	ff 24       	eor	r15, r15
    3804:	87 01       	movw	r16, r14
    3806:	0f 2e       	mov	r0, r31
    3808:	ff ef       	ldi	r31, 0xFF	; 255
    380a:	af 2e       	mov	r10, r31
    380c:	f0 e0       	ldi	r31, 0x00	; 0
    380e:	bf 2e       	mov	r11, r31
    3810:	f0 e0       	ldi	r31, 0x00	; 0
    3812:	cf 2e       	mov	r12, r31
    3814:	f0 e0       	ldi	r31, 0x00	; 0
    3816:	df 2e       	mov	r13, r31
    3818:	f0 2d       	mov	r31, r0
    381a:	0e 94 cc 29 	call	0x5398	; 0x5398 <Map>
    381e:	0f 90       	pop	r0
    3820:	0f 90       	pop	r0
    3822:	0f 90       	pop	r0
    3824:	0f 90       	pop	r0
    3826:	dc 01       	movw	r26, r24
    3828:	cb 01       	movw	r24, r22
    382a:	fe 01       	movw	r30, r28
    382c:	e0 58       	subi	r30, 0x80	; 128
    382e:	ff 4f       	sbci	r31, 0xFF	; 255
    3830:	80 83       	st	Z, r24
    3832:	91 83       	std	Z+1, r25	; 0x01
    3834:	a2 83       	std	Z+2, r26	; 0x02
    3836:	b3 83       	std	Z+3, r27	; 0x03
					TIMER0_voidSetCompMatchValue(255-Local_s32LDRPWM);
    3838:	fe 01       	movw	r30, r28
    383a:	e0 58       	subi	r30, 0x80	; 128
    383c:	ff 4f       	sbci	r31, 0xFF	; 255
    383e:	80 81       	ld	r24, Z
    3840:	80 95       	com	r24
    3842:	0e 94 57 11 	call	0x22ae	; 0x22ae <TIMER0_voidSetCompMatchValue>

					Local_u8Duty = (255-Local_s32LDRPWM);
    3846:	fe 01       	movw	r30, r28
    3848:	e0 58       	subi	r30, 0x80	; 128
    384a:	ff 4f       	sbci	r31, 0xFF	; 255
    384c:	80 81       	ld	r24, Z
    384e:	fe 01       	movw	r30, r28
    3850:	e1 58       	subi	r30, 0x81	; 129
    3852:	ff 4f       	sbci	r31, 0xFF	; 255
    3854:	80 95       	com	r24
    3856:	80 83       	st	Z, r24

					CLCD_voidGoToXY(0,0);
    3858:	80 e0       	ldi	r24, 0x00	; 0
    385a:	60 e0       	ldi	r22, 0x00	; 0
    385c:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <CLCD_voidGoToXY>
					CLCD_voidSendString("Temp= ");
    3860:	80 eb       	ldi	r24, 0xB0	; 176
    3862:	90 e0       	ldi	r25, 0x00	; 0
    3864:	0e 94 b0 09 	call	0x1360	; 0x1360 <CLCD_voidSendString>
					CLCD_voidGoToXY(0,5);
    3868:	80 e0       	ldi	r24, 0x00	; 0
    386a:	65 e0       	ldi	r22, 0x05	; 5
    386c:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <CLCD_voidGoToXY>
					CLCD_voidWriteNumber(Temp,3);
    3870:	fe 01       	movw	r30, r28
    3872:	ea 57       	subi	r30, 0x7A	; 122
    3874:	ff 4f       	sbci	r31, 0xFF	; 255
    3876:	80 81       	ld	r24, Z
    3878:	91 81       	ldd	r25, Z+1	; 0x01
    387a:	cc 01       	movw	r24, r24
    387c:	a0 e0       	ldi	r26, 0x00	; 0
    387e:	b0 e0       	ldi	r27, 0x00	; 0
    3880:	bc 01       	movw	r22, r24
    3882:	cd 01       	movw	r24, r26
    3884:	23 e0       	ldi	r18, 0x03	; 3
    3886:	30 e0       	ldi	r19, 0x00	; 0
    3888:	40 e0       	ldi	r20, 0x00	; 0
    388a:	50 e0       	ldi	r21, 0x00	; 0
    388c:	0e 94 38 0a 	call	0x1470	; 0x1470 <CLCD_voidWriteNumber>
					CLCD_voidGoToXY(1,0);
    3890:	81 e0       	ldi	r24, 0x01	; 1
    3892:	60 e0       	ldi	r22, 0x00	; 0
    3894:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <CLCD_voidGoToXY>
					CLCD_voidSendString("Value=");
    3898:	87 eb       	ldi	r24, 0xB7	; 183
    389a:	90 e0       	ldi	r25, 0x00	; 0
    389c:	0e 94 b0 09 	call	0x1360	; 0x1360 <CLCD_voidSendString>
					CLCD_voidGoToXY(1,6);
    38a0:	81 e0       	ldi	r24, 0x01	; 1
    38a2:	66 e0       	ldi	r22, 0x06	; 6
    38a4:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <CLCD_voidGoToXY>
					CLCD_voidWriteNumber(Local_u8Duty,3);
    38a8:	fe 01       	movw	r30, r28
    38aa:	e1 58       	subi	r30, 0x81	; 129
    38ac:	ff 4f       	sbci	r31, 0xFF	; 255
    38ae:	80 81       	ld	r24, Z
    38b0:	88 2f       	mov	r24, r24
    38b2:	90 e0       	ldi	r25, 0x00	; 0
    38b4:	a0 e0       	ldi	r26, 0x00	; 0
    38b6:	b0 e0       	ldi	r27, 0x00	; 0
    38b8:	bc 01       	movw	r22, r24
    38ba:	cd 01       	movw	r24, r26
    38bc:	23 e0       	ldi	r18, 0x03	; 3
    38be:	30 e0       	ldi	r19, 0x00	; 0
    38c0:	40 e0       	ldi	r20, 0x00	; 0
    38c2:	50 e0       	ldi	r21, 0x00	; 0
    38c4:	0e 94 38 0a 	call	0x1470	; 0x1470 <CLCD_voidWriteNumber>
					CLCD_voidGoToXY(0,10);
    38c8:	80 e0       	ldi	r24, 0x00	; 0
    38ca:	6a e0       	ldi	r22, 0x0A	; 10
    38cc:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <CLCD_voidGoToXY>
					CLCD_voidSendString("0-ret");
    38d0:	8e e9       	ldi	r24, 0x9E	; 158
    38d2:	90 e0       	ldi	r25, 0x00	; 0
    38d4:	0e 94 b0 09 	call	0x1360	; 0x1360 <CLCD_voidSendString>

					CLCD_voidGoToXY(1,10);
    38d8:	81 e0       	ldi	r24, 0x01	; 1
    38da:	6a e0       	ldi	r22, 0x0A	; 10
    38dc:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <CLCD_voidGoToXY>
					CLCD_voidSendString("1-More");
    38e0:	8e eb       	ldi	r24, 0xBE	; 190
    38e2:	90 e0       	ldi	r25, 0x00	; 0
    38e4:	0e 94 b0 09 	call	0x1360	; 0x1360 <CLCD_voidSendString>
    38e8:	fe 01       	movw	r30, r28
    38ea:	e3 59       	subi	r30, 0x93	; 147
    38ec:	ff 4f       	sbci	r31, 0xFF	; 255
    38ee:	80 e0       	ldi	r24, 0x00	; 0
    38f0:	90 e0       	ldi	r25, 0x00	; 0
    38f2:	a8 e4       	ldi	r26, 0x48	; 72
    38f4:	b3 e4       	ldi	r27, 0x43	; 67
    38f6:	80 83       	st	Z, r24
    38f8:	91 83       	std	Z+1, r25	; 0x01
    38fa:	a2 83       	std	Z+2, r26	; 0x02
    38fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38fe:	8e 01       	movw	r16, r28
    3900:	07 59       	subi	r16, 0x97	; 151
    3902:	1f 4f       	sbci	r17, 0xFF	; 255
    3904:	fe 01       	movw	r30, r28
    3906:	e3 59       	subi	r30, 0x93	; 147
    3908:	ff 4f       	sbci	r31, 0xFF	; 255
    390a:	60 81       	ld	r22, Z
    390c:	71 81       	ldd	r23, Z+1	; 0x01
    390e:	82 81       	ldd	r24, Z+2	; 0x02
    3910:	93 81       	ldd	r25, Z+3	; 0x03
    3912:	20 e0       	ldi	r18, 0x00	; 0
    3914:	30 e0       	ldi	r19, 0x00	; 0
    3916:	4a ef       	ldi	r20, 0xFA	; 250
    3918:	54 e4       	ldi	r21, 0x44	; 68
    391a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    391e:	dc 01       	movw	r26, r24
    3920:	cb 01       	movw	r24, r22
    3922:	f8 01       	movw	r30, r16
    3924:	80 83       	st	Z, r24
    3926:	91 83       	std	Z+1, r25	; 0x01
    3928:	a2 83       	std	Z+2, r26	; 0x02
    392a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    392c:	fe 01       	movw	r30, r28
    392e:	e7 59       	subi	r30, 0x97	; 151
    3930:	ff 4f       	sbci	r31, 0xFF	; 255
    3932:	60 81       	ld	r22, Z
    3934:	71 81       	ldd	r23, Z+1	; 0x01
    3936:	82 81       	ldd	r24, Z+2	; 0x02
    3938:	93 81       	ldd	r25, Z+3	; 0x03
    393a:	20 e0       	ldi	r18, 0x00	; 0
    393c:	30 e0       	ldi	r19, 0x00	; 0
    393e:	40 e8       	ldi	r20, 0x80	; 128
    3940:	5f e3       	ldi	r21, 0x3F	; 63
    3942:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3946:	88 23       	and	r24, r24
    3948:	44 f4       	brge	.+16     	; 0x395a <main+0x6b8>
		__ticks = 1;
    394a:	fe 01       	movw	r30, r28
    394c:	e9 59       	subi	r30, 0x99	; 153
    394e:	ff 4f       	sbci	r31, 0xFF	; 255
    3950:	81 e0       	ldi	r24, 0x01	; 1
    3952:	90 e0       	ldi	r25, 0x00	; 0
    3954:	91 83       	std	Z+1, r25	; 0x01
    3956:	80 83       	st	Z, r24
    3958:	64 c0       	rjmp	.+200    	; 0x3a22 <main+0x780>
	else if (__tmp > 65535)
    395a:	fe 01       	movw	r30, r28
    395c:	e7 59       	subi	r30, 0x97	; 151
    395e:	ff 4f       	sbci	r31, 0xFF	; 255
    3960:	60 81       	ld	r22, Z
    3962:	71 81       	ldd	r23, Z+1	; 0x01
    3964:	82 81       	ldd	r24, Z+2	; 0x02
    3966:	93 81       	ldd	r25, Z+3	; 0x03
    3968:	20 e0       	ldi	r18, 0x00	; 0
    396a:	3f ef       	ldi	r19, 0xFF	; 255
    396c:	4f e7       	ldi	r20, 0x7F	; 127
    396e:	57 e4       	ldi	r21, 0x47	; 71
    3970:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3974:	18 16       	cp	r1, r24
    3976:	0c f0       	brlt	.+2      	; 0x397a <main+0x6d8>
    3978:	43 c0       	rjmp	.+134    	; 0x3a00 <main+0x75e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    397a:	fe 01       	movw	r30, r28
    397c:	e3 59       	subi	r30, 0x93	; 147
    397e:	ff 4f       	sbci	r31, 0xFF	; 255
    3980:	60 81       	ld	r22, Z
    3982:	71 81       	ldd	r23, Z+1	; 0x01
    3984:	82 81       	ldd	r24, Z+2	; 0x02
    3986:	93 81       	ldd	r25, Z+3	; 0x03
    3988:	20 e0       	ldi	r18, 0x00	; 0
    398a:	30 e0       	ldi	r19, 0x00	; 0
    398c:	40 e2       	ldi	r20, 0x20	; 32
    398e:	51 e4       	ldi	r21, 0x41	; 65
    3990:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3994:	dc 01       	movw	r26, r24
    3996:	cb 01       	movw	r24, r22
    3998:	8e 01       	movw	r16, r28
    399a:	09 59       	subi	r16, 0x99	; 153
    399c:	1f 4f       	sbci	r17, 0xFF	; 255
    399e:	bc 01       	movw	r22, r24
    39a0:	cd 01       	movw	r24, r26
    39a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39a6:	dc 01       	movw	r26, r24
    39a8:	cb 01       	movw	r24, r22
    39aa:	f8 01       	movw	r30, r16
    39ac:	91 83       	std	Z+1, r25	; 0x01
    39ae:	80 83       	st	Z, r24
    39b0:	1f c0       	rjmp	.+62     	; 0x39f0 <main+0x74e>
    39b2:	fe 01       	movw	r30, r28
    39b4:	eb 59       	subi	r30, 0x9B	; 155
    39b6:	ff 4f       	sbci	r31, 0xFF	; 255
    39b8:	88 ec       	ldi	r24, 0xC8	; 200
    39ba:	90 e0       	ldi	r25, 0x00	; 0
    39bc:	91 83       	std	Z+1, r25	; 0x01
    39be:	80 83       	st	Z, r24
    39c0:	fe 01       	movw	r30, r28
    39c2:	eb 59       	subi	r30, 0x9B	; 155
    39c4:	ff 4f       	sbci	r31, 0xFF	; 255
    39c6:	80 81       	ld	r24, Z
    39c8:	91 81       	ldd	r25, Z+1	; 0x01
    39ca:	01 97       	sbiw	r24, 0x01	; 1
    39cc:	f1 f7       	brne	.-4      	; 0x39ca <main+0x728>
    39ce:	fe 01       	movw	r30, r28
    39d0:	eb 59       	subi	r30, 0x9B	; 155
    39d2:	ff 4f       	sbci	r31, 0xFF	; 255
    39d4:	91 83       	std	Z+1, r25	; 0x01
    39d6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39d8:	de 01       	movw	r26, r28
    39da:	a9 59       	subi	r26, 0x99	; 153
    39dc:	bf 4f       	sbci	r27, 0xFF	; 255
    39de:	fe 01       	movw	r30, r28
    39e0:	e9 59       	subi	r30, 0x99	; 153
    39e2:	ff 4f       	sbci	r31, 0xFF	; 255
    39e4:	80 81       	ld	r24, Z
    39e6:	91 81       	ldd	r25, Z+1	; 0x01
    39e8:	01 97       	sbiw	r24, 0x01	; 1
    39ea:	11 96       	adiw	r26, 0x01	; 1
    39ec:	9c 93       	st	X, r25
    39ee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39f0:	fe 01       	movw	r30, r28
    39f2:	e9 59       	subi	r30, 0x99	; 153
    39f4:	ff 4f       	sbci	r31, 0xFF	; 255
    39f6:	80 81       	ld	r24, Z
    39f8:	91 81       	ldd	r25, Z+1	; 0x01
    39fa:	00 97       	sbiw	r24, 0x00	; 0
    39fc:	d1 f6       	brne	.-76     	; 0x39b2 <main+0x710>
    39fe:	28 c0       	rjmp	.+80     	; 0x3a50 <main+0x7ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a00:	8e 01       	movw	r16, r28
    3a02:	09 59       	subi	r16, 0x99	; 153
    3a04:	1f 4f       	sbci	r17, 0xFF	; 255
    3a06:	fe 01       	movw	r30, r28
    3a08:	e7 59       	subi	r30, 0x97	; 151
    3a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a0c:	60 81       	ld	r22, Z
    3a0e:	71 81       	ldd	r23, Z+1	; 0x01
    3a10:	82 81       	ldd	r24, Z+2	; 0x02
    3a12:	93 81       	ldd	r25, Z+3	; 0x03
    3a14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a18:	dc 01       	movw	r26, r24
    3a1a:	cb 01       	movw	r24, r22
    3a1c:	f8 01       	movw	r30, r16
    3a1e:	91 83       	std	Z+1, r25	; 0x01
    3a20:	80 83       	st	Z, r24
    3a22:	de 01       	movw	r26, r28
    3a24:	ad 59       	subi	r26, 0x9D	; 157
    3a26:	bf 4f       	sbci	r27, 0xFF	; 255
    3a28:	fe 01       	movw	r30, r28
    3a2a:	e9 59       	subi	r30, 0x99	; 153
    3a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a2e:	80 81       	ld	r24, Z
    3a30:	91 81       	ldd	r25, Z+1	; 0x01
    3a32:	11 96       	adiw	r26, 0x01	; 1
    3a34:	9c 93       	st	X, r25
    3a36:	8e 93       	st	-X, r24
    3a38:	fe 01       	movw	r30, r28
    3a3a:	ed 59       	subi	r30, 0x9D	; 157
    3a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a3e:	80 81       	ld	r24, Z
    3a40:	91 81       	ldd	r25, Z+1	; 0x01
    3a42:	01 97       	sbiw	r24, 0x01	; 1
    3a44:	f1 f7       	brne	.-4      	; 0x3a42 <main+0x7a0>
    3a46:	fe 01       	movw	r30, r28
    3a48:	ed 59       	subi	r30, 0x9D	; 157
    3a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a4c:	91 83       	std	Z+1, r25	; 0x01
    3a4e:	80 83       	st	Z, r24

					_delay_ms(200);

					if(Local_u8Key == 0)
    3a50:	fe 01       	movw	r30, r28
    3a52:	e2 57       	subi	r30, 0x72	; 114
    3a54:	ff 4f       	sbci	r31, 0xFF	; 255
    3a56:	80 81       	ld	r24, Z
    3a58:	88 23       	and	r24, r24
    3a5a:	09 f4       	brne	.+2      	; 0x3a5e <main+0x7bc>
    3a5c:	0c cd       	rjmp	.-1512   	; 0x3476 <main+0x1d4>
					{
						goto lable1;
					}
					else if(Local_u8Key == 1)
    3a5e:	fe 01       	movw	r30, r28
    3a60:	e2 57       	subi	r30, 0x72	; 114
    3a62:	ff 4f       	sbci	r31, 0xFF	; 255
    3a64:	80 81       	ld	r24, Z
    3a66:	81 30       	cpi	r24, 0x01	; 1
    3a68:	09 f0       	breq	.+2      	; 0x3a6c <main+0x7ca>
    3a6a:	3f ce       	rjmp	.-898    	; 0x36ea <main+0x448>
    3a6c:	ff c3       	rjmp	.+2046   	; 0x426c <main+0xfca>
					{
						while(Local_u8Key !=0)
						{
							lable3:CLCD_voidSendCommand(1);
    3a6e:	81 e0       	ldi	r24, 0x01	; 1
    3a70:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidSendCommand>
							CLCD_voidGoToXY(0,0);
    3a74:	80 e0       	ldi	r24, 0x00	; 0
    3a76:	60 e0       	ldi	r22, 0x00	; 0
    3a78:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <CLCD_voidGoToXY>
							CLCD_voidSendString("1-Fan ON");
    3a7c:	85 ec       	ldi	r24, 0xC5	; 197
    3a7e:	90 e0       	ldi	r25, 0x00	; 0
    3a80:	0e 94 b0 09 	call	0x1360	; 0x1360 <CLCD_voidSendString>
							CLCD_voidGoToXY(1,0);
    3a84:	81 e0       	ldi	r24, 0x01	; 1
    3a86:	60 e0       	ldi	r22, 0x00	; 0
    3a88:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <CLCD_voidGoToXY>
							CLCD_voidSendString("2-Fan OFF");
    3a8c:	8e ec       	ldi	r24, 0xCE	; 206
    3a8e:	90 e0       	ldi	r25, 0x00	; 0
    3a90:	0e 94 b0 09 	call	0x1360	; 0x1360 <CLCD_voidSendString>
							CLCD_voidGoToXY(0,10);
    3a94:	80 e0       	ldi	r24, 0x00	; 0
    3a96:	6a e0       	ldi	r22, 0x0A	; 10
    3a98:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <CLCD_voidGoToXY>
							CLCD_voidSendString("0-ret");
    3a9c:	8e e9       	ldi	r24, 0x9E	; 158
    3a9e:	90 e0       	ldi	r25, 0x00	; 0
    3aa0:	0e 94 b0 09 	call	0x1360	; 0x1360 <CLCD_voidSendString>
							CLCD_voidGoToXY(1,10);
    3aa4:	81 e0       	ldi	r24, 0x01	; 1
    3aa6:	6a e0       	ldi	r22, 0x0A	; 10
    3aa8:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <CLCD_voidGoToXY>
							CLCD_voidSendString("3-More");
    3aac:	88 ed       	ldi	r24, 0xD8	; 216
    3aae:	90 e0       	ldi	r25, 0x00	; 0
    3ab0:	0e 94 b0 09 	call	0x1360	; 0x1360 <CLCD_voidSendString>


							do
							{
								Local_u8Key=KPD_u8GetPressedKey();
    3ab4:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <KPD_u8GetPressedKey>
    3ab8:	fe 01       	movw	r30, r28
    3aba:	e2 57       	subi	r30, 0x72	; 114
    3abc:	ff 4f       	sbci	r31, 0xFF	; 255
    3abe:	80 83       	st	Z, r24
							}while(Local_u8Key==0xff);
    3ac0:	fe 01       	movw	r30, r28
    3ac2:	e2 57       	subi	r30, 0x72	; 114
    3ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac6:	80 81       	ld	r24, Z
    3ac8:	8f 3f       	cpi	r24, 0xFF	; 255
    3aca:	a1 f3       	breq	.-24     	; 0x3ab4 <main+0x812>

							if(Local_u8Key == 0)
    3acc:	fe 01       	movw	r30, r28
    3ace:	e2 57       	subi	r30, 0x72	; 114
    3ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad2:	80 81       	ld	r24, Z
    3ad4:	88 23       	and	r24, r24
    3ad6:	09 f4       	brne	.+2      	; 0x3ada <main+0x838>
    3ad8:	08 ce       	rjmp	.-1008   	; 0x36ea <main+0x448>
							{
								goto lable2;
							}
							else if(Local_u8Key == 1)
    3ada:	fe 01       	movw	r30, r28
    3adc:	e2 57       	subi	r30, 0x72	; 114
    3ade:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae0:	80 81       	ld	r24, Z
    3ae2:	81 30       	cpi	r24, 0x01	; 1
    3ae4:	09 f0       	breq	.+2      	; 0x3ae8 <main+0x846>
    3ae6:	bb c0       	rjmp	.+374    	; 0x3c5e <main+0x9bc>
							{
								SPI_u8TransceiveSynch(&Local_ReceiveData,9);
    3ae8:	ce 01       	movw	r24, r28
    3aea:	81 57       	subi	r24, 0x71	; 113
    3aec:	9f 4f       	sbci	r25, 0xFF	; 255
    3aee:	69 e0       	ldi	r22, 0x09	; 9
    3af0:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <SPI_u8TransceiveSynch>
    3af4:	fe 01       	movw	r30, r28
    3af6:	e1 5a       	subi	r30, 0xA1	; 161
    3af8:	ff 4f       	sbci	r31, 0xFF	; 255
    3afa:	80 e0       	ldi	r24, 0x00	; 0
    3afc:	90 e0       	ldi	r25, 0x00	; 0
    3afe:	a0 e2       	ldi	r26, 0x20	; 32
    3b00:	b1 e4       	ldi	r27, 0x41	; 65
    3b02:	80 83       	st	Z, r24
    3b04:	91 83       	std	Z+1, r25	; 0x01
    3b06:	a2 83       	std	Z+2, r26	; 0x02
    3b08:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b0a:	8e 01       	movw	r16, r28
    3b0c:	05 5a       	subi	r16, 0xA5	; 165
    3b0e:	1f 4f       	sbci	r17, 0xFF	; 255
    3b10:	fe 01       	movw	r30, r28
    3b12:	e1 5a       	subi	r30, 0xA1	; 161
    3b14:	ff 4f       	sbci	r31, 0xFF	; 255
    3b16:	60 81       	ld	r22, Z
    3b18:	71 81       	ldd	r23, Z+1	; 0x01
    3b1a:	82 81       	ldd	r24, Z+2	; 0x02
    3b1c:	93 81       	ldd	r25, Z+3	; 0x03
    3b1e:	20 e0       	ldi	r18, 0x00	; 0
    3b20:	30 e0       	ldi	r19, 0x00	; 0
    3b22:	4a ef       	ldi	r20, 0xFA	; 250
    3b24:	54 e4       	ldi	r21, 0x44	; 68
    3b26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b2a:	dc 01       	movw	r26, r24
    3b2c:	cb 01       	movw	r24, r22
    3b2e:	f8 01       	movw	r30, r16
    3b30:	80 83       	st	Z, r24
    3b32:	91 83       	std	Z+1, r25	; 0x01
    3b34:	a2 83       	std	Z+2, r26	; 0x02
    3b36:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b38:	fe 01       	movw	r30, r28
    3b3a:	e5 5a       	subi	r30, 0xA5	; 165
    3b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b3e:	60 81       	ld	r22, Z
    3b40:	71 81       	ldd	r23, Z+1	; 0x01
    3b42:	82 81       	ldd	r24, Z+2	; 0x02
    3b44:	93 81       	ldd	r25, Z+3	; 0x03
    3b46:	20 e0       	ldi	r18, 0x00	; 0
    3b48:	30 e0       	ldi	r19, 0x00	; 0
    3b4a:	40 e8       	ldi	r20, 0x80	; 128
    3b4c:	5f e3       	ldi	r21, 0x3F	; 63
    3b4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b52:	88 23       	and	r24, r24
    3b54:	44 f4       	brge	.+16     	; 0x3b66 <main+0x8c4>
		__ticks = 1;
    3b56:	fe 01       	movw	r30, r28
    3b58:	e7 5a       	subi	r30, 0xA7	; 167
    3b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5c:	81 e0       	ldi	r24, 0x01	; 1
    3b5e:	90 e0       	ldi	r25, 0x00	; 0
    3b60:	91 83       	std	Z+1, r25	; 0x01
    3b62:	80 83       	st	Z, r24
    3b64:	64 c0       	rjmp	.+200    	; 0x3c2e <main+0x98c>
	else if (__tmp > 65535)
    3b66:	fe 01       	movw	r30, r28
    3b68:	e5 5a       	subi	r30, 0xA5	; 165
    3b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b6c:	60 81       	ld	r22, Z
    3b6e:	71 81       	ldd	r23, Z+1	; 0x01
    3b70:	82 81       	ldd	r24, Z+2	; 0x02
    3b72:	93 81       	ldd	r25, Z+3	; 0x03
    3b74:	20 e0       	ldi	r18, 0x00	; 0
    3b76:	3f ef       	ldi	r19, 0xFF	; 255
    3b78:	4f e7       	ldi	r20, 0x7F	; 127
    3b7a:	57 e4       	ldi	r21, 0x47	; 71
    3b7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b80:	18 16       	cp	r1, r24
    3b82:	0c f0       	brlt	.+2      	; 0x3b86 <main+0x8e4>
    3b84:	43 c0       	rjmp	.+134    	; 0x3c0c <main+0x96a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b86:	fe 01       	movw	r30, r28
    3b88:	e1 5a       	subi	r30, 0xA1	; 161
    3b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b8c:	60 81       	ld	r22, Z
    3b8e:	71 81       	ldd	r23, Z+1	; 0x01
    3b90:	82 81       	ldd	r24, Z+2	; 0x02
    3b92:	93 81       	ldd	r25, Z+3	; 0x03
    3b94:	20 e0       	ldi	r18, 0x00	; 0
    3b96:	30 e0       	ldi	r19, 0x00	; 0
    3b98:	40 e2       	ldi	r20, 0x20	; 32
    3b9a:	51 e4       	ldi	r21, 0x41	; 65
    3b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ba0:	dc 01       	movw	r26, r24
    3ba2:	cb 01       	movw	r24, r22
    3ba4:	8e 01       	movw	r16, r28
    3ba6:	07 5a       	subi	r16, 0xA7	; 167
    3ba8:	1f 4f       	sbci	r17, 0xFF	; 255
    3baa:	bc 01       	movw	r22, r24
    3bac:	cd 01       	movw	r24, r26
    3bae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bb2:	dc 01       	movw	r26, r24
    3bb4:	cb 01       	movw	r24, r22
    3bb6:	f8 01       	movw	r30, r16
    3bb8:	91 83       	std	Z+1, r25	; 0x01
    3bba:	80 83       	st	Z, r24
    3bbc:	1f c0       	rjmp	.+62     	; 0x3bfc <main+0x95a>
    3bbe:	fe 01       	movw	r30, r28
    3bc0:	e9 5a       	subi	r30, 0xA9	; 169
    3bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc4:	88 ec       	ldi	r24, 0xC8	; 200
    3bc6:	90 e0       	ldi	r25, 0x00	; 0
    3bc8:	91 83       	std	Z+1, r25	; 0x01
    3bca:	80 83       	st	Z, r24
    3bcc:	fe 01       	movw	r30, r28
    3bce:	e9 5a       	subi	r30, 0xA9	; 169
    3bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd2:	80 81       	ld	r24, Z
    3bd4:	91 81       	ldd	r25, Z+1	; 0x01
    3bd6:	01 97       	sbiw	r24, 0x01	; 1
    3bd8:	f1 f7       	brne	.-4      	; 0x3bd6 <main+0x934>
    3bda:	fe 01       	movw	r30, r28
    3bdc:	e9 5a       	subi	r30, 0xA9	; 169
    3bde:	ff 4f       	sbci	r31, 0xFF	; 255
    3be0:	91 83       	std	Z+1, r25	; 0x01
    3be2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3be4:	de 01       	movw	r26, r28
    3be6:	a7 5a       	subi	r26, 0xA7	; 167
    3be8:	bf 4f       	sbci	r27, 0xFF	; 255
    3bea:	fe 01       	movw	r30, r28
    3bec:	e7 5a       	subi	r30, 0xA7	; 167
    3bee:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf0:	80 81       	ld	r24, Z
    3bf2:	91 81       	ldd	r25, Z+1	; 0x01
    3bf4:	01 97       	sbiw	r24, 0x01	; 1
    3bf6:	11 96       	adiw	r26, 0x01	; 1
    3bf8:	9c 93       	st	X, r25
    3bfa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bfc:	fe 01       	movw	r30, r28
    3bfe:	e7 5a       	subi	r30, 0xA7	; 167
    3c00:	ff 4f       	sbci	r31, 0xFF	; 255
    3c02:	80 81       	ld	r24, Z
    3c04:	91 81       	ldd	r25, Z+1	; 0x01
    3c06:	00 97       	sbiw	r24, 0x00	; 0
    3c08:	d1 f6       	brne	.-76     	; 0x3bbe <main+0x91c>
    3c0a:	30 c3       	rjmp	.+1632   	; 0x426c <main+0xfca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c0c:	8e 01       	movw	r16, r28
    3c0e:	07 5a       	subi	r16, 0xA7	; 167
    3c10:	1f 4f       	sbci	r17, 0xFF	; 255
    3c12:	fe 01       	movw	r30, r28
    3c14:	e5 5a       	subi	r30, 0xA5	; 165
    3c16:	ff 4f       	sbci	r31, 0xFF	; 255
    3c18:	60 81       	ld	r22, Z
    3c1a:	71 81       	ldd	r23, Z+1	; 0x01
    3c1c:	82 81       	ldd	r24, Z+2	; 0x02
    3c1e:	93 81       	ldd	r25, Z+3	; 0x03
    3c20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c24:	dc 01       	movw	r26, r24
    3c26:	cb 01       	movw	r24, r22
    3c28:	f8 01       	movw	r30, r16
    3c2a:	91 83       	std	Z+1, r25	; 0x01
    3c2c:	80 83       	st	Z, r24
    3c2e:	de 01       	movw	r26, r28
    3c30:	ab 5a       	subi	r26, 0xAB	; 171
    3c32:	bf 4f       	sbci	r27, 0xFF	; 255
    3c34:	fe 01       	movw	r30, r28
    3c36:	e7 5a       	subi	r30, 0xA7	; 167
    3c38:	ff 4f       	sbci	r31, 0xFF	; 255
    3c3a:	80 81       	ld	r24, Z
    3c3c:	91 81       	ldd	r25, Z+1	; 0x01
    3c3e:	11 96       	adiw	r26, 0x01	; 1
    3c40:	9c 93       	st	X, r25
    3c42:	8e 93       	st	-X, r24
    3c44:	fe 01       	movw	r30, r28
    3c46:	eb 5a       	subi	r30, 0xAB	; 171
    3c48:	ff 4f       	sbci	r31, 0xFF	; 255
    3c4a:	80 81       	ld	r24, Z
    3c4c:	91 81       	ldd	r25, Z+1	; 0x01
    3c4e:	01 97       	sbiw	r24, 0x01	; 1
    3c50:	f1 f7       	brne	.-4      	; 0x3c4e <main+0x9ac>
    3c52:	fe 01       	movw	r30, r28
    3c54:	eb 5a       	subi	r30, 0xAB	; 171
    3c56:	ff 4f       	sbci	r31, 0xFF	; 255
    3c58:	91 83       	std	Z+1, r25	; 0x01
    3c5a:	80 83       	st	Z, r24
    3c5c:	07 c3       	rjmp	.+1550   	; 0x426c <main+0xfca>
								_delay_ms(10);
							}
							else if(Local_u8Key == 2)
    3c5e:	fe 01       	movw	r30, r28
    3c60:	e2 57       	subi	r30, 0x72	; 114
    3c62:	ff 4f       	sbci	r31, 0xFF	; 255
    3c64:	80 81       	ld	r24, Z
    3c66:	82 30       	cpi	r24, 0x02	; 2
    3c68:	09 f0       	breq	.+2      	; 0x3c6c <main+0x9ca>
    3c6a:	bb c0       	rjmp	.+374    	; 0x3de2 <main+0xb40>
							{
								SPI_u8TransceiveSynch(&Local_ReceiveData,8);
    3c6c:	ce 01       	movw	r24, r28
    3c6e:	81 57       	subi	r24, 0x71	; 113
    3c70:	9f 4f       	sbci	r25, 0xFF	; 255
    3c72:	68 e0       	ldi	r22, 0x08	; 8
    3c74:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <SPI_u8TransceiveSynch>
    3c78:	fe 01       	movw	r30, r28
    3c7a:	ef 5a       	subi	r30, 0xAF	; 175
    3c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c7e:	80 e0       	ldi	r24, 0x00	; 0
    3c80:	90 e0       	ldi	r25, 0x00	; 0
    3c82:	a0 e2       	ldi	r26, 0x20	; 32
    3c84:	b1 e4       	ldi	r27, 0x41	; 65
    3c86:	80 83       	st	Z, r24
    3c88:	91 83       	std	Z+1, r25	; 0x01
    3c8a:	a2 83       	std	Z+2, r26	; 0x02
    3c8c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c8e:	8e 01       	movw	r16, r28
    3c90:	03 5b       	subi	r16, 0xB3	; 179
    3c92:	1f 4f       	sbci	r17, 0xFF	; 255
    3c94:	fe 01       	movw	r30, r28
    3c96:	ef 5a       	subi	r30, 0xAF	; 175
    3c98:	ff 4f       	sbci	r31, 0xFF	; 255
    3c9a:	60 81       	ld	r22, Z
    3c9c:	71 81       	ldd	r23, Z+1	; 0x01
    3c9e:	82 81       	ldd	r24, Z+2	; 0x02
    3ca0:	93 81       	ldd	r25, Z+3	; 0x03
    3ca2:	20 e0       	ldi	r18, 0x00	; 0
    3ca4:	30 e0       	ldi	r19, 0x00	; 0
    3ca6:	4a ef       	ldi	r20, 0xFA	; 250
    3ca8:	54 e4       	ldi	r21, 0x44	; 68
    3caa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cae:	dc 01       	movw	r26, r24
    3cb0:	cb 01       	movw	r24, r22
    3cb2:	f8 01       	movw	r30, r16
    3cb4:	80 83       	st	Z, r24
    3cb6:	91 83       	std	Z+1, r25	; 0x01
    3cb8:	a2 83       	std	Z+2, r26	; 0x02
    3cba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3cbc:	fe 01       	movw	r30, r28
    3cbe:	e3 5b       	subi	r30, 0xB3	; 179
    3cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc2:	60 81       	ld	r22, Z
    3cc4:	71 81       	ldd	r23, Z+1	; 0x01
    3cc6:	82 81       	ldd	r24, Z+2	; 0x02
    3cc8:	93 81       	ldd	r25, Z+3	; 0x03
    3cca:	20 e0       	ldi	r18, 0x00	; 0
    3ccc:	30 e0       	ldi	r19, 0x00	; 0
    3cce:	40 e8       	ldi	r20, 0x80	; 128
    3cd0:	5f e3       	ldi	r21, 0x3F	; 63
    3cd2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3cd6:	88 23       	and	r24, r24
    3cd8:	44 f4       	brge	.+16     	; 0x3cea <main+0xa48>
		__ticks = 1;
    3cda:	fe 01       	movw	r30, r28
    3cdc:	e5 5b       	subi	r30, 0xB5	; 181
    3cde:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce0:	81 e0       	ldi	r24, 0x01	; 1
    3ce2:	90 e0       	ldi	r25, 0x00	; 0
    3ce4:	91 83       	std	Z+1, r25	; 0x01
    3ce6:	80 83       	st	Z, r24
    3ce8:	64 c0       	rjmp	.+200    	; 0x3db2 <main+0xb10>
	else if (__tmp > 65535)
    3cea:	fe 01       	movw	r30, r28
    3cec:	e3 5b       	subi	r30, 0xB3	; 179
    3cee:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf0:	60 81       	ld	r22, Z
    3cf2:	71 81       	ldd	r23, Z+1	; 0x01
    3cf4:	82 81       	ldd	r24, Z+2	; 0x02
    3cf6:	93 81       	ldd	r25, Z+3	; 0x03
    3cf8:	20 e0       	ldi	r18, 0x00	; 0
    3cfa:	3f ef       	ldi	r19, 0xFF	; 255
    3cfc:	4f e7       	ldi	r20, 0x7F	; 127
    3cfe:	57 e4       	ldi	r21, 0x47	; 71
    3d00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d04:	18 16       	cp	r1, r24
    3d06:	0c f0       	brlt	.+2      	; 0x3d0a <main+0xa68>
    3d08:	43 c0       	rjmp	.+134    	; 0x3d90 <main+0xaee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d0a:	fe 01       	movw	r30, r28
    3d0c:	ef 5a       	subi	r30, 0xAF	; 175
    3d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d10:	60 81       	ld	r22, Z
    3d12:	71 81       	ldd	r23, Z+1	; 0x01
    3d14:	82 81       	ldd	r24, Z+2	; 0x02
    3d16:	93 81       	ldd	r25, Z+3	; 0x03
    3d18:	20 e0       	ldi	r18, 0x00	; 0
    3d1a:	30 e0       	ldi	r19, 0x00	; 0
    3d1c:	40 e2       	ldi	r20, 0x20	; 32
    3d1e:	51 e4       	ldi	r21, 0x41	; 65
    3d20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d24:	dc 01       	movw	r26, r24
    3d26:	cb 01       	movw	r24, r22
    3d28:	8e 01       	movw	r16, r28
    3d2a:	05 5b       	subi	r16, 0xB5	; 181
    3d2c:	1f 4f       	sbci	r17, 0xFF	; 255
    3d2e:	bc 01       	movw	r22, r24
    3d30:	cd 01       	movw	r24, r26
    3d32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d36:	dc 01       	movw	r26, r24
    3d38:	cb 01       	movw	r24, r22
    3d3a:	f8 01       	movw	r30, r16
    3d3c:	91 83       	std	Z+1, r25	; 0x01
    3d3e:	80 83       	st	Z, r24
    3d40:	1f c0       	rjmp	.+62     	; 0x3d80 <main+0xade>
    3d42:	fe 01       	movw	r30, r28
    3d44:	e7 5b       	subi	r30, 0xB7	; 183
    3d46:	ff 4f       	sbci	r31, 0xFF	; 255
    3d48:	88 ec       	ldi	r24, 0xC8	; 200
    3d4a:	90 e0       	ldi	r25, 0x00	; 0
    3d4c:	91 83       	std	Z+1, r25	; 0x01
    3d4e:	80 83       	st	Z, r24
    3d50:	fe 01       	movw	r30, r28
    3d52:	e7 5b       	subi	r30, 0xB7	; 183
    3d54:	ff 4f       	sbci	r31, 0xFF	; 255
    3d56:	80 81       	ld	r24, Z
    3d58:	91 81       	ldd	r25, Z+1	; 0x01
    3d5a:	01 97       	sbiw	r24, 0x01	; 1
    3d5c:	f1 f7       	brne	.-4      	; 0x3d5a <main+0xab8>
    3d5e:	fe 01       	movw	r30, r28
    3d60:	e7 5b       	subi	r30, 0xB7	; 183
    3d62:	ff 4f       	sbci	r31, 0xFF	; 255
    3d64:	91 83       	std	Z+1, r25	; 0x01
    3d66:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d68:	de 01       	movw	r26, r28
    3d6a:	a5 5b       	subi	r26, 0xB5	; 181
    3d6c:	bf 4f       	sbci	r27, 0xFF	; 255
    3d6e:	fe 01       	movw	r30, r28
    3d70:	e5 5b       	subi	r30, 0xB5	; 181
    3d72:	ff 4f       	sbci	r31, 0xFF	; 255
    3d74:	80 81       	ld	r24, Z
    3d76:	91 81       	ldd	r25, Z+1	; 0x01
    3d78:	01 97       	sbiw	r24, 0x01	; 1
    3d7a:	11 96       	adiw	r26, 0x01	; 1
    3d7c:	9c 93       	st	X, r25
    3d7e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d80:	fe 01       	movw	r30, r28
    3d82:	e5 5b       	subi	r30, 0xB5	; 181
    3d84:	ff 4f       	sbci	r31, 0xFF	; 255
    3d86:	80 81       	ld	r24, Z
    3d88:	91 81       	ldd	r25, Z+1	; 0x01
    3d8a:	00 97       	sbiw	r24, 0x00	; 0
    3d8c:	d1 f6       	brne	.-76     	; 0x3d42 <main+0xaa0>
    3d8e:	6e c2       	rjmp	.+1244   	; 0x426c <main+0xfca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d90:	8e 01       	movw	r16, r28
    3d92:	05 5b       	subi	r16, 0xB5	; 181
    3d94:	1f 4f       	sbci	r17, 0xFF	; 255
    3d96:	fe 01       	movw	r30, r28
    3d98:	e3 5b       	subi	r30, 0xB3	; 179
    3d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d9c:	60 81       	ld	r22, Z
    3d9e:	71 81       	ldd	r23, Z+1	; 0x01
    3da0:	82 81       	ldd	r24, Z+2	; 0x02
    3da2:	93 81       	ldd	r25, Z+3	; 0x03
    3da4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3da8:	dc 01       	movw	r26, r24
    3daa:	cb 01       	movw	r24, r22
    3dac:	f8 01       	movw	r30, r16
    3dae:	91 83       	std	Z+1, r25	; 0x01
    3db0:	80 83       	st	Z, r24
    3db2:	de 01       	movw	r26, r28
    3db4:	a9 5b       	subi	r26, 0xB9	; 185
    3db6:	bf 4f       	sbci	r27, 0xFF	; 255
    3db8:	fe 01       	movw	r30, r28
    3dba:	e5 5b       	subi	r30, 0xB5	; 181
    3dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    3dbe:	80 81       	ld	r24, Z
    3dc0:	91 81       	ldd	r25, Z+1	; 0x01
    3dc2:	11 96       	adiw	r26, 0x01	; 1
    3dc4:	9c 93       	st	X, r25
    3dc6:	8e 93       	st	-X, r24
    3dc8:	fe 01       	movw	r30, r28
    3dca:	e9 5b       	subi	r30, 0xB9	; 185
    3dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    3dce:	80 81       	ld	r24, Z
    3dd0:	91 81       	ldd	r25, Z+1	; 0x01
    3dd2:	01 97       	sbiw	r24, 0x01	; 1
    3dd4:	f1 f7       	brne	.-4      	; 0x3dd2 <main+0xb30>
    3dd6:	fe 01       	movw	r30, r28
    3dd8:	e9 5b       	subi	r30, 0xB9	; 185
    3dda:	ff 4f       	sbci	r31, 0xFF	; 255
    3ddc:	91 83       	std	Z+1, r25	; 0x01
    3dde:	80 83       	st	Z, r24
    3de0:	45 c2       	rjmp	.+1162   	; 0x426c <main+0xfca>
								_delay_ms(10);
							}
							else if (Local_u8Key == 3)
    3de2:	fe 01       	movw	r30, r28
    3de4:	e2 57       	subi	r30, 0x72	; 114
    3de6:	ff 4f       	sbci	r31, 0xFF	; 255
    3de8:	80 81       	ld	r24, Z
    3dea:	83 30       	cpi	r24, 0x03	; 3
    3dec:	09 f0       	breq	.+2      	; 0x3df0 <main+0xb4e>
    3dee:	c4 c1       	rjmp	.+904    	; 0x4178 <main+0xed6>
    3df0:	bb c1       	rjmp	.+886    	; 0x4168 <main+0xec6>
							{
								while (Local_u8Key != 0)
								{
									lable4:CLCD_voidSendCommand(1);
    3df2:	81 e0       	ldi	r24, 0x01	; 1
    3df4:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidSendCommand>
									CLCD_voidGoToXY(0,0);
    3df8:	80 e0       	ldi	r24, 0x00	; 0
    3dfa:	60 e0       	ldi	r22, 0x00	; 0
    3dfc:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <CLCD_voidGoToXY>
									CLCD_voidSendString("1-Music ON");
    3e00:	8f ed       	ldi	r24, 0xDF	; 223
    3e02:	90 e0       	ldi	r25, 0x00	; 0
    3e04:	0e 94 b0 09 	call	0x1360	; 0x1360 <CLCD_voidSendString>
									CLCD_voidGoToXY(1,0);
    3e08:	81 e0       	ldi	r24, 0x01	; 1
    3e0a:	60 e0       	ldi	r22, 0x00	; 0
    3e0c:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <CLCD_voidGoToXY>
									CLCD_voidSendString("2-Music OFF");
    3e10:	8a ee       	ldi	r24, 0xEA	; 234
    3e12:	90 e0       	ldi	r25, 0x00	; 0
    3e14:	0e 94 b0 09 	call	0x1360	; 0x1360 <CLCD_voidSendString>
									CLCD_voidGoToXY(1,11);
    3e18:	81 e0       	ldi	r24, 0x01	; 1
    3e1a:	6b e0       	ldi	r22, 0x0B	; 11
    3e1c:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <CLCD_voidGoToXY>
									CLCD_voidSendString("0-ret");
    3e20:	8e e9       	ldi	r24, 0x9E	; 158
    3e22:	90 e0       	ldi	r25, 0x00	; 0
    3e24:	0e 94 b0 09 	call	0x1360	; 0x1360 <CLCD_voidSendString>

									do
									{
										Local_u8Key=KPD_u8GetPressedKey();
    3e28:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <KPD_u8GetPressedKey>
    3e2c:	fe 01       	movw	r30, r28
    3e2e:	e2 57       	subi	r30, 0x72	; 114
    3e30:	ff 4f       	sbci	r31, 0xFF	; 255
    3e32:	80 83       	st	Z, r24
									}while(Local_u8Key==0xff);
    3e34:	fe 01       	movw	r30, r28
    3e36:	e2 57       	subi	r30, 0x72	; 114
    3e38:	ff 4f       	sbci	r31, 0xFF	; 255
    3e3a:	80 81       	ld	r24, Z
    3e3c:	8f 3f       	cpi	r24, 0xFF	; 255
    3e3e:	a1 f3       	breq	.-24     	; 0x3e28 <main+0xb86>

									if(Local_u8Key == 0)
    3e40:	fe 01       	movw	r30, r28
    3e42:	e2 57       	subi	r30, 0x72	; 114
    3e44:	ff 4f       	sbci	r31, 0xFF	; 255
    3e46:	80 81       	ld	r24, Z
    3e48:	88 23       	and	r24, r24
    3e4a:	09 f4       	brne	.+2      	; 0x3e4e <main+0xbac>
    3e4c:	10 ce       	rjmp	.-992    	; 0x3a6e <main+0x7cc>
									{
										goto lable3;
									}
									else if(Local_u8Key == 1)
    3e4e:	fe 01       	movw	r30, r28
    3e50:	e2 57       	subi	r30, 0x72	; 114
    3e52:	ff 4f       	sbci	r31, 0xFF	; 255
    3e54:	80 81       	ld	r24, Z
    3e56:	81 30       	cpi	r24, 0x01	; 1
    3e58:	09 f0       	breq	.+2      	; 0x3e5c <main+0xbba>
    3e5a:	8c c0       	rjmp	.+280    	; 0x3f74 <main+0xcd2>
									{
										SPI_u8TransceiveSynch(&Local_ReceiveData,10);
    3e5c:	ce 01       	movw	r24, r28
    3e5e:	81 57       	subi	r24, 0x71	; 113
    3e60:	9f 4f       	sbci	r25, 0xFF	; 255
    3e62:	6a e0       	ldi	r22, 0x0A	; 10
    3e64:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <SPI_u8TransceiveSynch>
    3e68:	fe 01       	movw	r30, r28
    3e6a:	ed 5b       	subi	r30, 0xBD	; 189
    3e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e6e:	80 e0       	ldi	r24, 0x00	; 0
    3e70:	90 e0       	ldi	r25, 0x00	; 0
    3e72:	a0 e2       	ldi	r26, 0x20	; 32
    3e74:	b1 e4       	ldi	r27, 0x41	; 65
    3e76:	80 83       	st	Z, r24
    3e78:	91 83       	std	Z+1, r25	; 0x01
    3e7a:	a2 83       	std	Z+2, r26	; 0x02
    3e7c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e7e:	8e 01       	movw	r16, r28
    3e80:	01 5c       	subi	r16, 0xC1	; 193
    3e82:	1f 4f       	sbci	r17, 0xFF	; 255
    3e84:	fe 01       	movw	r30, r28
    3e86:	ed 5b       	subi	r30, 0xBD	; 189
    3e88:	ff 4f       	sbci	r31, 0xFF	; 255
    3e8a:	60 81       	ld	r22, Z
    3e8c:	71 81       	ldd	r23, Z+1	; 0x01
    3e8e:	82 81       	ldd	r24, Z+2	; 0x02
    3e90:	93 81       	ldd	r25, Z+3	; 0x03
    3e92:	20 e0       	ldi	r18, 0x00	; 0
    3e94:	30 e0       	ldi	r19, 0x00	; 0
    3e96:	4a ef       	ldi	r20, 0xFA	; 250
    3e98:	54 e4       	ldi	r21, 0x44	; 68
    3e9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e9e:	dc 01       	movw	r26, r24
    3ea0:	cb 01       	movw	r24, r22
    3ea2:	f8 01       	movw	r30, r16
    3ea4:	80 83       	st	Z, r24
    3ea6:	91 83       	std	Z+1, r25	; 0x01
    3ea8:	a2 83       	std	Z+2, r26	; 0x02
    3eaa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3eac:	fe 01       	movw	r30, r28
    3eae:	ff 96       	adiw	r30, 0x3f	; 63
    3eb0:	60 81       	ld	r22, Z
    3eb2:	71 81       	ldd	r23, Z+1	; 0x01
    3eb4:	82 81       	ldd	r24, Z+2	; 0x02
    3eb6:	93 81       	ldd	r25, Z+3	; 0x03
    3eb8:	20 e0       	ldi	r18, 0x00	; 0
    3eba:	30 e0       	ldi	r19, 0x00	; 0
    3ebc:	40 e8       	ldi	r20, 0x80	; 128
    3ebe:	5f e3       	ldi	r21, 0x3F	; 63
    3ec0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ec4:	88 23       	and	r24, r24
    3ec6:	2c f4       	brge	.+10     	; 0x3ed2 <main+0xc30>
		__ticks = 1;
    3ec8:	81 e0       	ldi	r24, 0x01	; 1
    3eca:	90 e0       	ldi	r25, 0x00	; 0
    3ecc:	9e af       	std	Y+62, r25	; 0x3e
    3ece:	8d af       	std	Y+61, r24	; 0x3d
    3ed0:	46 c0       	rjmp	.+140    	; 0x3f5e <main+0xcbc>
	else if (__tmp > 65535)
    3ed2:	fe 01       	movw	r30, r28
    3ed4:	ff 96       	adiw	r30, 0x3f	; 63
    3ed6:	60 81       	ld	r22, Z
    3ed8:	71 81       	ldd	r23, Z+1	; 0x01
    3eda:	82 81       	ldd	r24, Z+2	; 0x02
    3edc:	93 81       	ldd	r25, Z+3	; 0x03
    3ede:	20 e0       	ldi	r18, 0x00	; 0
    3ee0:	3f ef       	ldi	r19, 0xFF	; 255
    3ee2:	4f e7       	ldi	r20, 0x7F	; 127
    3ee4:	57 e4       	ldi	r21, 0x47	; 71
    3ee6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3eea:	18 16       	cp	r1, r24
    3eec:	64 f5       	brge	.+88     	; 0x3f46 <main+0xca4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3eee:	fe 01       	movw	r30, r28
    3ef0:	ed 5b       	subi	r30, 0xBD	; 189
    3ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef4:	60 81       	ld	r22, Z
    3ef6:	71 81       	ldd	r23, Z+1	; 0x01
    3ef8:	82 81       	ldd	r24, Z+2	; 0x02
    3efa:	93 81       	ldd	r25, Z+3	; 0x03
    3efc:	20 e0       	ldi	r18, 0x00	; 0
    3efe:	30 e0       	ldi	r19, 0x00	; 0
    3f00:	40 e2       	ldi	r20, 0x20	; 32
    3f02:	51 e4       	ldi	r21, 0x41	; 65
    3f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f08:	dc 01       	movw	r26, r24
    3f0a:	cb 01       	movw	r24, r22
    3f0c:	bc 01       	movw	r22, r24
    3f0e:	cd 01       	movw	r24, r26
    3f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f14:	dc 01       	movw	r26, r24
    3f16:	cb 01       	movw	r24, r22
    3f18:	9e af       	std	Y+62, r25	; 0x3e
    3f1a:	8d af       	std	Y+61, r24	; 0x3d
    3f1c:	0f c0       	rjmp	.+30     	; 0x3f3c <main+0xc9a>
    3f1e:	88 ec       	ldi	r24, 0xC8	; 200
    3f20:	90 e0       	ldi	r25, 0x00	; 0
    3f22:	9c af       	std	Y+60, r25	; 0x3c
    3f24:	8b af       	std	Y+59, r24	; 0x3b
    3f26:	8b ad       	ldd	r24, Y+59	; 0x3b
    3f28:	9c ad       	ldd	r25, Y+60	; 0x3c
    3f2a:	01 97       	sbiw	r24, 0x01	; 1
    3f2c:	f1 f7       	brne	.-4      	; 0x3f2a <main+0xc88>
    3f2e:	9c af       	std	Y+60, r25	; 0x3c
    3f30:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f32:	8d ad       	ldd	r24, Y+61	; 0x3d
    3f34:	9e ad       	ldd	r25, Y+62	; 0x3e
    3f36:	01 97       	sbiw	r24, 0x01	; 1
    3f38:	9e af       	std	Y+62, r25	; 0x3e
    3f3a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f3c:	8d ad       	ldd	r24, Y+61	; 0x3d
    3f3e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3f40:	00 97       	sbiw	r24, 0x00	; 0
    3f42:	69 f7       	brne	.-38     	; 0x3f1e <main+0xc7c>
    3f44:	11 c1       	rjmp	.+546    	; 0x4168 <main+0xec6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f46:	fe 01       	movw	r30, r28
    3f48:	ff 96       	adiw	r30, 0x3f	; 63
    3f4a:	60 81       	ld	r22, Z
    3f4c:	71 81       	ldd	r23, Z+1	; 0x01
    3f4e:	82 81       	ldd	r24, Z+2	; 0x02
    3f50:	93 81       	ldd	r25, Z+3	; 0x03
    3f52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f56:	dc 01       	movw	r26, r24
    3f58:	cb 01       	movw	r24, r22
    3f5a:	9e af       	std	Y+62, r25	; 0x3e
    3f5c:	8d af       	std	Y+61, r24	; 0x3d
    3f5e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3f60:	9e ad       	ldd	r25, Y+62	; 0x3e
    3f62:	9a af       	std	Y+58, r25	; 0x3a
    3f64:	89 af       	std	Y+57, r24	; 0x39
    3f66:	89 ad       	ldd	r24, Y+57	; 0x39
    3f68:	9a ad       	ldd	r25, Y+58	; 0x3a
    3f6a:	01 97       	sbiw	r24, 0x01	; 1
    3f6c:	f1 f7       	brne	.-4      	; 0x3f6a <main+0xcc8>
    3f6e:	9a af       	std	Y+58, r25	; 0x3a
    3f70:	89 af       	std	Y+57, r24	; 0x39
    3f72:	fa c0       	rjmp	.+500    	; 0x4168 <main+0xec6>
										_delay_ms(10);
									}
									else if(Local_u8Key == 2)
    3f74:	fe 01       	movw	r30, r28
    3f76:	e2 57       	subi	r30, 0x72	; 114
    3f78:	ff 4f       	sbci	r31, 0xFF	; 255
    3f7a:	80 81       	ld	r24, Z
    3f7c:	82 30       	cpi	r24, 0x02	; 2
    3f7e:	09 f0       	breq	.+2      	; 0x3f82 <main+0xce0>
    3f80:	79 c0       	rjmp	.+242    	; 0x4074 <main+0xdd2>
									{
										SPI_u8TransceiveSynch(&Local_ReceiveData,11);
    3f82:	ce 01       	movw	r24, r28
    3f84:	81 57       	subi	r24, 0x71	; 113
    3f86:	9f 4f       	sbci	r25, 0xFF	; 255
    3f88:	6b e0       	ldi	r22, 0x0B	; 11
    3f8a:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <SPI_u8TransceiveSynch>
    3f8e:	80 e0       	ldi	r24, 0x00	; 0
    3f90:	90 e0       	ldi	r25, 0x00	; 0
    3f92:	a0 e2       	ldi	r26, 0x20	; 32
    3f94:	b1 e4       	ldi	r27, 0x41	; 65
    3f96:	8d ab       	std	Y+53, r24	; 0x35
    3f98:	9e ab       	std	Y+54, r25	; 0x36
    3f9a:	af ab       	std	Y+55, r26	; 0x37
    3f9c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f9e:	6d a9       	ldd	r22, Y+53	; 0x35
    3fa0:	7e a9       	ldd	r23, Y+54	; 0x36
    3fa2:	8f a9       	ldd	r24, Y+55	; 0x37
    3fa4:	98 ad       	ldd	r25, Y+56	; 0x38
    3fa6:	20 e0       	ldi	r18, 0x00	; 0
    3fa8:	30 e0       	ldi	r19, 0x00	; 0
    3faa:	4a ef       	ldi	r20, 0xFA	; 250
    3fac:	54 e4       	ldi	r21, 0x44	; 68
    3fae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fb2:	dc 01       	movw	r26, r24
    3fb4:	cb 01       	movw	r24, r22
    3fb6:	89 ab       	std	Y+49, r24	; 0x31
    3fb8:	9a ab       	std	Y+50, r25	; 0x32
    3fba:	ab ab       	std	Y+51, r26	; 0x33
    3fbc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3fbe:	69 a9       	ldd	r22, Y+49	; 0x31
    3fc0:	7a a9       	ldd	r23, Y+50	; 0x32
    3fc2:	8b a9       	ldd	r24, Y+51	; 0x33
    3fc4:	9c a9       	ldd	r25, Y+52	; 0x34
    3fc6:	20 e0       	ldi	r18, 0x00	; 0
    3fc8:	30 e0       	ldi	r19, 0x00	; 0
    3fca:	40 e8       	ldi	r20, 0x80	; 128
    3fcc:	5f e3       	ldi	r21, 0x3F	; 63
    3fce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3fd2:	88 23       	and	r24, r24
    3fd4:	2c f4       	brge	.+10     	; 0x3fe0 <main+0xd3e>
		__ticks = 1;
    3fd6:	81 e0       	ldi	r24, 0x01	; 1
    3fd8:	90 e0       	ldi	r25, 0x00	; 0
    3fda:	98 ab       	std	Y+48, r25	; 0x30
    3fdc:	8f a7       	std	Y+47, r24	; 0x2f
    3fde:	3f c0       	rjmp	.+126    	; 0x405e <main+0xdbc>
	else if (__tmp > 65535)
    3fe0:	69 a9       	ldd	r22, Y+49	; 0x31
    3fe2:	7a a9       	ldd	r23, Y+50	; 0x32
    3fe4:	8b a9       	ldd	r24, Y+51	; 0x33
    3fe6:	9c a9       	ldd	r25, Y+52	; 0x34
    3fe8:	20 e0       	ldi	r18, 0x00	; 0
    3fea:	3f ef       	ldi	r19, 0xFF	; 255
    3fec:	4f e7       	ldi	r20, 0x7F	; 127
    3fee:	57 e4       	ldi	r21, 0x47	; 71
    3ff0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ff4:	18 16       	cp	r1, r24
    3ff6:	4c f5       	brge	.+82     	; 0x404a <main+0xda8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ff8:	6d a9       	ldd	r22, Y+53	; 0x35
    3ffa:	7e a9       	ldd	r23, Y+54	; 0x36
    3ffc:	8f a9       	ldd	r24, Y+55	; 0x37
    3ffe:	98 ad       	ldd	r25, Y+56	; 0x38
    4000:	20 e0       	ldi	r18, 0x00	; 0
    4002:	30 e0       	ldi	r19, 0x00	; 0
    4004:	40 e2       	ldi	r20, 0x20	; 32
    4006:	51 e4       	ldi	r21, 0x41	; 65
    4008:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    400c:	dc 01       	movw	r26, r24
    400e:	cb 01       	movw	r24, r22
    4010:	bc 01       	movw	r22, r24
    4012:	cd 01       	movw	r24, r26
    4014:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4018:	dc 01       	movw	r26, r24
    401a:	cb 01       	movw	r24, r22
    401c:	98 ab       	std	Y+48, r25	; 0x30
    401e:	8f a7       	std	Y+47, r24	; 0x2f
    4020:	0f c0       	rjmp	.+30     	; 0x4040 <main+0xd9e>
    4022:	88 ec       	ldi	r24, 0xC8	; 200
    4024:	90 e0       	ldi	r25, 0x00	; 0
    4026:	9e a7       	std	Y+46, r25	; 0x2e
    4028:	8d a7       	std	Y+45, r24	; 0x2d
    402a:	8d a5       	ldd	r24, Y+45	; 0x2d
    402c:	9e a5       	ldd	r25, Y+46	; 0x2e
    402e:	01 97       	sbiw	r24, 0x01	; 1
    4030:	f1 f7       	brne	.-4      	; 0x402e <main+0xd8c>
    4032:	9e a7       	std	Y+46, r25	; 0x2e
    4034:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4036:	8f a5       	ldd	r24, Y+47	; 0x2f
    4038:	98 a9       	ldd	r25, Y+48	; 0x30
    403a:	01 97       	sbiw	r24, 0x01	; 1
    403c:	98 ab       	std	Y+48, r25	; 0x30
    403e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4040:	8f a5       	ldd	r24, Y+47	; 0x2f
    4042:	98 a9       	ldd	r25, Y+48	; 0x30
    4044:	00 97       	sbiw	r24, 0x00	; 0
    4046:	69 f7       	brne	.-38     	; 0x4022 <main+0xd80>
    4048:	8f c0       	rjmp	.+286    	; 0x4168 <main+0xec6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    404a:	69 a9       	ldd	r22, Y+49	; 0x31
    404c:	7a a9       	ldd	r23, Y+50	; 0x32
    404e:	8b a9       	ldd	r24, Y+51	; 0x33
    4050:	9c a9       	ldd	r25, Y+52	; 0x34
    4052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4056:	dc 01       	movw	r26, r24
    4058:	cb 01       	movw	r24, r22
    405a:	98 ab       	std	Y+48, r25	; 0x30
    405c:	8f a7       	std	Y+47, r24	; 0x2f
    405e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4060:	98 a9       	ldd	r25, Y+48	; 0x30
    4062:	9c a7       	std	Y+44, r25	; 0x2c
    4064:	8b a7       	std	Y+43, r24	; 0x2b
    4066:	8b a5       	ldd	r24, Y+43	; 0x2b
    4068:	9c a5       	ldd	r25, Y+44	; 0x2c
    406a:	01 97       	sbiw	r24, 0x01	; 1
    406c:	f1 f7       	brne	.-4      	; 0x406a <main+0xdc8>
    406e:	9c a7       	std	Y+44, r25	; 0x2c
    4070:	8b a7       	std	Y+43, r24	; 0x2b
    4072:	7a c0       	rjmp	.+244    	; 0x4168 <main+0xec6>
										_delay_ms(10);
									}
									else
									{
										CLCD_voidSendCommand(1);
    4074:	81 e0       	ldi	r24, 0x01	; 1
    4076:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidSendCommand>
										CLCD_voidSendString("Wrong Choice");
    407a:	86 ef       	ldi	r24, 0xF6	; 246
    407c:	90 e0       	ldi	r25, 0x00	; 0
    407e:	0e 94 b0 09 	call	0x1360	; 0x1360 <CLCD_voidSendString>
    4082:	80 e0       	ldi	r24, 0x00	; 0
    4084:	90 e0       	ldi	r25, 0x00	; 0
    4086:	aa ef       	ldi	r26, 0xFA	; 250
    4088:	b3 e4       	ldi	r27, 0x43	; 67
    408a:	8f a3       	std	Y+39, r24	; 0x27
    408c:	98 a7       	std	Y+40, r25	; 0x28
    408e:	a9 a7       	std	Y+41, r26	; 0x29
    4090:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4092:	6f a1       	ldd	r22, Y+39	; 0x27
    4094:	78 a5       	ldd	r23, Y+40	; 0x28
    4096:	89 a5       	ldd	r24, Y+41	; 0x29
    4098:	9a a5       	ldd	r25, Y+42	; 0x2a
    409a:	20 e0       	ldi	r18, 0x00	; 0
    409c:	30 e0       	ldi	r19, 0x00	; 0
    409e:	4a ef       	ldi	r20, 0xFA	; 250
    40a0:	54 e4       	ldi	r21, 0x44	; 68
    40a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40a6:	dc 01       	movw	r26, r24
    40a8:	cb 01       	movw	r24, r22
    40aa:	8b a3       	std	Y+35, r24	; 0x23
    40ac:	9c a3       	std	Y+36, r25	; 0x24
    40ae:	ad a3       	std	Y+37, r26	; 0x25
    40b0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    40b2:	6b a1       	ldd	r22, Y+35	; 0x23
    40b4:	7c a1       	ldd	r23, Y+36	; 0x24
    40b6:	8d a1       	ldd	r24, Y+37	; 0x25
    40b8:	9e a1       	ldd	r25, Y+38	; 0x26
    40ba:	20 e0       	ldi	r18, 0x00	; 0
    40bc:	30 e0       	ldi	r19, 0x00	; 0
    40be:	40 e8       	ldi	r20, 0x80	; 128
    40c0:	5f e3       	ldi	r21, 0x3F	; 63
    40c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    40c6:	88 23       	and	r24, r24
    40c8:	2c f4       	brge	.+10     	; 0x40d4 <main+0xe32>
		__ticks = 1;
    40ca:	81 e0       	ldi	r24, 0x01	; 1
    40cc:	90 e0       	ldi	r25, 0x00	; 0
    40ce:	9a a3       	std	Y+34, r25	; 0x22
    40d0:	89 a3       	std	Y+33, r24	; 0x21
    40d2:	3f c0       	rjmp	.+126    	; 0x4152 <main+0xeb0>
	else if (__tmp > 65535)
    40d4:	6b a1       	ldd	r22, Y+35	; 0x23
    40d6:	7c a1       	ldd	r23, Y+36	; 0x24
    40d8:	8d a1       	ldd	r24, Y+37	; 0x25
    40da:	9e a1       	ldd	r25, Y+38	; 0x26
    40dc:	20 e0       	ldi	r18, 0x00	; 0
    40de:	3f ef       	ldi	r19, 0xFF	; 255
    40e0:	4f e7       	ldi	r20, 0x7F	; 127
    40e2:	57 e4       	ldi	r21, 0x47	; 71
    40e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    40e8:	18 16       	cp	r1, r24
    40ea:	4c f5       	brge	.+82     	; 0x413e <main+0xe9c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40ec:	6f a1       	ldd	r22, Y+39	; 0x27
    40ee:	78 a5       	ldd	r23, Y+40	; 0x28
    40f0:	89 a5       	ldd	r24, Y+41	; 0x29
    40f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    40f4:	20 e0       	ldi	r18, 0x00	; 0
    40f6:	30 e0       	ldi	r19, 0x00	; 0
    40f8:	40 e2       	ldi	r20, 0x20	; 32
    40fa:	51 e4       	ldi	r21, 0x41	; 65
    40fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4100:	dc 01       	movw	r26, r24
    4102:	cb 01       	movw	r24, r22
    4104:	bc 01       	movw	r22, r24
    4106:	cd 01       	movw	r24, r26
    4108:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    410c:	dc 01       	movw	r26, r24
    410e:	cb 01       	movw	r24, r22
    4110:	9a a3       	std	Y+34, r25	; 0x22
    4112:	89 a3       	std	Y+33, r24	; 0x21
    4114:	0f c0       	rjmp	.+30     	; 0x4134 <main+0xe92>
    4116:	88 ec       	ldi	r24, 0xC8	; 200
    4118:	90 e0       	ldi	r25, 0x00	; 0
    411a:	98 a3       	std	Y+32, r25	; 0x20
    411c:	8f 8f       	std	Y+31, r24	; 0x1f
    411e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4120:	98 a1       	ldd	r25, Y+32	; 0x20
    4122:	01 97       	sbiw	r24, 0x01	; 1
    4124:	f1 f7       	brne	.-4      	; 0x4122 <main+0xe80>
    4126:	98 a3       	std	Y+32, r25	; 0x20
    4128:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    412a:	89 a1       	ldd	r24, Y+33	; 0x21
    412c:	9a a1       	ldd	r25, Y+34	; 0x22
    412e:	01 97       	sbiw	r24, 0x01	; 1
    4130:	9a a3       	std	Y+34, r25	; 0x22
    4132:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4134:	89 a1       	ldd	r24, Y+33	; 0x21
    4136:	9a a1       	ldd	r25, Y+34	; 0x22
    4138:	00 97       	sbiw	r24, 0x00	; 0
    413a:	69 f7       	brne	.-38     	; 0x4116 <main+0xe74>
    413c:	5a ce       	rjmp	.-844    	; 0x3df2 <main+0xb50>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    413e:	6b a1       	ldd	r22, Y+35	; 0x23
    4140:	7c a1       	ldd	r23, Y+36	; 0x24
    4142:	8d a1       	ldd	r24, Y+37	; 0x25
    4144:	9e a1       	ldd	r25, Y+38	; 0x26
    4146:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    414a:	dc 01       	movw	r26, r24
    414c:	cb 01       	movw	r24, r22
    414e:	9a a3       	std	Y+34, r25	; 0x22
    4150:	89 a3       	std	Y+33, r24	; 0x21
    4152:	89 a1       	ldd	r24, Y+33	; 0x21
    4154:	9a a1       	ldd	r25, Y+34	; 0x22
    4156:	9e 8f       	std	Y+30, r25	; 0x1e
    4158:	8d 8f       	std	Y+29, r24	; 0x1d
    415a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    415c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    415e:	01 97       	sbiw	r24, 0x01	; 1
    4160:	f1 f7       	brne	.-4      	; 0x415e <main+0xebc>
    4162:	9e 8f       	std	Y+30, r25	; 0x1e
    4164:	8d 8f       	std	Y+29, r24	; 0x1d
    4166:	45 ce       	rjmp	.-886    	; 0x3df2 <main+0xb50>
								SPI_u8TransceiveSynch(&Local_ReceiveData,8);
								_delay_ms(10);
							}
							else if (Local_u8Key == 3)
							{
								while (Local_u8Key != 0)
    4168:	fe 01       	movw	r30, r28
    416a:	e2 57       	subi	r30, 0x72	; 114
    416c:	ff 4f       	sbci	r31, 0xFF	; 255
    416e:	80 81       	ld	r24, Z
    4170:	88 23       	and	r24, r24
    4172:	09 f0       	breq	.+2      	; 0x4176 <main+0xed4>
    4174:	3e ce       	rjmp	.-900    	; 0x3df2 <main+0xb50>
    4176:	7a c0       	rjmp	.+244    	; 0x426c <main+0xfca>
								}
							}

							else
							{
								CLCD_voidSendCommand(1);
    4178:	81 e0       	ldi	r24, 0x01	; 1
    417a:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidSendCommand>
								CLCD_voidSendString("Wrong Choice");
    417e:	86 ef       	ldi	r24, 0xF6	; 246
    4180:	90 e0       	ldi	r25, 0x00	; 0
    4182:	0e 94 b0 09 	call	0x1360	; 0x1360 <CLCD_voidSendString>
    4186:	80 e0       	ldi	r24, 0x00	; 0
    4188:	90 e0       	ldi	r25, 0x00	; 0
    418a:	aa ef       	ldi	r26, 0xFA	; 250
    418c:	b3 e4       	ldi	r27, 0x43	; 67
    418e:	89 8f       	std	Y+25, r24	; 0x19
    4190:	9a 8f       	std	Y+26, r25	; 0x1a
    4192:	ab 8f       	std	Y+27, r26	; 0x1b
    4194:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4196:	69 8d       	ldd	r22, Y+25	; 0x19
    4198:	7a 8d       	ldd	r23, Y+26	; 0x1a
    419a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    419c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    419e:	20 e0       	ldi	r18, 0x00	; 0
    41a0:	30 e0       	ldi	r19, 0x00	; 0
    41a2:	4a ef       	ldi	r20, 0xFA	; 250
    41a4:	54 e4       	ldi	r21, 0x44	; 68
    41a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41aa:	dc 01       	movw	r26, r24
    41ac:	cb 01       	movw	r24, r22
    41ae:	8d 8b       	std	Y+21, r24	; 0x15
    41b0:	9e 8b       	std	Y+22, r25	; 0x16
    41b2:	af 8b       	std	Y+23, r26	; 0x17
    41b4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    41b6:	6d 89       	ldd	r22, Y+21	; 0x15
    41b8:	7e 89       	ldd	r23, Y+22	; 0x16
    41ba:	8f 89       	ldd	r24, Y+23	; 0x17
    41bc:	98 8d       	ldd	r25, Y+24	; 0x18
    41be:	20 e0       	ldi	r18, 0x00	; 0
    41c0:	30 e0       	ldi	r19, 0x00	; 0
    41c2:	40 e8       	ldi	r20, 0x80	; 128
    41c4:	5f e3       	ldi	r21, 0x3F	; 63
    41c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    41ca:	88 23       	and	r24, r24
    41cc:	2c f4       	brge	.+10     	; 0x41d8 <main+0xf36>
		__ticks = 1;
    41ce:	81 e0       	ldi	r24, 0x01	; 1
    41d0:	90 e0       	ldi	r25, 0x00	; 0
    41d2:	9c 8b       	std	Y+20, r25	; 0x14
    41d4:	8b 8b       	std	Y+19, r24	; 0x13
    41d6:	3f c0       	rjmp	.+126    	; 0x4256 <main+0xfb4>
	else if (__tmp > 65535)
    41d8:	6d 89       	ldd	r22, Y+21	; 0x15
    41da:	7e 89       	ldd	r23, Y+22	; 0x16
    41dc:	8f 89       	ldd	r24, Y+23	; 0x17
    41de:	98 8d       	ldd	r25, Y+24	; 0x18
    41e0:	20 e0       	ldi	r18, 0x00	; 0
    41e2:	3f ef       	ldi	r19, 0xFF	; 255
    41e4:	4f e7       	ldi	r20, 0x7F	; 127
    41e6:	57 e4       	ldi	r21, 0x47	; 71
    41e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    41ec:	18 16       	cp	r1, r24
    41ee:	4c f5       	brge	.+82     	; 0x4242 <main+0xfa0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41f0:	69 8d       	ldd	r22, Y+25	; 0x19
    41f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    41f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    41f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    41f8:	20 e0       	ldi	r18, 0x00	; 0
    41fa:	30 e0       	ldi	r19, 0x00	; 0
    41fc:	40 e2       	ldi	r20, 0x20	; 32
    41fe:	51 e4       	ldi	r21, 0x41	; 65
    4200:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4204:	dc 01       	movw	r26, r24
    4206:	cb 01       	movw	r24, r22
    4208:	bc 01       	movw	r22, r24
    420a:	cd 01       	movw	r24, r26
    420c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4210:	dc 01       	movw	r26, r24
    4212:	cb 01       	movw	r24, r22
    4214:	9c 8b       	std	Y+20, r25	; 0x14
    4216:	8b 8b       	std	Y+19, r24	; 0x13
    4218:	0f c0       	rjmp	.+30     	; 0x4238 <main+0xf96>
    421a:	88 ec       	ldi	r24, 0xC8	; 200
    421c:	90 e0       	ldi	r25, 0x00	; 0
    421e:	9a 8b       	std	Y+18, r25	; 0x12
    4220:	89 8b       	std	Y+17, r24	; 0x11
    4222:	89 89       	ldd	r24, Y+17	; 0x11
    4224:	9a 89       	ldd	r25, Y+18	; 0x12
    4226:	01 97       	sbiw	r24, 0x01	; 1
    4228:	f1 f7       	brne	.-4      	; 0x4226 <main+0xf84>
    422a:	9a 8b       	std	Y+18, r25	; 0x12
    422c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    422e:	8b 89       	ldd	r24, Y+19	; 0x13
    4230:	9c 89       	ldd	r25, Y+20	; 0x14
    4232:	01 97       	sbiw	r24, 0x01	; 1
    4234:	9c 8b       	std	Y+20, r25	; 0x14
    4236:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4238:	8b 89       	ldd	r24, Y+19	; 0x13
    423a:	9c 89       	ldd	r25, Y+20	; 0x14
    423c:	00 97       	sbiw	r24, 0x00	; 0
    423e:	69 f7       	brne	.-38     	; 0x421a <main+0xf78>
    4240:	16 cc       	rjmp	.-2004   	; 0x3a6e <main+0x7cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4242:	6d 89       	ldd	r22, Y+21	; 0x15
    4244:	7e 89       	ldd	r23, Y+22	; 0x16
    4246:	8f 89       	ldd	r24, Y+23	; 0x17
    4248:	98 8d       	ldd	r25, Y+24	; 0x18
    424a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    424e:	dc 01       	movw	r26, r24
    4250:	cb 01       	movw	r24, r22
    4252:	9c 8b       	std	Y+20, r25	; 0x14
    4254:	8b 8b       	std	Y+19, r24	; 0x13
    4256:	8b 89       	ldd	r24, Y+19	; 0x13
    4258:	9c 89       	ldd	r25, Y+20	; 0x14
    425a:	98 8b       	std	Y+16, r25	; 0x10
    425c:	8f 87       	std	Y+15, r24	; 0x0f
    425e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4260:	98 89       	ldd	r25, Y+16	; 0x10
    4262:	01 97       	sbiw	r24, 0x01	; 1
    4264:	f1 f7       	brne	.-4      	; 0x4262 <main+0xfc0>
    4266:	98 8b       	std	Y+16, r25	; 0x10
    4268:	8f 87       	std	Y+15, r24	; 0x0f
    426a:	01 cc       	rjmp	.-2046   	; 0x3a6e <main+0x7cc>
					{
						goto lable1;
					}
					else if(Local_u8Key == 1)
					{
						while(Local_u8Key !=0)
    426c:	fe 01       	movw	r30, r28
    426e:	e2 57       	subi	r30, 0x72	; 114
    4270:	ff 4f       	sbci	r31, 0xFF	; 255
    4272:	80 81       	ld	r24, Z
    4274:	88 23       	and	r24, r24
    4276:	09 f0       	breq	.+2      	; 0x427a <main+0xfd8>
    4278:	fa cb       	rjmp	.-2060   	; 0x3a6e <main+0x7cc>
    427a:	37 ca       	rjmp	.-2962   	; 0x36ea <main+0x448>
				}while(1);

			}
			else
			{
				CLCD_voidSendCommand(1);
    427c:	81 e0       	ldi	r24, 0x01	; 1
    427e:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidSendCommand>
				CLCD_voidSendString("Wrong Choice");
    4282:	86 ef       	ldi	r24, 0xF6	; 246
    4284:	90 e0       	ldi	r25, 0x00	; 0
    4286:	0e 94 b0 09 	call	0x1360	; 0x1360 <CLCD_voidSendString>
    428a:	80 e0       	ldi	r24, 0x00	; 0
    428c:	90 e0       	ldi	r25, 0x00	; 0
    428e:	aa ef       	ldi	r26, 0xFA	; 250
    4290:	b3 e4       	ldi	r27, 0x43	; 67
    4292:	8b 87       	std	Y+11, r24	; 0x0b
    4294:	9c 87       	std	Y+12, r25	; 0x0c
    4296:	ad 87       	std	Y+13, r26	; 0x0d
    4298:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    429a:	6b 85       	ldd	r22, Y+11	; 0x0b
    429c:	7c 85       	ldd	r23, Y+12	; 0x0c
    429e:	8d 85       	ldd	r24, Y+13	; 0x0d
    42a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    42a2:	20 e0       	ldi	r18, 0x00	; 0
    42a4:	30 e0       	ldi	r19, 0x00	; 0
    42a6:	4a ef       	ldi	r20, 0xFA	; 250
    42a8:	54 e4       	ldi	r21, 0x44	; 68
    42aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42ae:	dc 01       	movw	r26, r24
    42b0:	cb 01       	movw	r24, r22
    42b2:	8f 83       	std	Y+7, r24	; 0x07
    42b4:	98 87       	std	Y+8, r25	; 0x08
    42b6:	a9 87       	std	Y+9, r26	; 0x09
    42b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    42ba:	6f 81       	ldd	r22, Y+7	; 0x07
    42bc:	78 85       	ldd	r23, Y+8	; 0x08
    42be:	89 85       	ldd	r24, Y+9	; 0x09
    42c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    42c2:	20 e0       	ldi	r18, 0x00	; 0
    42c4:	30 e0       	ldi	r19, 0x00	; 0
    42c6:	40 e8       	ldi	r20, 0x80	; 128
    42c8:	5f e3       	ldi	r21, 0x3F	; 63
    42ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    42ce:	88 23       	and	r24, r24
    42d0:	2c f4       	brge	.+10     	; 0x42dc <main+0x103a>
		__ticks = 1;
    42d2:	81 e0       	ldi	r24, 0x01	; 1
    42d4:	90 e0       	ldi	r25, 0x00	; 0
    42d6:	9e 83       	std	Y+6, r25	; 0x06
    42d8:	8d 83       	std	Y+5, r24	; 0x05
    42da:	3f c0       	rjmp	.+126    	; 0x435a <main+0x10b8>
	else if (__tmp > 65535)
    42dc:	6f 81       	ldd	r22, Y+7	; 0x07
    42de:	78 85       	ldd	r23, Y+8	; 0x08
    42e0:	89 85       	ldd	r24, Y+9	; 0x09
    42e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    42e4:	20 e0       	ldi	r18, 0x00	; 0
    42e6:	3f ef       	ldi	r19, 0xFF	; 255
    42e8:	4f e7       	ldi	r20, 0x7F	; 127
    42ea:	57 e4       	ldi	r21, 0x47	; 71
    42ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    42f0:	18 16       	cp	r1, r24
    42f2:	4c f5       	brge	.+82     	; 0x4346 <main+0x10a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    42f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    42f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    42fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    42fc:	20 e0       	ldi	r18, 0x00	; 0
    42fe:	30 e0       	ldi	r19, 0x00	; 0
    4300:	40 e2       	ldi	r20, 0x20	; 32
    4302:	51 e4       	ldi	r21, 0x41	; 65
    4304:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4308:	dc 01       	movw	r26, r24
    430a:	cb 01       	movw	r24, r22
    430c:	bc 01       	movw	r22, r24
    430e:	cd 01       	movw	r24, r26
    4310:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4314:	dc 01       	movw	r26, r24
    4316:	cb 01       	movw	r24, r22
    4318:	9e 83       	std	Y+6, r25	; 0x06
    431a:	8d 83       	std	Y+5, r24	; 0x05
    431c:	0f c0       	rjmp	.+30     	; 0x433c <main+0x109a>
    431e:	88 ec       	ldi	r24, 0xC8	; 200
    4320:	90 e0       	ldi	r25, 0x00	; 0
    4322:	9c 83       	std	Y+4, r25	; 0x04
    4324:	8b 83       	std	Y+3, r24	; 0x03
    4326:	8b 81       	ldd	r24, Y+3	; 0x03
    4328:	9c 81       	ldd	r25, Y+4	; 0x04
    432a:	01 97       	sbiw	r24, 0x01	; 1
    432c:	f1 f7       	brne	.-4      	; 0x432a <main+0x1088>
    432e:	9c 83       	std	Y+4, r25	; 0x04
    4330:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4332:	8d 81       	ldd	r24, Y+5	; 0x05
    4334:	9e 81       	ldd	r25, Y+6	; 0x06
    4336:	01 97       	sbiw	r24, 0x01	; 1
    4338:	9e 83       	std	Y+6, r25	; 0x06
    433a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    433c:	8d 81       	ldd	r24, Y+5	; 0x05
    433e:	9e 81       	ldd	r25, Y+6	; 0x06
    4340:	00 97       	sbiw	r24, 0x00	; 0
    4342:	69 f7       	brne	.-38     	; 0x431e <main+0x107c>
    4344:	98 c8       	rjmp	.-3792   	; 0x3476 <main+0x1d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4346:	6f 81       	ldd	r22, Y+7	; 0x07
    4348:	78 85       	ldd	r23, Y+8	; 0x08
    434a:	89 85       	ldd	r24, Y+9	; 0x09
    434c:	9a 85       	ldd	r25, Y+10	; 0x0a
    434e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4352:	dc 01       	movw	r26, r24
    4354:	cb 01       	movw	r24, r22
    4356:	9e 83       	std	Y+6, r25	; 0x06
    4358:	8d 83       	std	Y+5, r24	; 0x05
    435a:	8d 81       	ldd	r24, Y+5	; 0x05
    435c:	9e 81       	ldd	r25, Y+6	; 0x06
    435e:	9a 83       	std	Y+2, r25	; 0x02
    4360:	89 83       	std	Y+1, r24	; 0x01
    4362:	89 81       	ldd	r24, Y+1	; 0x01
    4364:	9a 81       	ldd	r25, Y+2	; 0x02
    4366:	01 97       	sbiw	r24, 0x01	; 1
    4368:	f1 f7       	brne	.-4      	; 0x4366 <main+0x10c4>
    436a:	9a 83       	std	Y+2, r25	; 0x02
    436c:	89 83       	std	Y+1, r24	; 0x01
    436e:	83 c8       	rjmp	.-3834   	; 0x3476 <main+0x1d4>

00004370 <Start>:
	}
}


void Start(void)
{
    4370:	0f 93       	push	r16
    4372:	1f 93       	push	r17
    4374:	df 93       	push	r29
    4376:	cf 93       	push	r28
    4378:	cd b7       	in	r28, 0x3d	; 61
    437a:	de b7       	in	r29, 0x3e	; 62
    437c:	ca 58       	subi	r28, 0x8A	; 138
    437e:	d0 40       	sbci	r29, 0x00	; 0
    4380:	0f b6       	in	r0, 0x3f	; 63
    4382:	f8 94       	cli
    4384:	de bf       	out	0x3e, r29	; 62
    4386:	0f be       	out	0x3f, r0	; 63
    4388:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Key;
	u8 Local_u8Length=4;
    438a:	fe 01       	movw	r30, r28
    438c:	ed 58       	subi	r30, 0x8D	; 141
    438e:	ff 4f       	sbci	r31, 0xFF	; 255
    4390:	84 e0       	ldi	r24, 0x04	; 4
    4392:	80 83       	st	Z, r24
	u8 Local_u8Counter=0;
    4394:	fe 01       	movw	r30, r28
    4396:	ee 58       	subi	r30, 0x8E	; 142
    4398:	ff 4f       	sbci	r31, 0xFF	; 255
    439a:	10 82       	st	Z, r1
	u8 Local_u8WrongCounter=0;
    439c:	fe 01       	movw	r30, r28
    439e:	ef 58       	subi	r30, 0x8F	; 143
    43a0:	ff 4f       	sbci	r31, 0xFF	; 255
    43a2:	10 82       	st	Z, r1
			0b00000100,
			0b00001110,
			0b00010101,
			0b00001110,
			0b00010001,
	};
    43a4:	ce 01       	movw	r24, r28
    43a6:	82 58       	subi	r24, 0x82	; 130
    43a8:	9f 4f       	sbci	r25, 0xFF	; 255
    43aa:	ca 57       	subi	r28, 0x7A	; 122
    43ac:	df 4f       	sbci	r29, 0xFF	; 255
    43ae:	99 83       	std	Y+1, r25	; 0x01
    43b0:	88 83       	st	Y, r24
    43b2:	c6 58       	subi	r28, 0x86	; 134
    43b4:	d0 40       	sbci	r29, 0x00	; 0
    43b6:	42 eb       	ldi	r20, 0xB2	; 178
    43b8:	51 e0       	ldi	r21, 0x01	; 1
    43ba:	c8 57       	subi	r28, 0x78	; 120
    43bc:	df 4f       	sbci	r29, 0xFF	; 255
    43be:	59 83       	std	Y+1, r21	; 0x01
    43c0:	48 83       	st	Y, r20
    43c2:	c8 58       	subi	r28, 0x88	; 136
    43c4:	d0 40       	sbci	r29, 0x00	; 0
    43c6:	58 e0       	ldi	r21, 0x08	; 8
    43c8:	c6 57       	subi	r28, 0x76	; 118
    43ca:	df 4f       	sbci	r29, 0xFF	; 255
    43cc:	58 83       	st	Y, r21
    43ce:	ca 58       	subi	r28, 0x8A	; 138
    43d0:	d0 40       	sbci	r29, 0x00	; 0
    43d2:	c8 57       	subi	r28, 0x78	; 120
    43d4:	df 4f       	sbci	r29, 0xFF	; 255
    43d6:	e8 81       	ld	r30, Y
    43d8:	f9 81       	ldd	r31, Y+1	; 0x01
    43da:	c8 58       	subi	r28, 0x88	; 136
    43dc:	d0 40       	sbci	r29, 0x00	; 0
    43de:	00 80       	ld	r0, Z
    43e0:	c8 57       	subi	r28, 0x78	; 120
    43e2:	df 4f       	sbci	r29, 0xFF	; 255
    43e4:	48 81       	ld	r20, Y
    43e6:	59 81       	ldd	r21, Y+1	; 0x01
    43e8:	c8 58       	subi	r28, 0x88	; 136
    43ea:	d0 40       	sbci	r29, 0x00	; 0
    43ec:	4f 5f       	subi	r20, 0xFF	; 255
    43ee:	5f 4f       	sbci	r21, 0xFF	; 255
    43f0:	c8 57       	subi	r28, 0x78	; 120
    43f2:	df 4f       	sbci	r29, 0xFF	; 255
    43f4:	59 83       	std	Y+1, r21	; 0x01
    43f6:	48 83       	st	Y, r20
    43f8:	c8 58       	subi	r28, 0x88	; 136
    43fa:	d0 40       	sbci	r29, 0x00	; 0
    43fc:	ca 57       	subi	r28, 0x7A	; 122
    43fe:	df 4f       	sbci	r29, 0xFF	; 255
    4400:	e8 81       	ld	r30, Y
    4402:	f9 81       	ldd	r31, Y+1	; 0x01
    4404:	c6 58       	subi	r28, 0x86	; 134
    4406:	d0 40       	sbci	r29, 0x00	; 0
    4408:	00 82       	st	Z, r0
    440a:	ca 57       	subi	r28, 0x7A	; 122
    440c:	df 4f       	sbci	r29, 0xFF	; 255
    440e:	48 81       	ld	r20, Y
    4410:	59 81       	ldd	r21, Y+1	; 0x01
    4412:	c6 58       	subi	r28, 0x86	; 134
    4414:	d0 40       	sbci	r29, 0x00	; 0
    4416:	4f 5f       	subi	r20, 0xFF	; 255
    4418:	5f 4f       	sbci	r21, 0xFF	; 255
    441a:	ca 57       	subi	r28, 0x7A	; 122
    441c:	df 4f       	sbci	r29, 0xFF	; 255
    441e:	59 83       	std	Y+1, r21	; 0x01
    4420:	48 83       	st	Y, r20
    4422:	c6 58       	subi	r28, 0x86	; 134
    4424:	d0 40       	sbci	r29, 0x00	; 0
    4426:	c6 57       	subi	r28, 0x76	; 118
    4428:	df 4f       	sbci	r29, 0xFF	; 255
    442a:	58 81       	ld	r21, Y
    442c:	ca 58       	subi	r28, 0x8A	; 138
    442e:	d0 40       	sbci	r29, 0x00	; 0
    4430:	51 50       	subi	r21, 0x01	; 1
    4432:	c6 57       	subi	r28, 0x76	; 118
    4434:	df 4f       	sbci	r29, 0xFF	; 255
    4436:	58 83       	st	Y, r21
    4438:	ca 58       	subi	r28, 0x8A	; 138
    443a:	d0 40       	sbci	r29, 0x00	; 0
    443c:	c6 57       	subi	r28, 0x76	; 118
    443e:	df 4f       	sbci	r29, 0xFF	; 255
    4440:	88 81       	ld	r24, Y
    4442:	ca 58       	subi	r28, 0x8A	; 138
    4444:	d0 40       	sbci	r29, 0x00	; 0
    4446:	88 23       	and	r24, r24
    4448:	21 f6       	brne	.-120    	; 0x43d2 <Start+0x62>

	CLCD_voidSendString("Welcome To Smart");
    444a:	83 e0       	ldi	r24, 0x03	; 3
    444c:	91 e0       	ldi	r25, 0x01	; 1
    444e:	0e 94 b0 09 	call	0x1360	; 0x1360 <CLCD_voidSendString>
	CLCD_voidGoToXY(1,0);
    4452:	81 e0       	ldi	r24, 0x01	; 1
    4454:	60 e0       	ldi	r22, 0x00	; 0
    4456:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <CLCD_voidGoToXY>
	CLCD_voidSendString("Home System");
    445a:	84 e1       	ldi	r24, 0x14	; 20
    445c:	91 e0       	ldi	r25, 0x01	; 1
    445e:	0e 94 b0 09 	call	0x1360	; 0x1360 <CLCD_voidSendString>
    4462:	fe 01       	movw	r30, r28
    4464:	e3 59       	subi	r30, 0x93	; 147
    4466:	ff 4f       	sbci	r31, 0xFF	; 255
    4468:	80 e0       	ldi	r24, 0x00	; 0
    446a:	90 e0       	ldi	r25, 0x00	; 0
    446c:	aa ef       	ldi	r26, 0xFA	; 250
    446e:	b4 e4       	ldi	r27, 0x44	; 68
    4470:	80 83       	st	Z, r24
    4472:	91 83       	std	Z+1, r25	; 0x01
    4474:	a2 83       	std	Z+2, r26	; 0x02
    4476:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4478:	8e 01       	movw	r16, r28
    447a:	07 59       	subi	r16, 0x97	; 151
    447c:	1f 4f       	sbci	r17, 0xFF	; 255
    447e:	fe 01       	movw	r30, r28
    4480:	e3 59       	subi	r30, 0x93	; 147
    4482:	ff 4f       	sbci	r31, 0xFF	; 255
    4484:	60 81       	ld	r22, Z
    4486:	71 81       	ldd	r23, Z+1	; 0x01
    4488:	82 81       	ldd	r24, Z+2	; 0x02
    448a:	93 81       	ldd	r25, Z+3	; 0x03
    448c:	20 e0       	ldi	r18, 0x00	; 0
    448e:	30 e0       	ldi	r19, 0x00	; 0
    4490:	4a ef       	ldi	r20, 0xFA	; 250
    4492:	54 e4       	ldi	r21, 0x44	; 68
    4494:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4498:	dc 01       	movw	r26, r24
    449a:	cb 01       	movw	r24, r22
    449c:	f8 01       	movw	r30, r16
    449e:	80 83       	st	Z, r24
    44a0:	91 83       	std	Z+1, r25	; 0x01
    44a2:	a2 83       	std	Z+2, r26	; 0x02
    44a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    44a6:	fe 01       	movw	r30, r28
    44a8:	e7 59       	subi	r30, 0x97	; 151
    44aa:	ff 4f       	sbci	r31, 0xFF	; 255
    44ac:	60 81       	ld	r22, Z
    44ae:	71 81       	ldd	r23, Z+1	; 0x01
    44b0:	82 81       	ldd	r24, Z+2	; 0x02
    44b2:	93 81       	ldd	r25, Z+3	; 0x03
    44b4:	20 e0       	ldi	r18, 0x00	; 0
    44b6:	30 e0       	ldi	r19, 0x00	; 0
    44b8:	40 e8       	ldi	r20, 0x80	; 128
    44ba:	5f e3       	ldi	r21, 0x3F	; 63
    44bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    44c0:	88 23       	and	r24, r24
    44c2:	44 f4       	brge	.+16     	; 0x44d4 <Start+0x164>
		__ticks = 1;
    44c4:	fe 01       	movw	r30, r28
    44c6:	e9 59       	subi	r30, 0x99	; 153
    44c8:	ff 4f       	sbci	r31, 0xFF	; 255
    44ca:	81 e0       	ldi	r24, 0x01	; 1
    44cc:	90 e0       	ldi	r25, 0x00	; 0
    44ce:	91 83       	std	Z+1, r25	; 0x01
    44d0:	80 83       	st	Z, r24
    44d2:	64 c0       	rjmp	.+200    	; 0x459c <Start+0x22c>
	else if (__tmp > 65535)
    44d4:	fe 01       	movw	r30, r28
    44d6:	e7 59       	subi	r30, 0x97	; 151
    44d8:	ff 4f       	sbci	r31, 0xFF	; 255
    44da:	60 81       	ld	r22, Z
    44dc:	71 81       	ldd	r23, Z+1	; 0x01
    44de:	82 81       	ldd	r24, Z+2	; 0x02
    44e0:	93 81       	ldd	r25, Z+3	; 0x03
    44e2:	20 e0       	ldi	r18, 0x00	; 0
    44e4:	3f ef       	ldi	r19, 0xFF	; 255
    44e6:	4f e7       	ldi	r20, 0x7F	; 127
    44e8:	57 e4       	ldi	r21, 0x47	; 71
    44ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    44ee:	18 16       	cp	r1, r24
    44f0:	0c f0       	brlt	.+2      	; 0x44f4 <Start+0x184>
    44f2:	43 c0       	rjmp	.+134    	; 0x457a <Start+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44f4:	fe 01       	movw	r30, r28
    44f6:	e3 59       	subi	r30, 0x93	; 147
    44f8:	ff 4f       	sbci	r31, 0xFF	; 255
    44fa:	60 81       	ld	r22, Z
    44fc:	71 81       	ldd	r23, Z+1	; 0x01
    44fe:	82 81       	ldd	r24, Z+2	; 0x02
    4500:	93 81       	ldd	r25, Z+3	; 0x03
    4502:	20 e0       	ldi	r18, 0x00	; 0
    4504:	30 e0       	ldi	r19, 0x00	; 0
    4506:	40 e2       	ldi	r20, 0x20	; 32
    4508:	51 e4       	ldi	r21, 0x41	; 65
    450a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    450e:	dc 01       	movw	r26, r24
    4510:	cb 01       	movw	r24, r22
    4512:	8e 01       	movw	r16, r28
    4514:	09 59       	subi	r16, 0x99	; 153
    4516:	1f 4f       	sbci	r17, 0xFF	; 255
    4518:	bc 01       	movw	r22, r24
    451a:	cd 01       	movw	r24, r26
    451c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4520:	dc 01       	movw	r26, r24
    4522:	cb 01       	movw	r24, r22
    4524:	f8 01       	movw	r30, r16
    4526:	91 83       	std	Z+1, r25	; 0x01
    4528:	80 83       	st	Z, r24
    452a:	1f c0       	rjmp	.+62     	; 0x456a <Start+0x1fa>
    452c:	fe 01       	movw	r30, r28
    452e:	eb 59       	subi	r30, 0x9B	; 155
    4530:	ff 4f       	sbci	r31, 0xFF	; 255
    4532:	88 ec       	ldi	r24, 0xC8	; 200
    4534:	90 e0       	ldi	r25, 0x00	; 0
    4536:	91 83       	std	Z+1, r25	; 0x01
    4538:	80 83       	st	Z, r24
    453a:	fe 01       	movw	r30, r28
    453c:	eb 59       	subi	r30, 0x9B	; 155
    453e:	ff 4f       	sbci	r31, 0xFF	; 255
    4540:	80 81       	ld	r24, Z
    4542:	91 81       	ldd	r25, Z+1	; 0x01
    4544:	01 97       	sbiw	r24, 0x01	; 1
    4546:	f1 f7       	brne	.-4      	; 0x4544 <Start+0x1d4>
    4548:	fe 01       	movw	r30, r28
    454a:	eb 59       	subi	r30, 0x9B	; 155
    454c:	ff 4f       	sbci	r31, 0xFF	; 255
    454e:	91 83       	std	Z+1, r25	; 0x01
    4550:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4552:	de 01       	movw	r26, r28
    4554:	a9 59       	subi	r26, 0x99	; 153
    4556:	bf 4f       	sbci	r27, 0xFF	; 255
    4558:	fe 01       	movw	r30, r28
    455a:	e9 59       	subi	r30, 0x99	; 153
    455c:	ff 4f       	sbci	r31, 0xFF	; 255
    455e:	80 81       	ld	r24, Z
    4560:	91 81       	ldd	r25, Z+1	; 0x01
    4562:	01 97       	sbiw	r24, 0x01	; 1
    4564:	11 96       	adiw	r26, 0x01	; 1
    4566:	9c 93       	st	X, r25
    4568:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    456a:	fe 01       	movw	r30, r28
    456c:	e9 59       	subi	r30, 0x99	; 153
    456e:	ff 4f       	sbci	r31, 0xFF	; 255
    4570:	80 81       	ld	r24, Z
    4572:	91 81       	ldd	r25, Z+1	; 0x01
    4574:	00 97       	sbiw	r24, 0x00	; 0
    4576:	d1 f6       	brne	.-76     	; 0x452c <Start+0x1bc>
    4578:	27 c0       	rjmp	.+78     	; 0x45c8 <Start+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    457a:	8e 01       	movw	r16, r28
    457c:	09 59       	subi	r16, 0x99	; 153
    457e:	1f 4f       	sbci	r17, 0xFF	; 255
    4580:	fe 01       	movw	r30, r28
    4582:	e7 59       	subi	r30, 0x97	; 151
    4584:	ff 4f       	sbci	r31, 0xFF	; 255
    4586:	60 81       	ld	r22, Z
    4588:	71 81       	ldd	r23, Z+1	; 0x01
    458a:	82 81       	ldd	r24, Z+2	; 0x02
    458c:	93 81       	ldd	r25, Z+3	; 0x03
    458e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4592:	dc 01       	movw	r26, r24
    4594:	cb 01       	movw	r24, r22
    4596:	f8 01       	movw	r30, r16
    4598:	91 83       	std	Z+1, r25	; 0x01
    459a:	80 83       	st	Z, r24
    459c:	de 01       	movw	r26, r28
    459e:	ad 59       	subi	r26, 0x9D	; 157
    45a0:	bf 4f       	sbci	r27, 0xFF	; 255
    45a2:	fe 01       	movw	r30, r28
    45a4:	e9 59       	subi	r30, 0x99	; 153
    45a6:	ff 4f       	sbci	r31, 0xFF	; 255
    45a8:	80 81       	ld	r24, Z
    45aa:	91 81       	ldd	r25, Z+1	; 0x01
    45ac:	8d 93       	st	X+, r24
    45ae:	9c 93       	st	X, r25
    45b0:	fe 01       	movw	r30, r28
    45b2:	ed 59       	subi	r30, 0x9D	; 157
    45b4:	ff 4f       	sbci	r31, 0xFF	; 255
    45b6:	80 81       	ld	r24, Z
    45b8:	91 81       	ldd	r25, Z+1	; 0x01
    45ba:	01 97       	sbiw	r24, 0x01	; 1
    45bc:	f1 f7       	brne	.-4      	; 0x45ba <Start+0x24a>
    45be:	fe 01       	movw	r30, r28
    45c0:	ed 59       	subi	r30, 0x9D	; 157
    45c2:	ff 4f       	sbci	r31, 0xFF	; 255
    45c4:	91 83       	std	Z+1, r25	; 0x01
    45c6:	80 83       	st	Z, r24
	_delay_ms(2000);
	CLCD_voidSendCommand(1);
    45c8:	81 e0       	ldi	r24, 0x01	; 1
    45ca:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidSendCommand>
	CLCD_voidSendString("Enter ID :");
    45ce:	80 e2       	ldi	r24, 0x20	; 32
    45d0:	91 e0       	ldi	r25, 0x01	; 1
    45d2:	0e 94 b0 09 	call	0x1360	; 0x1360 <CLCD_voidSendString>
    45d6:	49 c0       	rjmp	.+146    	; 0x466a <Start+0x2fa>
	/*Entering the ID*/
	while(Local_u8Counter < Local_u8Length)
	{
		do
		{
			Local_u8Key=KPD_u8GetPressedKey();
    45d8:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <KPD_u8GetPressedKey>
    45dc:	fe 01       	movw	r30, r28
    45de:	ec 58       	subi	r30, 0x8C	; 140
    45e0:	ff 4f       	sbci	r31, 0xFF	; 255
    45e2:	80 83       	st	Z, r24

		}while(Local_u8Key==0xff);
    45e4:	fe 01       	movw	r30, r28
    45e6:	ec 58       	subi	r30, 0x8C	; 140
    45e8:	ff 4f       	sbci	r31, 0xFF	; 255
    45ea:	80 81       	ld	r24, Z
    45ec:	8f 3f       	cpi	r24, 0xFF	; 255
    45ee:	a1 f3       	breq	.-24     	; 0x45d8 <Start+0x268>

		Local_u8ArrID[Local_u8Counter]=Local_u8Key;
    45f0:	fe 01       	movw	r30, r28
    45f2:	ee 58       	subi	r30, 0x8E	; 142
    45f4:	ff 4f       	sbci	r31, 0xFF	; 255
    45f6:	80 81       	ld	r24, Z
    45f8:	28 2f       	mov	r18, r24
    45fa:	30 e0       	ldi	r19, 0x00	; 0
    45fc:	ce 01       	movw	r24, r28
    45fe:	8b 58       	subi	r24, 0x8B	; 139
    4600:	9f 4f       	sbci	r25, 0xFF	; 255
    4602:	dc 01       	movw	r26, r24
    4604:	a2 0f       	add	r26, r18
    4606:	b3 1f       	adc	r27, r19
    4608:	fe 01       	movw	r30, r28
    460a:	ec 58       	subi	r30, 0x8C	; 140
    460c:	ff 4f       	sbci	r31, 0xFF	; 255
    460e:	80 81       	ld	r24, Z
    4610:	8c 93       	st	X, r24
		CLCD_voidGoToXY(0,10+Local_u8Counter);
    4612:	fe 01       	movw	r30, r28
    4614:	ee 58       	subi	r30, 0x8E	; 142
    4616:	ff 4f       	sbci	r31, 0xFF	; 255
    4618:	80 81       	ld	r24, Z
    461a:	98 2f       	mov	r25, r24
    461c:	96 5f       	subi	r25, 0xF6	; 246
    461e:	80 e0       	ldi	r24, 0x00	; 0
    4620:	69 2f       	mov	r22, r25
    4622:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <CLCD_voidGoToXY>
		CLCD_voidWriteNumber(Local_u8ArrID[Local_u8Counter],1);
    4626:	fe 01       	movw	r30, r28
    4628:	ee 58       	subi	r30, 0x8E	; 142
    462a:	ff 4f       	sbci	r31, 0xFF	; 255
    462c:	80 81       	ld	r24, Z
    462e:	28 2f       	mov	r18, r24
    4630:	30 e0       	ldi	r19, 0x00	; 0
    4632:	ce 01       	movw	r24, r28
    4634:	8b 58       	subi	r24, 0x8B	; 139
    4636:	9f 4f       	sbci	r25, 0xFF	; 255
    4638:	fc 01       	movw	r30, r24
    463a:	e2 0f       	add	r30, r18
    463c:	f3 1f       	adc	r31, r19
    463e:	80 81       	ld	r24, Z
    4640:	88 2f       	mov	r24, r24
    4642:	90 e0       	ldi	r25, 0x00	; 0
    4644:	a0 e0       	ldi	r26, 0x00	; 0
    4646:	b0 e0       	ldi	r27, 0x00	; 0
    4648:	bc 01       	movw	r22, r24
    464a:	cd 01       	movw	r24, r26
    464c:	21 e0       	ldi	r18, 0x01	; 1
    464e:	30 e0       	ldi	r19, 0x00	; 0
    4650:	40 e0       	ldi	r20, 0x00	; 0
    4652:	50 e0       	ldi	r21, 0x00	; 0
    4654:	0e 94 38 0a 	call	0x1470	; 0x1470 <CLCD_voidWriteNumber>
		Local_u8Counter++;
    4658:	de 01       	movw	r26, r28
    465a:	ae 58       	subi	r26, 0x8E	; 142
    465c:	bf 4f       	sbci	r27, 0xFF	; 255
    465e:	fe 01       	movw	r30, r28
    4660:	ee 58       	subi	r30, 0x8E	; 142
    4662:	ff 4f       	sbci	r31, 0xFF	; 255
    4664:	80 81       	ld	r24, Z
    4666:	8f 5f       	subi	r24, 0xFF	; 255
    4668:	8c 93       	st	X, r24
	CLCD_voidSendCommand(1);
	CLCD_voidSendString("Enter ID :");


	/*Entering the ID*/
	while(Local_u8Counter < Local_u8Length)
    466a:	fe 01       	movw	r30, r28
    466c:	ee 58       	subi	r30, 0x8E	; 142
    466e:	ff 4f       	sbci	r31, 0xFF	; 255
    4670:	de 01       	movw	r26, r28
    4672:	ad 58       	subi	r26, 0x8D	; 141
    4674:	bf 4f       	sbci	r27, 0xFF	; 255
    4676:	90 81       	ld	r25, Z
    4678:	8c 91       	ld	r24, X
    467a:	98 17       	cp	r25, r24
    467c:	08 f4       	brcc	.+2      	; 0x4680 <Start+0x310>
    467e:	ac cf       	rjmp	.-168    	; 0x45d8 <Start+0x268>
    4680:	fe 01       	movw	r30, r28
    4682:	e1 5a       	subi	r30, 0xA1	; 161
    4684:	ff 4f       	sbci	r31, 0xFF	; 255
    4686:	80 e0       	ldi	r24, 0x00	; 0
    4688:	90 e0       	ldi	r25, 0x00	; 0
    468a:	a8 e4       	ldi	r26, 0x48	; 72
    468c:	b3 e4       	ldi	r27, 0x43	; 67
    468e:	80 83       	st	Z, r24
    4690:	91 83       	std	Z+1, r25	; 0x01
    4692:	a2 83       	std	Z+2, r26	; 0x02
    4694:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4696:	8e 01       	movw	r16, r28
    4698:	05 5a       	subi	r16, 0xA5	; 165
    469a:	1f 4f       	sbci	r17, 0xFF	; 255
    469c:	fe 01       	movw	r30, r28
    469e:	e1 5a       	subi	r30, 0xA1	; 161
    46a0:	ff 4f       	sbci	r31, 0xFF	; 255
    46a2:	60 81       	ld	r22, Z
    46a4:	71 81       	ldd	r23, Z+1	; 0x01
    46a6:	82 81       	ldd	r24, Z+2	; 0x02
    46a8:	93 81       	ldd	r25, Z+3	; 0x03
    46aa:	20 e0       	ldi	r18, 0x00	; 0
    46ac:	30 e0       	ldi	r19, 0x00	; 0
    46ae:	4a ef       	ldi	r20, 0xFA	; 250
    46b0:	54 e4       	ldi	r21, 0x44	; 68
    46b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46b6:	dc 01       	movw	r26, r24
    46b8:	cb 01       	movw	r24, r22
    46ba:	f8 01       	movw	r30, r16
    46bc:	80 83       	st	Z, r24
    46be:	91 83       	std	Z+1, r25	; 0x01
    46c0:	a2 83       	std	Z+2, r26	; 0x02
    46c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    46c4:	fe 01       	movw	r30, r28
    46c6:	e5 5a       	subi	r30, 0xA5	; 165
    46c8:	ff 4f       	sbci	r31, 0xFF	; 255
    46ca:	60 81       	ld	r22, Z
    46cc:	71 81       	ldd	r23, Z+1	; 0x01
    46ce:	82 81       	ldd	r24, Z+2	; 0x02
    46d0:	93 81       	ldd	r25, Z+3	; 0x03
    46d2:	20 e0       	ldi	r18, 0x00	; 0
    46d4:	30 e0       	ldi	r19, 0x00	; 0
    46d6:	40 e8       	ldi	r20, 0x80	; 128
    46d8:	5f e3       	ldi	r21, 0x3F	; 63
    46da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    46de:	88 23       	and	r24, r24
    46e0:	44 f4       	brge	.+16     	; 0x46f2 <Start+0x382>
		__ticks = 1;
    46e2:	fe 01       	movw	r30, r28
    46e4:	e7 5a       	subi	r30, 0xA7	; 167
    46e6:	ff 4f       	sbci	r31, 0xFF	; 255
    46e8:	81 e0       	ldi	r24, 0x01	; 1
    46ea:	90 e0       	ldi	r25, 0x00	; 0
    46ec:	91 83       	std	Z+1, r25	; 0x01
    46ee:	80 83       	st	Z, r24
    46f0:	64 c0       	rjmp	.+200    	; 0x47ba <Start+0x44a>
	else if (__tmp > 65535)
    46f2:	fe 01       	movw	r30, r28
    46f4:	e5 5a       	subi	r30, 0xA5	; 165
    46f6:	ff 4f       	sbci	r31, 0xFF	; 255
    46f8:	60 81       	ld	r22, Z
    46fa:	71 81       	ldd	r23, Z+1	; 0x01
    46fc:	82 81       	ldd	r24, Z+2	; 0x02
    46fe:	93 81       	ldd	r25, Z+3	; 0x03
    4700:	20 e0       	ldi	r18, 0x00	; 0
    4702:	3f ef       	ldi	r19, 0xFF	; 255
    4704:	4f e7       	ldi	r20, 0x7F	; 127
    4706:	57 e4       	ldi	r21, 0x47	; 71
    4708:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    470c:	18 16       	cp	r1, r24
    470e:	0c f0       	brlt	.+2      	; 0x4712 <Start+0x3a2>
    4710:	43 c0       	rjmp	.+134    	; 0x4798 <Start+0x428>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4712:	fe 01       	movw	r30, r28
    4714:	e1 5a       	subi	r30, 0xA1	; 161
    4716:	ff 4f       	sbci	r31, 0xFF	; 255
    4718:	60 81       	ld	r22, Z
    471a:	71 81       	ldd	r23, Z+1	; 0x01
    471c:	82 81       	ldd	r24, Z+2	; 0x02
    471e:	93 81       	ldd	r25, Z+3	; 0x03
    4720:	20 e0       	ldi	r18, 0x00	; 0
    4722:	30 e0       	ldi	r19, 0x00	; 0
    4724:	40 e2       	ldi	r20, 0x20	; 32
    4726:	51 e4       	ldi	r21, 0x41	; 65
    4728:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    472c:	dc 01       	movw	r26, r24
    472e:	cb 01       	movw	r24, r22
    4730:	8e 01       	movw	r16, r28
    4732:	07 5a       	subi	r16, 0xA7	; 167
    4734:	1f 4f       	sbci	r17, 0xFF	; 255
    4736:	bc 01       	movw	r22, r24
    4738:	cd 01       	movw	r24, r26
    473a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    473e:	dc 01       	movw	r26, r24
    4740:	cb 01       	movw	r24, r22
    4742:	f8 01       	movw	r30, r16
    4744:	91 83       	std	Z+1, r25	; 0x01
    4746:	80 83       	st	Z, r24
    4748:	1f c0       	rjmp	.+62     	; 0x4788 <Start+0x418>
    474a:	fe 01       	movw	r30, r28
    474c:	e9 5a       	subi	r30, 0xA9	; 169
    474e:	ff 4f       	sbci	r31, 0xFF	; 255
    4750:	88 ec       	ldi	r24, 0xC8	; 200
    4752:	90 e0       	ldi	r25, 0x00	; 0
    4754:	91 83       	std	Z+1, r25	; 0x01
    4756:	80 83       	st	Z, r24
    4758:	fe 01       	movw	r30, r28
    475a:	e9 5a       	subi	r30, 0xA9	; 169
    475c:	ff 4f       	sbci	r31, 0xFF	; 255
    475e:	80 81       	ld	r24, Z
    4760:	91 81       	ldd	r25, Z+1	; 0x01
    4762:	01 97       	sbiw	r24, 0x01	; 1
    4764:	f1 f7       	brne	.-4      	; 0x4762 <Start+0x3f2>
    4766:	fe 01       	movw	r30, r28
    4768:	e9 5a       	subi	r30, 0xA9	; 169
    476a:	ff 4f       	sbci	r31, 0xFF	; 255
    476c:	91 83       	std	Z+1, r25	; 0x01
    476e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4770:	de 01       	movw	r26, r28
    4772:	a7 5a       	subi	r26, 0xA7	; 167
    4774:	bf 4f       	sbci	r27, 0xFF	; 255
    4776:	fe 01       	movw	r30, r28
    4778:	e7 5a       	subi	r30, 0xA7	; 167
    477a:	ff 4f       	sbci	r31, 0xFF	; 255
    477c:	80 81       	ld	r24, Z
    477e:	91 81       	ldd	r25, Z+1	; 0x01
    4780:	01 97       	sbiw	r24, 0x01	; 1
    4782:	11 96       	adiw	r26, 0x01	; 1
    4784:	9c 93       	st	X, r25
    4786:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4788:	fe 01       	movw	r30, r28
    478a:	e7 5a       	subi	r30, 0xA7	; 167
    478c:	ff 4f       	sbci	r31, 0xFF	; 255
    478e:	80 81       	ld	r24, Z
    4790:	91 81       	ldd	r25, Z+1	; 0x01
    4792:	00 97       	sbiw	r24, 0x00	; 0
    4794:	d1 f6       	brne	.-76     	; 0x474a <Start+0x3da>
    4796:	27 c0       	rjmp	.+78     	; 0x47e6 <Start+0x476>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4798:	8e 01       	movw	r16, r28
    479a:	07 5a       	subi	r16, 0xA7	; 167
    479c:	1f 4f       	sbci	r17, 0xFF	; 255
    479e:	fe 01       	movw	r30, r28
    47a0:	e5 5a       	subi	r30, 0xA5	; 165
    47a2:	ff 4f       	sbci	r31, 0xFF	; 255
    47a4:	60 81       	ld	r22, Z
    47a6:	71 81       	ldd	r23, Z+1	; 0x01
    47a8:	82 81       	ldd	r24, Z+2	; 0x02
    47aa:	93 81       	ldd	r25, Z+3	; 0x03
    47ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47b0:	dc 01       	movw	r26, r24
    47b2:	cb 01       	movw	r24, r22
    47b4:	f8 01       	movw	r30, r16
    47b6:	91 83       	std	Z+1, r25	; 0x01
    47b8:	80 83       	st	Z, r24
    47ba:	de 01       	movw	r26, r28
    47bc:	ab 5a       	subi	r26, 0xAB	; 171
    47be:	bf 4f       	sbci	r27, 0xFF	; 255
    47c0:	fe 01       	movw	r30, r28
    47c2:	e7 5a       	subi	r30, 0xA7	; 167
    47c4:	ff 4f       	sbci	r31, 0xFF	; 255
    47c6:	80 81       	ld	r24, Z
    47c8:	91 81       	ldd	r25, Z+1	; 0x01
    47ca:	8d 93       	st	X+, r24
    47cc:	9c 93       	st	X, r25
    47ce:	fe 01       	movw	r30, r28
    47d0:	eb 5a       	subi	r30, 0xAB	; 171
    47d2:	ff 4f       	sbci	r31, 0xFF	; 255
    47d4:	80 81       	ld	r24, Z
    47d6:	91 81       	ldd	r25, Z+1	; 0x01
    47d8:	01 97       	sbiw	r24, 0x01	; 1
    47da:	f1 f7       	brne	.-4      	; 0x47d8 <Start+0x468>
    47dc:	fe 01       	movw	r30, r28
    47de:	eb 5a       	subi	r30, 0xAB	; 171
    47e0:	ff 4f       	sbci	r31, 0xFF	; 255
    47e2:	91 83       	std	Z+1, r25	; 0x01
    47e4:	80 83       	st	Z, r24
		CLCD_voidWriteNumber(Local_u8ArrID[Local_u8Counter],1);
		Local_u8Counter++;
	}
	_delay_ms(200);
	lable1:
	Local_u8Counter=0;
    47e6:	fe 01       	movw	r30, r28
    47e8:	ee 58       	subi	r30, 0x8E	; 142
    47ea:	ff 4f       	sbci	r31, 0xFF	; 255
    47ec:	10 82       	st	Z, r1
	CLCD_voidSendCommand(1);
    47ee:	81 e0       	ldi	r24, 0x01	; 1
    47f0:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidSendCommand>
	CLCD_voidSendString("Enter Pass:");
    47f4:	8b e2       	ldi	r24, 0x2B	; 43
    47f6:	91 e0       	ldi	r25, 0x01	; 1
    47f8:	0e 94 b0 09 	call	0x1360	; 0x1360 <CLCD_voidSendString>
    47fc:	49 c0       	rjmp	.+146    	; 0x4890 <Start+0x520>
	/*Entering the Password*/
	while(Local_u8Counter < Local_u8Length)
	{
		do
		{
			Local_u8Key=KPD_u8GetPressedKey();
    47fe:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <KPD_u8GetPressedKey>
    4802:	fe 01       	movw	r30, r28
    4804:	ec 58       	subi	r30, 0x8C	; 140
    4806:	ff 4f       	sbci	r31, 0xFF	; 255
    4808:	80 83       	st	Z, r24

		}while(Local_u8Key==0xff);
    480a:	fe 01       	movw	r30, r28
    480c:	ec 58       	subi	r30, 0x8C	; 140
    480e:	ff 4f       	sbci	r31, 0xFF	; 255
    4810:	80 81       	ld	r24, Z
    4812:	8f 3f       	cpi	r24, 0xFF	; 255
    4814:	a1 f3       	breq	.-24     	; 0x47fe <Start+0x48e>

		Local_u8ArrPassword[Local_u8Counter]=Local_u8Key;
    4816:	fe 01       	movw	r30, r28
    4818:	ee 58       	subi	r30, 0x8E	; 142
    481a:	ff 4f       	sbci	r31, 0xFF	; 255
    481c:	80 81       	ld	r24, Z
    481e:	28 2f       	mov	r18, r24
    4820:	30 e0       	ldi	r19, 0x00	; 0
    4822:	ce 01       	movw	r24, r28
    4824:	87 58       	subi	r24, 0x87	; 135
    4826:	9f 4f       	sbci	r25, 0xFF	; 255
    4828:	dc 01       	movw	r26, r24
    482a:	a2 0f       	add	r26, r18
    482c:	b3 1f       	adc	r27, r19
    482e:	fe 01       	movw	r30, r28
    4830:	ec 58       	subi	r30, 0x8C	; 140
    4832:	ff 4f       	sbci	r31, 0xFF	; 255
    4834:	80 81       	ld	r24, Z
    4836:	8c 93       	st	X, r24
		CLCD_voidGoToXY(0,11+Local_u8Counter);
    4838:	fe 01       	movw	r30, r28
    483a:	ee 58       	subi	r30, 0x8E	; 142
    483c:	ff 4f       	sbci	r31, 0xFF	; 255
    483e:	80 81       	ld	r24, Z
    4840:	98 2f       	mov	r25, r24
    4842:	95 5f       	subi	r25, 0xF5	; 245
    4844:	80 e0       	ldi	r24, 0x00	; 0
    4846:	69 2f       	mov	r22, r25
    4848:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <CLCD_voidGoToXY>
		CLCD_voidWriteNumber(Local_u8ArrPassword[Local_u8Counter],1);
    484c:	fe 01       	movw	r30, r28
    484e:	ee 58       	subi	r30, 0x8E	; 142
    4850:	ff 4f       	sbci	r31, 0xFF	; 255
    4852:	80 81       	ld	r24, Z
    4854:	28 2f       	mov	r18, r24
    4856:	30 e0       	ldi	r19, 0x00	; 0
    4858:	ce 01       	movw	r24, r28
    485a:	87 58       	subi	r24, 0x87	; 135
    485c:	9f 4f       	sbci	r25, 0xFF	; 255
    485e:	fc 01       	movw	r30, r24
    4860:	e2 0f       	add	r30, r18
    4862:	f3 1f       	adc	r31, r19
    4864:	80 81       	ld	r24, Z
    4866:	88 2f       	mov	r24, r24
    4868:	90 e0       	ldi	r25, 0x00	; 0
    486a:	a0 e0       	ldi	r26, 0x00	; 0
    486c:	b0 e0       	ldi	r27, 0x00	; 0
    486e:	bc 01       	movw	r22, r24
    4870:	cd 01       	movw	r24, r26
    4872:	21 e0       	ldi	r18, 0x01	; 1
    4874:	30 e0       	ldi	r19, 0x00	; 0
    4876:	40 e0       	ldi	r20, 0x00	; 0
    4878:	50 e0       	ldi	r21, 0x00	; 0
    487a:	0e 94 38 0a 	call	0x1470	; 0x1470 <CLCD_voidWriteNumber>
		Local_u8Counter++;
    487e:	de 01       	movw	r26, r28
    4880:	ae 58       	subi	r26, 0x8E	; 142
    4882:	bf 4f       	sbci	r27, 0xFF	; 255
    4884:	fe 01       	movw	r30, r28
    4886:	ee 58       	subi	r30, 0x8E	; 142
    4888:	ff 4f       	sbci	r31, 0xFF	; 255
    488a:	80 81       	ld	r24, Z
    488c:	8f 5f       	subi	r24, 0xFF	; 255
    488e:	8c 93       	st	X, r24
	Local_u8Counter=0;
	CLCD_voidSendCommand(1);
	CLCD_voidSendString("Enter Pass:");

	/*Entering the Password*/
	while(Local_u8Counter < Local_u8Length)
    4890:	fe 01       	movw	r30, r28
    4892:	ee 58       	subi	r30, 0x8E	; 142
    4894:	ff 4f       	sbci	r31, 0xFF	; 255
    4896:	de 01       	movw	r26, r28
    4898:	ad 58       	subi	r26, 0x8D	; 141
    489a:	bf 4f       	sbci	r27, 0xFF	; 255
    489c:	90 81       	ld	r25, Z
    489e:	8c 91       	ld	r24, X
    48a0:	98 17       	cp	r25, r24
    48a2:	08 f4       	brcc	.+2      	; 0x48a6 <Start+0x536>
    48a4:	ac cf       	rjmp	.-168    	; 0x47fe <Start+0x48e>
    48a6:	fe 01       	movw	r30, r28
    48a8:	ef 5a       	subi	r30, 0xAF	; 175
    48aa:	ff 4f       	sbci	r31, 0xFF	; 255
    48ac:	80 e0       	ldi	r24, 0x00	; 0
    48ae:	90 e0       	ldi	r25, 0x00	; 0
    48b0:	a8 e4       	ldi	r26, 0x48	; 72
    48b2:	b3 e4       	ldi	r27, 0x43	; 67
    48b4:	80 83       	st	Z, r24
    48b6:	91 83       	std	Z+1, r25	; 0x01
    48b8:	a2 83       	std	Z+2, r26	; 0x02
    48ba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48bc:	8e 01       	movw	r16, r28
    48be:	03 5b       	subi	r16, 0xB3	; 179
    48c0:	1f 4f       	sbci	r17, 0xFF	; 255
    48c2:	fe 01       	movw	r30, r28
    48c4:	ef 5a       	subi	r30, 0xAF	; 175
    48c6:	ff 4f       	sbci	r31, 0xFF	; 255
    48c8:	60 81       	ld	r22, Z
    48ca:	71 81       	ldd	r23, Z+1	; 0x01
    48cc:	82 81       	ldd	r24, Z+2	; 0x02
    48ce:	93 81       	ldd	r25, Z+3	; 0x03
    48d0:	20 e0       	ldi	r18, 0x00	; 0
    48d2:	30 e0       	ldi	r19, 0x00	; 0
    48d4:	4a ef       	ldi	r20, 0xFA	; 250
    48d6:	54 e4       	ldi	r21, 0x44	; 68
    48d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48dc:	dc 01       	movw	r26, r24
    48de:	cb 01       	movw	r24, r22
    48e0:	f8 01       	movw	r30, r16
    48e2:	80 83       	st	Z, r24
    48e4:	91 83       	std	Z+1, r25	; 0x01
    48e6:	a2 83       	std	Z+2, r26	; 0x02
    48e8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    48ea:	fe 01       	movw	r30, r28
    48ec:	e3 5b       	subi	r30, 0xB3	; 179
    48ee:	ff 4f       	sbci	r31, 0xFF	; 255
    48f0:	60 81       	ld	r22, Z
    48f2:	71 81       	ldd	r23, Z+1	; 0x01
    48f4:	82 81       	ldd	r24, Z+2	; 0x02
    48f6:	93 81       	ldd	r25, Z+3	; 0x03
    48f8:	20 e0       	ldi	r18, 0x00	; 0
    48fa:	30 e0       	ldi	r19, 0x00	; 0
    48fc:	40 e8       	ldi	r20, 0x80	; 128
    48fe:	5f e3       	ldi	r21, 0x3F	; 63
    4900:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4904:	88 23       	and	r24, r24
    4906:	44 f4       	brge	.+16     	; 0x4918 <Start+0x5a8>
		__ticks = 1;
    4908:	fe 01       	movw	r30, r28
    490a:	e5 5b       	subi	r30, 0xB5	; 181
    490c:	ff 4f       	sbci	r31, 0xFF	; 255
    490e:	81 e0       	ldi	r24, 0x01	; 1
    4910:	90 e0       	ldi	r25, 0x00	; 0
    4912:	91 83       	std	Z+1, r25	; 0x01
    4914:	80 83       	st	Z, r24
    4916:	64 c0       	rjmp	.+200    	; 0x49e0 <Start+0x670>
	else if (__tmp > 65535)
    4918:	fe 01       	movw	r30, r28
    491a:	e3 5b       	subi	r30, 0xB3	; 179
    491c:	ff 4f       	sbci	r31, 0xFF	; 255
    491e:	60 81       	ld	r22, Z
    4920:	71 81       	ldd	r23, Z+1	; 0x01
    4922:	82 81       	ldd	r24, Z+2	; 0x02
    4924:	93 81       	ldd	r25, Z+3	; 0x03
    4926:	20 e0       	ldi	r18, 0x00	; 0
    4928:	3f ef       	ldi	r19, 0xFF	; 255
    492a:	4f e7       	ldi	r20, 0x7F	; 127
    492c:	57 e4       	ldi	r21, 0x47	; 71
    492e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4932:	18 16       	cp	r1, r24
    4934:	0c f0       	brlt	.+2      	; 0x4938 <Start+0x5c8>
    4936:	43 c0       	rjmp	.+134    	; 0x49be <Start+0x64e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4938:	fe 01       	movw	r30, r28
    493a:	ef 5a       	subi	r30, 0xAF	; 175
    493c:	ff 4f       	sbci	r31, 0xFF	; 255
    493e:	60 81       	ld	r22, Z
    4940:	71 81       	ldd	r23, Z+1	; 0x01
    4942:	82 81       	ldd	r24, Z+2	; 0x02
    4944:	93 81       	ldd	r25, Z+3	; 0x03
    4946:	20 e0       	ldi	r18, 0x00	; 0
    4948:	30 e0       	ldi	r19, 0x00	; 0
    494a:	40 e2       	ldi	r20, 0x20	; 32
    494c:	51 e4       	ldi	r21, 0x41	; 65
    494e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4952:	dc 01       	movw	r26, r24
    4954:	cb 01       	movw	r24, r22
    4956:	8e 01       	movw	r16, r28
    4958:	05 5b       	subi	r16, 0xB5	; 181
    495a:	1f 4f       	sbci	r17, 0xFF	; 255
    495c:	bc 01       	movw	r22, r24
    495e:	cd 01       	movw	r24, r26
    4960:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4964:	dc 01       	movw	r26, r24
    4966:	cb 01       	movw	r24, r22
    4968:	f8 01       	movw	r30, r16
    496a:	91 83       	std	Z+1, r25	; 0x01
    496c:	80 83       	st	Z, r24
    496e:	1f c0       	rjmp	.+62     	; 0x49ae <Start+0x63e>
    4970:	fe 01       	movw	r30, r28
    4972:	e7 5b       	subi	r30, 0xB7	; 183
    4974:	ff 4f       	sbci	r31, 0xFF	; 255
    4976:	88 ec       	ldi	r24, 0xC8	; 200
    4978:	90 e0       	ldi	r25, 0x00	; 0
    497a:	91 83       	std	Z+1, r25	; 0x01
    497c:	80 83       	st	Z, r24
    497e:	fe 01       	movw	r30, r28
    4980:	e7 5b       	subi	r30, 0xB7	; 183
    4982:	ff 4f       	sbci	r31, 0xFF	; 255
    4984:	80 81       	ld	r24, Z
    4986:	91 81       	ldd	r25, Z+1	; 0x01
    4988:	01 97       	sbiw	r24, 0x01	; 1
    498a:	f1 f7       	brne	.-4      	; 0x4988 <Start+0x618>
    498c:	fe 01       	movw	r30, r28
    498e:	e7 5b       	subi	r30, 0xB7	; 183
    4990:	ff 4f       	sbci	r31, 0xFF	; 255
    4992:	91 83       	std	Z+1, r25	; 0x01
    4994:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4996:	de 01       	movw	r26, r28
    4998:	a5 5b       	subi	r26, 0xB5	; 181
    499a:	bf 4f       	sbci	r27, 0xFF	; 255
    499c:	fe 01       	movw	r30, r28
    499e:	e5 5b       	subi	r30, 0xB5	; 181
    49a0:	ff 4f       	sbci	r31, 0xFF	; 255
    49a2:	80 81       	ld	r24, Z
    49a4:	91 81       	ldd	r25, Z+1	; 0x01
    49a6:	01 97       	sbiw	r24, 0x01	; 1
    49a8:	11 96       	adiw	r26, 0x01	; 1
    49aa:	9c 93       	st	X, r25
    49ac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49ae:	fe 01       	movw	r30, r28
    49b0:	e5 5b       	subi	r30, 0xB5	; 181
    49b2:	ff 4f       	sbci	r31, 0xFF	; 255
    49b4:	80 81       	ld	r24, Z
    49b6:	91 81       	ldd	r25, Z+1	; 0x01
    49b8:	00 97       	sbiw	r24, 0x00	; 0
    49ba:	d1 f6       	brne	.-76     	; 0x4970 <Start+0x600>
    49bc:	28 c0       	rjmp	.+80     	; 0x4a0e <Start+0x69e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49be:	8e 01       	movw	r16, r28
    49c0:	05 5b       	subi	r16, 0xB5	; 181
    49c2:	1f 4f       	sbci	r17, 0xFF	; 255
    49c4:	fe 01       	movw	r30, r28
    49c6:	e3 5b       	subi	r30, 0xB3	; 179
    49c8:	ff 4f       	sbci	r31, 0xFF	; 255
    49ca:	60 81       	ld	r22, Z
    49cc:	71 81       	ldd	r23, Z+1	; 0x01
    49ce:	82 81       	ldd	r24, Z+2	; 0x02
    49d0:	93 81       	ldd	r25, Z+3	; 0x03
    49d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49d6:	dc 01       	movw	r26, r24
    49d8:	cb 01       	movw	r24, r22
    49da:	f8 01       	movw	r30, r16
    49dc:	91 83       	std	Z+1, r25	; 0x01
    49de:	80 83       	st	Z, r24
    49e0:	de 01       	movw	r26, r28
    49e2:	a9 5b       	subi	r26, 0xB9	; 185
    49e4:	bf 4f       	sbci	r27, 0xFF	; 255
    49e6:	fe 01       	movw	r30, r28
    49e8:	e5 5b       	subi	r30, 0xB5	; 181
    49ea:	ff 4f       	sbci	r31, 0xFF	; 255
    49ec:	80 81       	ld	r24, Z
    49ee:	91 81       	ldd	r25, Z+1	; 0x01
    49f0:	11 96       	adiw	r26, 0x01	; 1
    49f2:	9c 93       	st	X, r25
    49f4:	8e 93       	st	-X, r24
    49f6:	fe 01       	movw	r30, r28
    49f8:	e9 5b       	subi	r30, 0xB9	; 185
    49fa:	ff 4f       	sbci	r31, 0xFF	; 255
    49fc:	80 81       	ld	r24, Z
    49fe:	91 81       	ldd	r25, Z+1	; 0x01
    4a00:	01 97       	sbiw	r24, 0x01	; 1
    4a02:	f1 f7       	brne	.-4      	; 0x4a00 <Start+0x690>
    4a04:	fe 01       	movw	r30, r28
    4a06:	e9 5b       	subi	r30, 0xB9	; 185
    4a08:	ff 4f       	sbci	r31, 0xFF	; 255
    4a0a:	91 83       	std	Z+1, r25	; 0x01
    4a0c:	80 83       	st	Z, r24
		CLCD_voidWriteNumber(Local_u8ArrPassword[Local_u8Counter],1);
		Local_u8Counter++;
	}
	_delay_ms(200);

	Local_u8Counter=0;
    4a0e:	fe 01       	movw	r30, r28
    4a10:	ee 58       	subi	r30, 0x8E	; 142
    4a12:	ff 4f       	sbci	r31, 0xFF	; 255
    4a14:	10 82       	st	Z, r1
	Global_u8Flag=0;
    4a16:	10 92 db 01 	sts	0x01DB, r1

	/* Check if the Password == ID Inverted or not */
	for(Local_u8Counter=0;Local_u8Counter < Local_u8Length;Local_u8Counter++)
    4a1a:	fe 01       	movw	r30, r28
    4a1c:	ee 58       	subi	r30, 0x8E	; 142
    4a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a20:	10 82       	st	Z, r1
    4a22:	30 c0       	rjmp	.+96     	; 0x4a84 <Start+0x714>
	{
		if(Local_u8ArrPassword[3-Local_u8Counter] == Local_u8ArrID[Local_u8Counter])
    4a24:	fe 01       	movw	r30, r28
    4a26:	ee 58       	subi	r30, 0x8E	; 142
    4a28:	ff 4f       	sbci	r31, 0xFF	; 255
    4a2a:	80 81       	ld	r24, Z
    4a2c:	28 2f       	mov	r18, r24
    4a2e:	30 e0       	ldi	r19, 0x00	; 0
    4a30:	83 e0       	ldi	r24, 0x03	; 3
    4a32:	90 e0       	ldi	r25, 0x00	; 0
    4a34:	ac 01       	movw	r20, r24
    4a36:	42 1b       	sub	r20, r18
    4a38:	53 0b       	sbc	r21, r19
    4a3a:	9a 01       	movw	r18, r20
    4a3c:	ce 01       	movw	r24, r28
    4a3e:	87 58       	subi	r24, 0x87	; 135
    4a40:	9f 4f       	sbci	r25, 0xFF	; 255
    4a42:	fc 01       	movw	r30, r24
    4a44:	e2 0f       	add	r30, r18
    4a46:	f3 1f       	adc	r31, r19
    4a48:	40 81       	ld	r20, Z
    4a4a:	fe 01       	movw	r30, r28
    4a4c:	ee 58       	subi	r30, 0x8E	; 142
    4a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a50:	80 81       	ld	r24, Z
    4a52:	28 2f       	mov	r18, r24
    4a54:	30 e0       	ldi	r19, 0x00	; 0
    4a56:	ce 01       	movw	r24, r28
    4a58:	8b 58       	subi	r24, 0x8B	; 139
    4a5a:	9f 4f       	sbci	r25, 0xFF	; 255
    4a5c:	fc 01       	movw	r30, r24
    4a5e:	e2 0f       	add	r30, r18
    4a60:	f3 1f       	adc	r31, r19
    4a62:	80 81       	ld	r24, Z
    4a64:	48 17       	cp	r20, r24
    4a66:	29 f4       	brne	.+10     	; 0x4a72 <Start+0x702>
		{
			Global_u8Flag++;
    4a68:	80 91 db 01 	lds	r24, 0x01DB
    4a6c:	8f 5f       	subi	r24, 0xFF	; 255
    4a6e:	80 93 db 01 	sts	0x01DB, r24

	Local_u8Counter=0;
	Global_u8Flag=0;

	/* Check if the Password == ID Inverted or not */
	for(Local_u8Counter=0;Local_u8Counter < Local_u8Length;Local_u8Counter++)
    4a72:	de 01       	movw	r26, r28
    4a74:	ae 58       	subi	r26, 0x8E	; 142
    4a76:	bf 4f       	sbci	r27, 0xFF	; 255
    4a78:	fe 01       	movw	r30, r28
    4a7a:	ee 58       	subi	r30, 0x8E	; 142
    4a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a7e:	80 81       	ld	r24, Z
    4a80:	8f 5f       	subi	r24, 0xFF	; 255
    4a82:	8c 93       	st	X, r24
    4a84:	fe 01       	movw	r30, r28
    4a86:	ee 58       	subi	r30, 0x8E	; 142
    4a88:	ff 4f       	sbci	r31, 0xFF	; 255
    4a8a:	de 01       	movw	r26, r28
    4a8c:	ad 58       	subi	r26, 0x8D	; 141
    4a8e:	bf 4f       	sbci	r27, 0xFF	; 255
    4a90:	90 81       	ld	r25, Z
    4a92:	8c 91       	ld	r24, X
    4a94:	98 17       	cp	r25, r24
    4a96:	30 f2       	brcs	.-116    	; 0x4a24 <Start+0x6b4>
			Global_u8Flag++;
		}
	}


	if(Global_u8Flag == 4)
    4a98:	80 91 db 01 	lds	r24, 0x01DB
    4a9c:	84 30       	cpi	r24, 0x04	; 4
    4a9e:	09 f0       	breq	.+2      	; 0x4aa2 <Start+0x732>
    4aa0:	d4 c0       	rjmp	.+424    	; 0x4c4a <Start+0x8da>
	{
		CLCD_voidSendCommand(1);
    4aa2:	81 e0       	ldi	r24, 0x01	; 1
    4aa4:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidSendCommand>
		CLCD_voidSendString("Welcome");
    4aa8:	87 e3       	ldi	r24, 0x37	; 55
    4aaa:	91 e0       	ldi	r25, 0x01	; 1
    4aac:	0e 94 b0 09 	call	0x1360	; 0x1360 <CLCD_voidSendString>
		CLCD_voidGoToXY(0,8);
    4ab0:	80 e0       	ldi	r24, 0x00	; 0
    4ab2:	68 e0       	ldi	r22, 0x08	; 8
    4ab4:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <CLCD_voidGoToXY>
		Local_u8Counter=0;
    4ab8:	fe 01       	movw	r30, r28
    4aba:	ee 58       	subi	r30, 0x8E	; 142
    4abc:	ff 4f       	sbci	r31, 0xFF	; 255
    4abe:	10 82       	st	Z, r1
    4ac0:	2c c0       	rjmp	.+88     	; 0x4b1a <Start+0x7aa>
		while(Local_u8Counter < Local_u8Length)
		{
			CLCD_voidGoToXY(0,8+Local_u8Counter);
    4ac2:	fe 01       	movw	r30, r28
    4ac4:	ee 58       	subi	r30, 0x8E	; 142
    4ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ac8:	80 81       	ld	r24, Z
    4aca:	98 2f       	mov	r25, r24
    4acc:	98 5f       	subi	r25, 0xF8	; 248
    4ace:	80 e0       	ldi	r24, 0x00	; 0
    4ad0:	69 2f       	mov	r22, r25
    4ad2:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <CLCD_voidGoToXY>
			CLCD_voidWriteNumber(Local_u8ArrID[Local_u8Counter],1);
    4ad6:	fe 01       	movw	r30, r28
    4ad8:	ee 58       	subi	r30, 0x8E	; 142
    4ada:	ff 4f       	sbci	r31, 0xFF	; 255
    4adc:	80 81       	ld	r24, Z
    4ade:	28 2f       	mov	r18, r24
    4ae0:	30 e0       	ldi	r19, 0x00	; 0
    4ae2:	ce 01       	movw	r24, r28
    4ae4:	8b 58       	subi	r24, 0x8B	; 139
    4ae6:	9f 4f       	sbci	r25, 0xFF	; 255
    4ae8:	fc 01       	movw	r30, r24
    4aea:	e2 0f       	add	r30, r18
    4aec:	f3 1f       	adc	r31, r19
    4aee:	80 81       	ld	r24, Z
    4af0:	88 2f       	mov	r24, r24
    4af2:	90 e0       	ldi	r25, 0x00	; 0
    4af4:	a0 e0       	ldi	r26, 0x00	; 0
    4af6:	b0 e0       	ldi	r27, 0x00	; 0
    4af8:	bc 01       	movw	r22, r24
    4afa:	cd 01       	movw	r24, r26
    4afc:	21 e0       	ldi	r18, 0x01	; 1
    4afe:	30 e0       	ldi	r19, 0x00	; 0
    4b00:	40 e0       	ldi	r20, 0x00	; 0
    4b02:	50 e0       	ldi	r21, 0x00	; 0
    4b04:	0e 94 38 0a 	call	0x1470	; 0x1470 <CLCD_voidWriteNumber>
			Local_u8Counter++;
    4b08:	de 01       	movw	r26, r28
    4b0a:	ae 58       	subi	r26, 0x8E	; 142
    4b0c:	bf 4f       	sbci	r27, 0xFF	; 255
    4b0e:	fe 01       	movw	r30, r28
    4b10:	ee 58       	subi	r30, 0x8E	; 142
    4b12:	ff 4f       	sbci	r31, 0xFF	; 255
    4b14:	80 81       	ld	r24, Z
    4b16:	8f 5f       	subi	r24, 0xFF	; 255
    4b18:	8c 93       	st	X, r24
	{
		CLCD_voidSendCommand(1);
		CLCD_voidSendString("Welcome");
		CLCD_voidGoToXY(0,8);
		Local_u8Counter=0;
		while(Local_u8Counter < Local_u8Length)
    4b1a:	fe 01       	movw	r30, r28
    4b1c:	ee 58       	subi	r30, 0x8E	; 142
    4b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b20:	de 01       	movw	r26, r28
    4b22:	ad 58       	subi	r26, 0x8D	; 141
    4b24:	bf 4f       	sbci	r27, 0xFF	; 255
    4b26:	90 81       	ld	r25, Z
    4b28:	8c 91       	ld	r24, X
    4b2a:	98 17       	cp	r25, r24
    4b2c:	50 f2       	brcs	.-108    	; 0x4ac2 <Start+0x752>
		{
			CLCD_voidGoToXY(0,8+Local_u8Counter);
			CLCD_voidWriteNumber(Local_u8ArrID[Local_u8Counter],1);
			Local_u8Counter++;
		}
		CLCD_voidWriteSpecialCharacter(Hamoksha,0,1,4);
    4b2e:	ce 01       	movw	r24, r28
    4b30:	82 58       	subi	r24, 0x82	; 130
    4b32:	9f 4f       	sbci	r25, 0xFF	; 255
    4b34:	60 e0       	ldi	r22, 0x00	; 0
    4b36:	41 e0       	ldi	r20, 0x01	; 1
    4b38:	24 e0       	ldi	r18, 0x04	; 4
    4b3a:	0e 94 f7 09 	call	0x13ee	; 0x13ee <CLCD_voidWriteSpecialCharacter>
    4b3e:	fe 01       	movw	r30, r28
    4b40:	ed 5b       	subi	r30, 0xBD	; 189
    4b42:	ff 4f       	sbci	r31, 0xFF	; 255
    4b44:	80 e0       	ldi	r24, 0x00	; 0
    4b46:	90 e0       	ldi	r25, 0x00	; 0
    4b48:	aa e7       	ldi	r26, 0x7A	; 122
    4b4a:	b4 e4       	ldi	r27, 0x44	; 68
    4b4c:	80 83       	st	Z, r24
    4b4e:	91 83       	std	Z+1, r25	; 0x01
    4b50:	a2 83       	std	Z+2, r26	; 0x02
    4b52:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b54:	8e 01       	movw	r16, r28
    4b56:	01 5c       	subi	r16, 0xC1	; 193
    4b58:	1f 4f       	sbci	r17, 0xFF	; 255
    4b5a:	fe 01       	movw	r30, r28
    4b5c:	ed 5b       	subi	r30, 0xBD	; 189
    4b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b60:	60 81       	ld	r22, Z
    4b62:	71 81       	ldd	r23, Z+1	; 0x01
    4b64:	82 81       	ldd	r24, Z+2	; 0x02
    4b66:	93 81       	ldd	r25, Z+3	; 0x03
    4b68:	20 e0       	ldi	r18, 0x00	; 0
    4b6a:	30 e0       	ldi	r19, 0x00	; 0
    4b6c:	4a ef       	ldi	r20, 0xFA	; 250
    4b6e:	54 e4       	ldi	r21, 0x44	; 68
    4b70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b74:	dc 01       	movw	r26, r24
    4b76:	cb 01       	movw	r24, r22
    4b78:	f8 01       	movw	r30, r16
    4b7a:	80 83       	st	Z, r24
    4b7c:	91 83       	std	Z+1, r25	; 0x01
    4b7e:	a2 83       	std	Z+2, r26	; 0x02
    4b80:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4b82:	fe 01       	movw	r30, r28
    4b84:	ff 96       	adiw	r30, 0x3f	; 63
    4b86:	60 81       	ld	r22, Z
    4b88:	71 81       	ldd	r23, Z+1	; 0x01
    4b8a:	82 81       	ldd	r24, Z+2	; 0x02
    4b8c:	93 81       	ldd	r25, Z+3	; 0x03
    4b8e:	20 e0       	ldi	r18, 0x00	; 0
    4b90:	30 e0       	ldi	r19, 0x00	; 0
    4b92:	40 e8       	ldi	r20, 0x80	; 128
    4b94:	5f e3       	ldi	r21, 0x3F	; 63
    4b96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4b9a:	88 23       	and	r24, r24
    4b9c:	2c f4       	brge	.+10     	; 0x4ba8 <Start+0x838>
		__ticks = 1;
    4b9e:	81 e0       	ldi	r24, 0x01	; 1
    4ba0:	90 e0       	ldi	r25, 0x00	; 0
    4ba2:	9e af       	std	Y+62, r25	; 0x3e
    4ba4:	8d af       	std	Y+61, r24	; 0x3d
    4ba6:	46 c0       	rjmp	.+140    	; 0x4c34 <Start+0x8c4>
	else if (__tmp > 65535)
    4ba8:	fe 01       	movw	r30, r28
    4baa:	ff 96       	adiw	r30, 0x3f	; 63
    4bac:	60 81       	ld	r22, Z
    4bae:	71 81       	ldd	r23, Z+1	; 0x01
    4bb0:	82 81       	ldd	r24, Z+2	; 0x02
    4bb2:	93 81       	ldd	r25, Z+3	; 0x03
    4bb4:	20 e0       	ldi	r18, 0x00	; 0
    4bb6:	3f ef       	ldi	r19, 0xFF	; 255
    4bb8:	4f e7       	ldi	r20, 0x7F	; 127
    4bba:	57 e4       	ldi	r21, 0x47	; 71
    4bbc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4bc0:	18 16       	cp	r1, r24
    4bc2:	64 f5       	brge	.+88     	; 0x4c1c <Start+0x8ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bc4:	fe 01       	movw	r30, r28
    4bc6:	ed 5b       	subi	r30, 0xBD	; 189
    4bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    4bca:	60 81       	ld	r22, Z
    4bcc:	71 81       	ldd	r23, Z+1	; 0x01
    4bce:	82 81       	ldd	r24, Z+2	; 0x02
    4bd0:	93 81       	ldd	r25, Z+3	; 0x03
    4bd2:	20 e0       	ldi	r18, 0x00	; 0
    4bd4:	30 e0       	ldi	r19, 0x00	; 0
    4bd6:	40 e2       	ldi	r20, 0x20	; 32
    4bd8:	51 e4       	ldi	r21, 0x41	; 65
    4bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bde:	dc 01       	movw	r26, r24
    4be0:	cb 01       	movw	r24, r22
    4be2:	bc 01       	movw	r22, r24
    4be4:	cd 01       	movw	r24, r26
    4be6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bea:	dc 01       	movw	r26, r24
    4bec:	cb 01       	movw	r24, r22
    4bee:	9e af       	std	Y+62, r25	; 0x3e
    4bf0:	8d af       	std	Y+61, r24	; 0x3d
    4bf2:	0f c0       	rjmp	.+30     	; 0x4c12 <Start+0x8a2>
    4bf4:	88 ec       	ldi	r24, 0xC8	; 200
    4bf6:	90 e0       	ldi	r25, 0x00	; 0
    4bf8:	9c af       	std	Y+60, r25	; 0x3c
    4bfa:	8b af       	std	Y+59, r24	; 0x3b
    4bfc:	8b ad       	ldd	r24, Y+59	; 0x3b
    4bfe:	9c ad       	ldd	r25, Y+60	; 0x3c
    4c00:	01 97       	sbiw	r24, 0x01	; 1
    4c02:	f1 f7       	brne	.-4      	; 0x4c00 <Start+0x890>
    4c04:	9c af       	std	Y+60, r25	; 0x3c
    4c06:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c08:	8d ad       	ldd	r24, Y+61	; 0x3d
    4c0a:	9e ad       	ldd	r25, Y+62	; 0x3e
    4c0c:	01 97       	sbiw	r24, 0x01	; 1
    4c0e:	9e af       	std	Y+62, r25	; 0x3e
    4c10:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c12:	8d ad       	ldd	r24, Y+61	; 0x3d
    4c14:	9e ad       	ldd	r25, Y+62	; 0x3e
    4c16:	00 97       	sbiw	r24, 0x00	; 0
    4c18:	69 f7       	brne	.-38     	; 0x4bf4 <Start+0x884>
    4c1a:	1f c1       	rjmp	.+574    	; 0x4e5a <Start+0xaea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c1c:	fe 01       	movw	r30, r28
    4c1e:	ff 96       	adiw	r30, 0x3f	; 63
    4c20:	60 81       	ld	r22, Z
    4c22:	71 81       	ldd	r23, Z+1	; 0x01
    4c24:	82 81       	ldd	r24, Z+2	; 0x02
    4c26:	93 81       	ldd	r25, Z+3	; 0x03
    4c28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c2c:	dc 01       	movw	r26, r24
    4c2e:	cb 01       	movw	r24, r22
    4c30:	9e af       	std	Y+62, r25	; 0x3e
    4c32:	8d af       	std	Y+61, r24	; 0x3d
    4c34:	8d ad       	ldd	r24, Y+61	; 0x3d
    4c36:	9e ad       	ldd	r25, Y+62	; 0x3e
    4c38:	9a af       	std	Y+58, r25	; 0x3a
    4c3a:	89 af       	std	Y+57, r24	; 0x39
    4c3c:	89 ad       	ldd	r24, Y+57	; 0x39
    4c3e:	9a ad       	ldd	r25, Y+58	; 0x3a
    4c40:	01 97       	sbiw	r24, 0x01	; 1
    4c42:	f1 f7       	brne	.-4      	; 0x4c40 <Start+0x8d0>
    4c44:	9a af       	std	Y+58, r25	; 0x3a
    4c46:	89 af       	std	Y+57, r24	; 0x39
    4c48:	08 c1       	rjmp	.+528    	; 0x4e5a <Start+0xaea>
		_delay_ms(1000);
	}
	else
	{
		CLCD_voidSendCommand(1);
    4c4a:	81 e0       	ldi	r24, 0x01	; 1
    4c4c:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidSendCommand>
		CLCD_voidSendString("Try Again!!");
    4c50:	8f e3       	ldi	r24, 0x3F	; 63
    4c52:	91 e0       	ldi	r25, 0x01	; 1
    4c54:	0e 94 b0 09 	call	0x1360	; 0x1360 <CLCD_voidSendString>
    4c58:	80 e0       	ldi	r24, 0x00	; 0
    4c5a:	90 e0       	ldi	r25, 0x00	; 0
    4c5c:	aa e7       	ldi	r26, 0x7A	; 122
    4c5e:	b4 e4       	ldi	r27, 0x44	; 68
    4c60:	8d ab       	std	Y+53, r24	; 0x35
    4c62:	9e ab       	std	Y+54, r25	; 0x36
    4c64:	af ab       	std	Y+55, r26	; 0x37
    4c66:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c68:	6d a9       	ldd	r22, Y+53	; 0x35
    4c6a:	7e a9       	ldd	r23, Y+54	; 0x36
    4c6c:	8f a9       	ldd	r24, Y+55	; 0x37
    4c6e:	98 ad       	ldd	r25, Y+56	; 0x38
    4c70:	20 e0       	ldi	r18, 0x00	; 0
    4c72:	30 e0       	ldi	r19, 0x00	; 0
    4c74:	4a ef       	ldi	r20, 0xFA	; 250
    4c76:	54 e4       	ldi	r21, 0x44	; 68
    4c78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c7c:	dc 01       	movw	r26, r24
    4c7e:	cb 01       	movw	r24, r22
    4c80:	89 ab       	std	Y+49, r24	; 0x31
    4c82:	9a ab       	std	Y+50, r25	; 0x32
    4c84:	ab ab       	std	Y+51, r26	; 0x33
    4c86:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4c88:	69 a9       	ldd	r22, Y+49	; 0x31
    4c8a:	7a a9       	ldd	r23, Y+50	; 0x32
    4c8c:	8b a9       	ldd	r24, Y+51	; 0x33
    4c8e:	9c a9       	ldd	r25, Y+52	; 0x34
    4c90:	20 e0       	ldi	r18, 0x00	; 0
    4c92:	30 e0       	ldi	r19, 0x00	; 0
    4c94:	40 e8       	ldi	r20, 0x80	; 128
    4c96:	5f e3       	ldi	r21, 0x3F	; 63
    4c98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4c9c:	88 23       	and	r24, r24
    4c9e:	2c f4       	brge	.+10     	; 0x4caa <Start+0x93a>
		__ticks = 1;
    4ca0:	81 e0       	ldi	r24, 0x01	; 1
    4ca2:	90 e0       	ldi	r25, 0x00	; 0
    4ca4:	98 ab       	std	Y+48, r25	; 0x30
    4ca6:	8f a7       	std	Y+47, r24	; 0x2f
    4ca8:	3f c0       	rjmp	.+126    	; 0x4d28 <Start+0x9b8>
	else if (__tmp > 65535)
    4caa:	69 a9       	ldd	r22, Y+49	; 0x31
    4cac:	7a a9       	ldd	r23, Y+50	; 0x32
    4cae:	8b a9       	ldd	r24, Y+51	; 0x33
    4cb0:	9c a9       	ldd	r25, Y+52	; 0x34
    4cb2:	20 e0       	ldi	r18, 0x00	; 0
    4cb4:	3f ef       	ldi	r19, 0xFF	; 255
    4cb6:	4f e7       	ldi	r20, 0x7F	; 127
    4cb8:	57 e4       	ldi	r21, 0x47	; 71
    4cba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4cbe:	18 16       	cp	r1, r24
    4cc0:	4c f5       	brge	.+82     	; 0x4d14 <Start+0x9a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4cc2:	6d a9       	ldd	r22, Y+53	; 0x35
    4cc4:	7e a9       	ldd	r23, Y+54	; 0x36
    4cc6:	8f a9       	ldd	r24, Y+55	; 0x37
    4cc8:	98 ad       	ldd	r25, Y+56	; 0x38
    4cca:	20 e0       	ldi	r18, 0x00	; 0
    4ccc:	30 e0       	ldi	r19, 0x00	; 0
    4cce:	40 e2       	ldi	r20, 0x20	; 32
    4cd0:	51 e4       	ldi	r21, 0x41	; 65
    4cd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cd6:	dc 01       	movw	r26, r24
    4cd8:	cb 01       	movw	r24, r22
    4cda:	bc 01       	movw	r22, r24
    4cdc:	cd 01       	movw	r24, r26
    4cde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ce2:	dc 01       	movw	r26, r24
    4ce4:	cb 01       	movw	r24, r22
    4ce6:	98 ab       	std	Y+48, r25	; 0x30
    4ce8:	8f a7       	std	Y+47, r24	; 0x2f
    4cea:	0f c0       	rjmp	.+30     	; 0x4d0a <Start+0x99a>
    4cec:	88 ec       	ldi	r24, 0xC8	; 200
    4cee:	90 e0       	ldi	r25, 0x00	; 0
    4cf0:	9e a7       	std	Y+46, r25	; 0x2e
    4cf2:	8d a7       	std	Y+45, r24	; 0x2d
    4cf4:	8d a5       	ldd	r24, Y+45	; 0x2d
    4cf6:	9e a5       	ldd	r25, Y+46	; 0x2e
    4cf8:	01 97       	sbiw	r24, 0x01	; 1
    4cfa:	f1 f7       	brne	.-4      	; 0x4cf8 <Start+0x988>
    4cfc:	9e a7       	std	Y+46, r25	; 0x2e
    4cfe:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d00:	8f a5       	ldd	r24, Y+47	; 0x2f
    4d02:	98 a9       	ldd	r25, Y+48	; 0x30
    4d04:	01 97       	sbiw	r24, 0x01	; 1
    4d06:	98 ab       	std	Y+48, r25	; 0x30
    4d08:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d0a:	8f a5       	ldd	r24, Y+47	; 0x2f
    4d0c:	98 a9       	ldd	r25, Y+48	; 0x30
    4d0e:	00 97       	sbiw	r24, 0x00	; 0
    4d10:	69 f7       	brne	.-38     	; 0x4cec <Start+0x97c>
    4d12:	14 c0       	rjmp	.+40     	; 0x4d3c <Start+0x9cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d14:	69 a9       	ldd	r22, Y+49	; 0x31
    4d16:	7a a9       	ldd	r23, Y+50	; 0x32
    4d18:	8b a9       	ldd	r24, Y+51	; 0x33
    4d1a:	9c a9       	ldd	r25, Y+52	; 0x34
    4d1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d20:	dc 01       	movw	r26, r24
    4d22:	cb 01       	movw	r24, r22
    4d24:	98 ab       	std	Y+48, r25	; 0x30
    4d26:	8f a7       	std	Y+47, r24	; 0x2f
    4d28:	8f a5       	ldd	r24, Y+47	; 0x2f
    4d2a:	98 a9       	ldd	r25, Y+48	; 0x30
    4d2c:	9c a7       	std	Y+44, r25	; 0x2c
    4d2e:	8b a7       	std	Y+43, r24	; 0x2b
    4d30:	8b a5       	ldd	r24, Y+43	; 0x2b
    4d32:	9c a5       	ldd	r25, Y+44	; 0x2c
    4d34:	01 97       	sbiw	r24, 0x01	; 1
    4d36:	f1 f7       	brne	.-4      	; 0x4d34 <Start+0x9c4>
    4d38:	9c a7       	std	Y+44, r25	; 0x2c
    4d3a:	8b a7       	std	Y+43, r24	; 0x2b

		_delay_ms(1000);
		SPI_u8TransceiveSynch(&Local_u8DataReceive,3-Local_u8WrongCounter);
    4d3c:	fe 01       	movw	r30, r28
    4d3e:	ef 58       	subi	r30, 0x8F	; 143
    4d40:	ff 4f       	sbci	r31, 0xFF	; 255
    4d42:	93 e0       	ldi	r25, 0x03	; 3
    4d44:	80 81       	ld	r24, Z
    4d46:	29 2f       	mov	r18, r25
    4d48:	28 1b       	sub	r18, r24
    4d4a:	ce 01       	movw	r24, r28
    4d4c:	83 58       	subi	r24, 0x83	; 131
    4d4e:	9f 4f       	sbci	r25, 0xFF	; 255
    4d50:	62 2f       	mov	r22, r18
    4d52:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <SPI_u8TransceiveSynch>
    4d56:	80 e0       	ldi	r24, 0x00	; 0
    4d58:	90 e0       	ldi	r25, 0x00	; 0
    4d5a:	a0 e2       	ldi	r26, 0x20	; 32
    4d5c:	b1 e4       	ldi	r27, 0x41	; 65
    4d5e:	8f a3       	std	Y+39, r24	; 0x27
    4d60:	98 a7       	std	Y+40, r25	; 0x28
    4d62:	a9 a7       	std	Y+41, r26	; 0x29
    4d64:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d66:	6f a1       	ldd	r22, Y+39	; 0x27
    4d68:	78 a5       	ldd	r23, Y+40	; 0x28
    4d6a:	89 a5       	ldd	r24, Y+41	; 0x29
    4d6c:	9a a5       	ldd	r25, Y+42	; 0x2a
    4d6e:	20 e0       	ldi	r18, 0x00	; 0
    4d70:	30 e0       	ldi	r19, 0x00	; 0
    4d72:	4a ef       	ldi	r20, 0xFA	; 250
    4d74:	54 e4       	ldi	r21, 0x44	; 68
    4d76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d7a:	dc 01       	movw	r26, r24
    4d7c:	cb 01       	movw	r24, r22
    4d7e:	8b a3       	std	Y+35, r24	; 0x23
    4d80:	9c a3       	std	Y+36, r25	; 0x24
    4d82:	ad a3       	std	Y+37, r26	; 0x25
    4d84:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4d86:	6b a1       	ldd	r22, Y+35	; 0x23
    4d88:	7c a1       	ldd	r23, Y+36	; 0x24
    4d8a:	8d a1       	ldd	r24, Y+37	; 0x25
    4d8c:	9e a1       	ldd	r25, Y+38	; 0x26
    4d8e:	20 e0       	ldi	r18, 0x00	; 0
    4d90:	30 e0       	ldi	r19, 0x00	; 0
    4d92:	40 e8       	ldi	r20, 0x80	; 128
    4d94:	5f e3       	ldi	r21, 0x3F	; 63
    4d96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4d9a:	88 23       	and	r24, r24
    4d9c:	2c f4       	brge	.+10     	; 0x4da8 <Start+0xa38>
		__ticks = 1;
    4d9e:	81 e0       	ldi	r24, 0x01	; 1
    4da0:	90 e0       	ldi	r25, 0x00	; 0
    4da2:	9a a3       	std	Y+34, r25	; 0x22
    4da4:	89 a3       	std	Y+33, r24	; 0x21
    4da6:	3f c0       	rjmp	.+126    	; 0x4e26 <Start+0xab6>
	else if (__tmp > 65535)
    4da8:	6b a1       	ldd	r22, Y+35	; 0x23
    4daa:	7c a1       	ldd	r23, Y+36	; 0x24
    4dac:	8d a1       	ldd	r24, Y+37	; 0x25
    4dae:	9e a1       	ldd	r25, Y+38	; 0x26
    4db0:	20 e0       	ldi	r18, 0x00	; 0
    4db2:	3f ef       	ldi	r19, 0xFF	; 255
    4db4:	4f e7       	ldi	r20, 0x7F	; 127
    4db6:	57 e4       	ldi	r21, 0x47	; 71
    4db8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4dbc:	18 16       	cp	r1, r24
    4dbe:	4c f5       	brge	.+82     	; 0x4e12 <Start+0xaa2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4dc0:	6f a1       	ldd	r22, Y+39	; 0x27
    4dc2:	78 a5       	ldd	r23, Y+40	; 0x28
    4dc4:	89 a5       	ldd	r24, Y+41	; 0x29
    4dc6:	9a a5       	ldd	r25, Y+42	; 0x2a
    4dc8:	20 e0       	ldi	r18, 0x00	; 0
    4dca:	30 e0       	ldi	r19, 0x00	; 0
    4dcc:	40 e2       	ldi	r20, 0x20	; 32
    4dce:	51 e4       	ldi	r21, 0x41	; 65
    4dd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4dd4:	dc 01       	movw	r26, r24
    4dd6:	cb 01       	movw	r24, r22
    4dd8:	bc 01       	movw	r22, r24
    4dda:	cd 01       	movw	r24, r26
    4ddc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4de0:	dc 01       	movw	r26, r24
    4de2:	cb 01       	movw	r24, r22
    4de4:	9a a3       	std	Y+34, r25	; 0x22
    4de6:	89 a3       	std	Y+33, r24	; 0x21
    4de8:	0f c0       	rjmp	.+30     	; 0x4e08 <Start+0xa98>
    4dea:	88 ec       	ldi	r24, 0xC8	; 200
    4dec:	90 e0       	ldi	r25, 0x00	; 0
    4dee:	98 a3       	std	Y+32, r25	; 0x20
    4df0:	8f 8f       	std	Y+31, r24	; 0x1f
    4df2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4df4:	98 a1       	ldd	r25, Y+32	; 0x20
    4df6:	01 97       	sbiw	r24, 0x01	; 1
    4df8:	f1 f7       	brne	.-4      	; 0x4df6 <Start+0xa86>
    4dfa:	98 a3       	std	Y+32, r25	; 0x20
    4dfc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4dfe:	89 a1       	ldd	r24, Y+33	; 0x21
    4e00:	9a a1       	ldd	r25, Y+34	; 0x22
    4e02:	01 97       	sbiw	r24, 0x01	; 1
    4e04:	9a a3       	std	Y+34, r25	; 0x22
    4e06:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e08:	89 a1       	ldd	r24, Y+33	; 0x21
    4e0a:	9a a1       	ldd	r25, Y+34	; 0x22
    4e0c:	00 97       	sbiw	r24, 0x00	; 0
    4e0e:	69 f7       	brne	.-38     	; 0x4dea <Start+0xa7a>
    4e10:	14 c0       	rjmp	.+40     	; 0x4e3a <Start+0xaca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e12:	6b a1       	ldd	r22, Y+35	; 0x23
    4e14:	7c a1       	ldd	r23, Y+36	; 0x24
    4e16:	8d a1       	ldd	r24, Y+37	; 0x25
    4e18:	9e a1       	ldd	r25, Y+38	; 0x26
    4e1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e1e:	dc 01       	movw	r26, r24
    4e20:	cb 01       	movw	r24, r22
    4e22:	9a a3       	std	Y+34, r25	; 0x22
    4e24:	89 a3       	std	Y+33, r24	; 0x21
    4e26:	89 a1       	ldd	r24, Y+33	; 0x21
    4e28:	9a a1       	ldd	r25, Y+34	; 0x22
    4e2a:	9e 8f       	std	Y+30, r25	; 0x1e
    4e2c:	8d 8f       	std	Y+29, r24	; 0x1d
    4e2e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4e30:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4e32:	01 97       	sbiw	r24, 0x01	; 1
    4e34:	f1 f7       	brne	.-4      	; 0x4e32 <Start+0xac2>
    4e36:	9e 8f       	std	Y+30, r25	; 0x1e
    4e38:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(10);
		Local_u8WrongCounter++;
    4e3a:	de 01       	movw	r26, r28
    4e3c:	af 58       	subi	r26, 0x8F	; 143
    4e3e:	bf 4f       	sbci	r27, 0xFF	; 255
    4e40:	fe 01       	movw	r30, r28
    4e42:	ef 58       	subi	r30, 0x8F	; 143
    4e44:	ff 4f       	sbci	r31, 0xFF	; 255
    4e46:	80 81       	ld	r24, Z
    4e48:	8f 5f       	subi	r24, 0xFF	; 255
    4e4a:	8c 93       	st	X, r24
		if(Local_u8WrongCounter<3)
    4e4c:	fe 01       	movw	r30, r28
    4e4e:	ef 58       	subi	r30, 0x8F	; 143
    4e50:	ff 4f       	sbci	r31, 0xFF	; 255
    4e52:	80 81       	ld	r24, Z
    4e54:	83 30       	cpi	r24, 0x03	; 3
    4e56:	08 f4       	brcc	.+2      	; 0x4e5a <Start+0xaea>
    4e58:	c6 cc       	rjmp	.-1652   	; 0x47e6 <Start+0x476>
		{
			goto lable1;
		}
	}

	if(Local_u8WrongCounter == 3)
    4e5a:	fe 01       	movw	r30, r28
    4e5c:	ef 58       	subi	r30, 0x8F	; 143
    4e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e60:	80 81       	ld	r24, Z
    4e62:	83 30       	cpi	r24, 0x03	; 3
    4e64:	09 f0       	breq	.+2      	; 0x4e68 <Start+0xaf8>
    4e66:	fa c0       	rjmp	.+500    	; 0x505c <Start+0xcec>
	{
		CLCD_voidSendCommand(1);
    4e68:	81 e0       	ldi	r24, 0x01	; 1
    4e6a:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidSendCommand>
		CLCD_voidSendString("Exceeded the 3");
    4e6e:	8b e4       	ldi	r24, 0x4B	; 75
    4e70:	91 e0       	ldi	r25, 0x01	; 1
    4e72:	0e 94 b0 09 	call	0x1360	; 0x1360 <CLCD_voidSendString>
		CLCD_voidGoToXY(1,0);
    4e76:	81 e0       	ldi	r24, 0x01	; 1
    4e78:	60 e0       	ldi	r22, 0x00	; 0
    4e7a:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <CLCD_voidGoToXY>
		CLCD_voidSendString("Trails");
    4e7e:	8a e5       	ldi	r24, 0x5A	; 90
    4e80:	91 e0       	ldi	r25, 0x01	; 1
    4e82:	0e 94 b0 09 	call	0x1360	; 0x1360 <CLCD_voidSendString>
    4e86:	80 e0       	ldi	r24, 0x00	; 0
    4e88:	90 e0       	ldi	r25, 0x00	; 0
    4e8a:	aa e7       	ldi	r26, 0x7A	; 122
    4e8c:	b4 e4       	ldi	r27, 0x44	; 68
    4e8e:	89 8f       	std	Y+25, r24	; 0x19
    4e90:	9a 8f       	std	Y+26, r25	; 0x1a
    4e92:	ab 8f       	std	Y+27, r26	; 0x1b
    4e94:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e96:	69 8d       	ldd	r22, Y+25	; 0x19
    4e98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4e9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e9e:	20 e0       	ldi	r18, 0x00	; 0
    4ea0:	30 e0       	ldi	r19, 0x00	; 0
    4ea2:	4a ef       	ldi	r20, 0xFA	; 250
    4ea4:	54 e4       	ldi	r21, 0x44	; 68
    4ea6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4eaa:	dc 01       	movw	r26, r24
    4eac:	cb 01       	movw	r24, r22
    4eae:	8d 8b       	std	Y+21, r24	; 0x15
    4eb0:	9e 8b       	std	Y+22, r25	; 0x16
    4eb2:	af 8b       	std	Y+23, r26	; 0x17
    4eb4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4eb6:	6d 89       	ldd	r22, Y+21	; 0x15
    4eb8:	7e 89       	ldd	r23, Y+22	; 0x16
    4eba:	8f 89       	ldd	r24, Y+23	; 0x17
    4ebc:	98 8d       	ldd	r25, Y+24	; 0x18
    4ebe:	20 e0       	ldi	r18, 0x00	; 0
    4ec0:	30 e0       	ldi	r19, 0x00	; 0
    4ec2:	40 e8       	ldi	r20, 0x80	; 128
    4ec4:	5f e3       	ldi	r21, 0x3F	; 63
    4ec6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4eca:	88 23       	and	r24, r24
    4ecc:	2c f4       	brge	.+10     	; 0x4ed8 <Start+0xb68>
		__ticks = 1;
    4ece:	81 e0       	ldi	r24, 0x01	; 1
    4ed0:	90 e0       	ldi	r25, 0x00	; 0
    4ed2:	9c 8b       	std	Y+20, r25	; 0x14
    4ed4:	8b 8b       	std	Y+19, r24	; 0x13
    4ed6:	3f c0       	rjmp	.+126    	; 0x4f56 <Start+0xbe6>
	else if (__tmp > 65535)
    4ed8:	6d 89       	ldd	r22, Y+21	; 0x15
    4eda:	7e 89       	ldd	r23, Y+22	; 0x16
    4edc:	8f 89       	ldd	r24, Y+23	; 0x17
    4ede:	98 8d       	ldd	r25, Y+24	; 0x18
    4ee0:	20 e0       	ldi	r18, 0x00	; 0
    4ee2:	3f ef       	ldi	r19, 0xFF	; 255
    4ee4:	4f e7       	ldi	r20, 0x7F	; 127
    4ee6:	57 e4       	ldi	r21, 0x47	; 71
    4ee8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4eec:	18 16       	cp	r1, r24
    4eee:	4c f5       	brge	.+82     	; 0x4f42 <Start+0xbd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ef0:	69 8d       	ldd	r22, Y+25	; 0x19
    4ef2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4ef4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4ef6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4ef8:	20 e0       	ldi	r18, 0x00	; 0
    4efa:	30 e0       	ldi	r19, 0x00	; 0
    4efc:	40 e2       	ldi	r20, 0x20	; 32
    4efe:	51 e4       	ldi	r21, 0x41	; 65
    4f00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f04:	dc 01       	movw	r26, r24
    4f06:	cb 01       	movw	r24, r22
    4f08:	bc 01       	movw	r22, r24
    4f0a:	cd 01       	movw	r24, r26
    4f0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f10:	dc 01       	movw	r26, r24
    4f12:	cb 01       	movw	r24, r22
    4f14:	9c 8b       	std	Y+20, r25	; 0x14
    4f16:	8b 8b       	std	Y+19, r24	; 0x13
    4f18:	0f c0       	rjmp	.+30     	; 0x4f38 <Start+0xbc8>
    4f1a:	88 ec       	ldi	r24, 0xC8	; 200
    4f1c:	90 e0       	ldi	r25, 0x00	; 0
    4f1e:	9a 8b       	std	Y+18, r25	; 0x12
    4f20:	89 8b       	std	Y+17, r24	; 0x11
    4f22:	89 89       	ldd	r24, Y+17	; 0x11
    4f24:	9a 89       	ldd	r25, Y+18	; 0x12
    4f26:	01 97       	sbiw	r24, 0x01	; 1
    4f28:	f1 f7       	brne	.-4      	; 0x4f26 <Start+0xbb6>
    4f2a:	9a 8b       	std	Y+18, r25	; 0x12
    4f2c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f2e:	8b 89       	ldd	r24, Y+19	; 0x13
    4f30:	9c 89       	ldd	r25, Y+20	; 0x14
    4f32:	01 97       	sbiw	r24, 0x01	; 1
    4f34:	9c 8b       	std	Y+20, r25	; 0x14
    4f36:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f38:	8b 89       	ldd	r24, Y+19	; 0x13
    4f3a:	9c 89       	ldd	r25, Y+20	; 0x14
    4f3c:	00 97       	sbiw	r24, 0x00	; 0
    4f3e:	69 f7       	brne	.-38     	; 0x4f1a <Start+0xbaa>
    4f40:	14 c0       	rjmp	.+40     	; 0x4f6a <Start+0xbfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f42:	6d 89       	ldd	r22, Y+21	; 0x15
    4f44:	7e 89       	ldd	r23, Y+22	; 0x16
    4f46:	8f 89       	ldd	r24, Y+23	; 0x17
    4f48:	98 8d       	ldd	r25, Y+24	; 0x18
    4f4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f4e:	dc 01       	movw	r26, r24
    4f50:	cb 01       	movw	r24, r22
    4f52:	9c 8b       	std	Y+20, r25	; 0x14
    4f54:	8b 8b       	std	Y+19, r24	; 0x13
    4f56:	8b 89       	ldd	r24, Y+19	; 0x13
    4f58:	9c 89       	ldd	r25, Y+20	; 0x14
    4f5a:	98 8b       	std	Y+16, r25	; 0x10
    4f5c:	8f 87       	std	Y+15, r24	; 0x0f
    4f5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f60:	98 89       	ldd	r25, Y+16	; 0x10
    4f62:	01 97       	sbiw	r24, 0x01	; 1
    4f64:	f1 f7       	brne	.-4      	; 0x4f62 <Start+0xbf2>
    4f66:	98 8b       	std	Y+16, r25	; 0x10
    4f68:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		CLCD_voidSendCommand(1);
    4f6a:	81 e0       	ldi	r24, 0x01	; 1
    4f6c:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidSendCommand>
		CLCD_voidSendString("Bye Bye");
    4f70:	81 e6       	ldi	r24, 0x61	; 97
    4f72:	91 e0       	ldi	r25, 0x01	; 1
    4f74:	0e 94 b0 09 	call	0x1360	; 0x1360 <CLCD_voidSendString>
    4f78:	80 e0       	ldi	r24, 0x00	; 0
    4f7a:	90 e0       	ldi	r25, 0x00	; 0
    4f7c:	aa e7       	ldi	r26, 0x7A	; 122
    4f7e:	b4 e4       	ldi	r27, 0x44	; 68
    4f80:	8b 87       	std	Y+11, r24	; 0x0b
    4f82:	9c 87       	std	Y+12, r25	; 0x0c
    4f84:	ad 87       	std	Y+13, r26	; 0x0d
    4f86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f88:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f90:	20 e0       	ldi	r18, 0x00	; 0
    4f92:	30 e0       	ldi	r19, 0x00	; 0
    4f94:	4a ef       	ldi	r20, 0xFA	; 250
    4f96:	54 e4       	ldi	r21, 0x44	; 68
    4f98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f9c:	dc 01       	movw	r26, r24
    4f9e:	cb 01       	movw	r24, r22
    4fa0:	8f 83       	std	Y+7, r24	; 0x07
    4fa2:	98 87       	std	Y+8, r25	; 0x08
    4fa4:	a9 87       	std	Y+9, r26	; 0x09
    4fa6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4fa8:	6f 81       	ldd	r22, Y+7	; 0x07
    4faa:	78 85       	ldd	r23, Y+8	; 0x08
    4fac:	89 85       	ldd	r24, Y+9	; 0x09
    4fae:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fb0:	20 e0       	ldi	r18, 0x00	; 0
    4fb2:	30 e0       	ldi	r19, 0x00	; 0
    4fb4:	40 e8       	ldi	r20, 0x80	; 128
    4fb6:	5f e3       	ldi	r21, 0x3F	; 63
    4fb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4fbc:	88 23       	and	r24, r24
    4fbe:	2c f4       	brge	.+10     	; 0x4fca <Start+0xc5a>
		__ticks = 1;
    4fc0:	81 e0       	ldi	r24, 0x01	; 1
    4fc2:	90 e0       	ldi	r25, 0x00	; 0
    4fc4:	9e 83       	std	Y+6, r25	; 0x06
    4fc6:	8d 83       	std	Y+5, r24	; 0x05
    4fc8:	3f c0       	rjmp	.+126    	; 0x5048 <Start+0xcd8>
	else if (__tmp > 65535)
    4fca:	6f 81       	ldd	r22, Y+7	; 0x07
    4fcc:	78 85       	ldd	r23, Y+8	; 0x08
    4fce:	89 85       	ldd	r24, Y+9	; 0x09
    4fd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fd2:	20 e0       	ldi	r18, 0x00	; 0
    4fd4:	3f ef       	ldi	r19, 0xFF	; 255
    4fd6:	4f e7       	ldi	r20, 0x7F	; 127
    4fd8:	57 e4       	ldi	r21, 0x47	; 71
    4fda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4fde:	18 16       	cp	r1, r24
    4fe0:	4c f5       	brge	.+82     	; 0x5034 <Start+0xcc4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fe2:	6b 85       	ldd	r22, Y+11	; 0x0b
    4fe4:	7c 85       	ldd	r23, Y+12	; 0x0c
    4fe6:	8d 85       	ldd	r24, Y+13	; 0x0d
    4fe8:	9e 85       	ldd	r25, Y+14	; 0x0e
    4fea:	20 e0       	ldi	r18, 0x00	; 0
    4fec:	30 e0       	ldi	r19, 0x00	; 0
    4fee:	40 e2       	ldi	r20, 0x20	; 32
    4ff0:	51 e4       	ldi	r21, 0x41	; 65
    4ff2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ff6:	dc 01       	movw	r26, r24
    4ff8:	cb 01       	movw	r24, r22
    4ffa:	bc 01       	movw	r22, r24
    4ffc:	cd 01       	movw	r24, r26
    4ffe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5002:	dc 01       	movw	r26, r24
    5004:	cb 01       	movw	r24, r22
    5006:	9e 83       	std	Y+6, r25	; 0x06
    5008:	8d 83       	std	Y+5, r24	; 0x05
    500a:	0f c0       	rjmp	.+30     	; 0x502a <Start+0xcba>
    500c:	88 ec       	ldi	r24, 0xC8	; 200
    500e:	90 e0       	ldi	r25, 0x00	; 0
    5010:	9c 83       	std	Y+4, r25	; 0x04
    5012:	8b 83       	std	Y+3, r24	; 0x03
    5014:	8b 81       	ldd	r24, Y+3	; 0x03
    5016:	9c 81       	ldd	r25, Y+4	; 0x04
    5018:	01 97       	sbiw	r24, 0x01	; 1
    501a:	f1 f7       	brne	.-4      	; 0x5018 <Start+0xca8>
    501c:	9c 83       	std	Y+4, r25	; 0x04
    501e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5020:	8d 81       	ldd	r24, Y+5	; 0x05
    5022:	9e 81       	ldd	r25, Y+6	; 0x06
    5024:	01 97       	sbiw	r24, 0x01	; 1
    5026:	9e 83       	std	Y+6, r25	; 0x06
    5028:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    502a:	8d 81       	ldd	r24, Y+5	; 0x05
    502c:	9e 81       	ldd	r25, Y+6	; 0x06
    502e:	00 97       	sbiw	r24, 0x00	; 0
    5030:	69 f7       	brne	.-38     	; 0x500c <Start+0xc9c>
    5032:	14 c0       	rjmp	.+40     	; 0x505c <Start+0xcec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5034:	6f 81       	ldd	r22, Y+7	; 0x07
    5036:	78 85       	ldd	r23, Y+8	; 0x08
    5038:	89 85       	ldd	r24, Y+9	; 0x09
    503a:	9a 85       	ldd	r25, Y+10	; 0x0a
    503c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5040:	dc 01       	movw	r26, r24
    5042:	cb 01       	movw	r24, r22
    5044:	9e 83       	std	Y+6, r25	; 0x06
    5046:	8d 83       	std	Y+5, r24	; 0x05
    5048:	8d 81       	ldd	r24, Y+5	; 0x05
    504a:	9e 81       	ldd	r25, Y+6	; 0x06
    504c:	9a 83       	std	Y+2, r25	; 0x02
    504e:	89 83       	std	Y+1, r24	; 0x01
    5050:	89 81       	ldd	r24, Y+1	; 0x01
    5052:	9a 81       	ldd	r25, Y+2	; 0x02
    5054:	01 97       	sbiw	r24, 0x01	; 1
    5056:	f1 f7       	brne	.-4      	; 0x5054 <Start+0xce4>
    5058:	9a 83       	std	Y+2, r25	; 0x02
    505a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
	}

}
    505c:	c6 57       	subi	r28, 0x76	; 118
    505e:	df 4f       	sbci	r29, 0xFF	; 255
    5060:	0f b6       	in	r0, 0x3f	; 63
    5062:	f8 94       	cli
    5064:	de bf       	out	0x3e, r29	; 62
    5066:	0f be       	out	0x3f, r0	; 63
    5068:	cd bf       	out	0x3d, r28	; 61
    506a:	cf 91       	pop	r28
    506c:	df 91       	pop	r29
    506e:	1f 91       	pop	r17
    5070:	0f 91       	pop	r16
    5072:	08 95       	ret

00005074 <Door>:

void Door(void)
{
    5074:	df 93       	push	r29
    5076:	cf 93       	push	r28
    5078:	cd b7       	in	r28, 0x3d	; 61
    507a:	de b7       	in	r29, 0x3e	; 62
    507c:	ac 97       	sbiw	r28, 0x2c	; 44
    507e:	0f b6       	in	r0, 0x3f	; 63
    5080:	f8 94       	cli
    5082:	de bf       	out	0x3e, r29	; 62
    5084:	0f be       	out	0x3f, r0	; 63
    5086:	cd bf       	out	0x3d, r28	; 61
	u8 Local_Receive;
	u8 Local_u8Key;

	CLCD_voidSendCommand(1);
    5088:	81 e0       	ldi	r24, 0x01	; 1
    508a:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidSendCommand>
	CLCD_voidSendString("Open the Door");
    508e:	89 e6       	ldi	r24, 0x69	; 105
    5090:	91 e0       	ldi	r25, 0x01	; 1
    5092:	0e 94 b0 09 	call	0x1360	; 0x1360 <CLCD_voidSendString>
	CLCD_voidGoToXY(1,0);
    5096:	81 e0       	ldi	r24, 0x01	; 1
    5098:	60 e0       	ldi	r22, 0x00	; 0
    509a:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <CLCD_voidGoToXY>
	CLCD_voidSendString("Press 1");
    509e:	87 e7       	ldi	r24, 0x77	; 119
    50a0:	91 e0       	ldi	r25, 0x01	; 1
    50a2:	0e 94 b0 09 	call	0x1360	; 0x1360 <CLCD_voidSendString>

	do
	{
		Local_u8Key=KPD_u8GetPressedKey();
    50a6:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <KPD_u8GetPressedKey>
    50aa:	8b a7       	std	Y+43, r24	; 0x2b

	}while(Local_u8Key==0xff);
    50ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    50ae:	8f 3f       	cpi	r24, 0xFF	; 255
    50b0:	d1 f3       	breq	.-12     	; 0x50a6 <Door+0x32>
    50b2:	80 e0       	ldi	r24, 0x00	; 0
    50b4:	90 e0       	ldi	r25, 0x00	; 0
    50b6:	aa e7       	ldi	r26, 0x7A	; 122
    50b8:	b4 e4       	ldi	r27, 0x44	; 68
    50ba:	8f a3       	std	Y+39, r24	; 0x27
    50bc:	98 a7       	std	Y+40, r25	; 0x28
    50be:	a9 a7       	std	Y+41, r26	; 0x29
    50c0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    50c2:	6f a1       	ldd	r22, Y+39	; 0x27
    50c4:	78 a5       	ldd	r23, Y+40	; 0x28
    50c6:	89 a5       	ldd	r24, Y+41	; 0x29
    50c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    50ca:	20 e0       	ldi	r18, 0x00	; 0
    50cc:	30 e0       	ldi	r19, 0x00	; 0
    50ce:	4a ef       	ldi	r20, 0xFA	; 250
    50d0:	54 e4       	ldi	r21, 0x44	; 68
    50d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50d6:	dc 01       	movw	r26, r24
    50d8:	cb 01       	movw	r24, r22
    50da:	8b a3       	std	Y+35, r24	; 0x23
    50dc:	9c a3       	std	Y+36, r25	; 0x24
    50de:	ad a3       	std	Y+37, r26	; 0x25
    50e0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    50e2:	6b a1       	ldd	r22, Y+35	; 0x23
    50e4:	7c a1       	ldd	r23, Y+36	; 0x24
    50e6:	8d a1       	ldd	r24, Y+37	; 0x25
    50e8:	9e a1       	ldd	r25, Y+38	; 0x26
    50ea:	20 e0       	ldi	r18, 0x00	; 0
    50ec:	30 e0       	ldi	r19, 0x00	; 0
    50ee:	40 e8       	ldi	r20, 0x80	; 128
    50f0:	5f e3       	ldi	r21, 0x3F	; 63
    50f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    50f6:	88 23       	and	r24, r24
    50f8:	2c f4       	brge	.+10     	; 0x5104 <Door+0x90>
		__ticks = 1;
    50fa:	81 e0       	ldi	r24, 0x01	; 1
    50fc:	90 e0       	ldi	r25, 0x00	; 0
    50fe:	9a a3       	std	Y+34, r25	; 0x22
    5100:	89 a3       	std	Y+33, r24	; 0x21
    5102:	3f c0       	rjmp	.+126    	; 0x5182 <Door+0x10e>
	else if (__tmp > 65535)
    5104:	6b a1       	ldd	r22, Y+35	; 0x23
    5106:	7c a1       	ldd	r23, Y+36	; 0x24
    5108:	8d a1       	ldd	r24, Y+37	; 0x25
    510a:	9e a1       	ldd	r25, Y+38	; 0x26
    510c:	20 e0       	ldi	r18, 0x00	; 0
    510e:	3f ef       	ldi	r19, 0xFF	; 255
    5110:	4f e7       	ldi	r20, 0x7F	; 127
    5112:	57 e4       	ldi	r21, 0x47	; 71
    5114:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5118:	18 16       	cp	r1, r24
    511a:	4c f5       	brge	.+82     	; 0x516e <Door+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    511c:	6f a1       	ldd	r22, Y+39	; 0x27
    511e:	78 a5       	ldd	r23, Y+40	; 0x28
    5120:	89 a5       	ldd	r24, Y+41	; 0x29
    5122:	9a a5       	ldd	r25, Y+42	; 0x2a
    5124:	20 e0       	ldi	r18, 0x00	; 0
    5126:	30 e0       	ldi	r19, 0x00	; 0
    5128:	40 e2       	ldi	r20, 0x20	; 32
    512a:	51 e4       	ldi	r21, 0x41	; 65
    512c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5130:	dc 01       	movw	r26, r24
    5132:	cb 01       	movw	r24, r22
    5134:	bc 01       	movw	r22, r24
    5136:	cd 01       	movw	r24, r26
    5138:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    513c:	dc 01       	movw	r26, r24
    513e:	cb 01       	movw	r24, r22
    5140:	9a a3       	std	Y+34, r25	; 0x22
    5142:	89 a3       	std	Y+33, r24	; 0x21
    5144:	0f c0       	rjmp	.+30     	; 0x5164 <Door+0xf0>
    5146:	88 ec       	ldi	r24, 0xC8	; 200
    5148:	90 e0       	ldi	r25, 0x00	; 0
    514a:	98 a3       	std	Y+32, r25	; 0x20
    514c:	8f 8f       	std	Y+31, r24	; 0x1f
    514e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5150:	98 a1       	ldd	r25, Y+32	; 0x20
    5152:	01 97       	sbiw	r24, 0x01	; 1
    5154:	f1 f7       	brne	.-4      	; 0x5152 <Door+0xde>
    5156:	98 a3       	std	Y+32, r25	; 0x20
    5158:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    515a:	89 a1       	ldd	r24, Y+33	; 0x21
    515c:	9a a1       	ldd	r25, Y+34	; 0x22
    515e:	01 97       	sbiw	r24, 0x01	; 1
    5160:	9a a3       	std	Y+34, r25	; 0x22
    5162:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5164:	89 a1       	ldd	r24, Y+33	; 0x21
    5166:	9a a1       	ldd	r25, Y+34	; 0x22
    5168:	00 97       	sbiw	r24, 0x00	; 0
    516a:	69 f7       	brne	.-38     	; 0x5146 <Door+0xd2>
    516c:	14 c0       	rjmp	.+40     	; 0x5196 <Door+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    516e:	6b a1       	ldd	r22, Y+35	; 0x23
    5170:	7c a1       	ldd	r23, Y+36	; 0x24
    5172:	8d a1       	ldd	r24, Y+37	; 0x25
    5174:	9e a1       	ldd	r25, Y+38	; 0x26
    5176:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    517a:	dc 01       	movw	r26, r24
    517c:	cb 01       	movw	r24, r22
    517e:	9a a3       	std	Y+34, r25	; 0x22
    5180:	89 a3       	std	Y+33, r24	; 0x21
    5182:	89 a1       	ldd	r24, Y+33	; 0x21
    5184:	9a a1       	ldd	r25, Y+34	; 0x22
    5186:	9e 8f       	std	Y+30, r25	; 0x1e
    5188:	8d 8f       	std	Y+29, r24	; 0x1d
    518a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    518c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    518e:	01 97       	sbiw	r24, 0x01	; 1
    5190:	f1 f7       	brne	.-4      	; 0x518e <Door+0x11a>
    5192:	9e 8f       	std	Y+30, r25	; 0x1e
    5194:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);


	if(Local_u8Key ==1)
    5196:	8b a5       	ldd	r24, Y+43	; 0x2b
    5198:	81 30       	cpi	r24, 0x01	; 1
    519a:	09 f0       	breq	.+2      	; 0x519e <Door+0x12a>
    519c:	f4 c0       	rjmp	.+488    	; 0x5386 <Door+0x312>
	{

		SPI_u8TransceiveSynch(&Local_Receive,5);
    519e:	ce 01       	movw	r24, r28
    51a0:	8c 96       	adiw	r24, 0x2c	; 44
    51a2:	65 e0       	ldi	r22, 0x05	; 5
    51a4:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <SPI_u8TransceiveSynch>
    51a8:	80 e0       	ldi	r24, 0x00	; 0
    51aa:	90 e0       	ldi	r25, 0x00	; 0
    51ac:	a0 e2       	ldi	r26, 0x20	; 32
    51ae:	b1 e4       	ldi	r27, 0x41	; 65
    51b0:	89 8f       	std	Y+25, r24	; 0x19
    51b2:	9a 8f       	std	Y+26, r25	; 0x1a
    51b4:	ab 8f       	std	Y+27, r26	; 0x1b
    51b6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    51b8:	69 8d       	ldd	r22, Y+25	; 0x19
    51ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    51bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    51be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    51c0:	20 e0       	ldi	r18, 0x00	; 0
    51c2:	30 e0       	ldi	r19, 0x00	; 0
    51c4:	4a ef       	ldi	r20, 0xFA	; 250
    51c6:	54 e4       	ldi	r21, 0x44	; 68
    51c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51cc:	dc 01       	movw	r26, r24
    51ce:	cb 01       	movw	r24, r22
    51d0:	8d 8b       	std	Y+21, r24	; 0x15
    51d2:	9e 8b       	std	Y+22, r25	; 0x16
    51d4:	af 8b       	std	Y+23, r26	; 0x17
    51d6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    51d8:	6d 89       	ldd	r22, Y+21	; 0x15
    51da:	7e 89       	ldd	r23, Y+22	; 0x16
    51dc:	8f 89       	ldd	r24, Y+23	; 0x17
    51de:	98 8d       	ldd	r25, Y+24	; 0x18
    51e0:	20 e0       	ldi	r18, 0x00	; 0
    51e2:	30 e0       	ldi	r19, 0x00	; 0
    51e4:	40 e8       	ldi	r20, 0x80	; 128
    51e6:	5f e3       	ldi	r21, 0x3F	; 63
    51e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    51ec:	88 23       	and	r24, r24
    51ee:	2c f4       	brge	.+10     	; 0x51fa <Door+0x186>
		__ticks = 1;
    51f0:	81 e0       	ldi	r24, 0x01	; 1
    51f2:	90 e0       	ldi	r25, 0x00	; 0
    51f4:	9c 8b       	std	Y+20, r25	; 0x14
    51f6:	8b 8b       	std	Y+19, r24	; 0x13
    51f8:	3f c0       	rjmp	.+126    	; 0x5278 <Door+0x204>
	else if (__tmp > 65535)
    51fa:	6d 89       	ldd	r22, Y+21	; 0x15
    51fc:	7e 89       	ldd	r23, Y+22	; 0x16
    51fe:	8f 89       	ldd	r24, Y+23	; 0x17
    5200:	98 8d       	ldd	r25, Y+24	; 0x18
    5202:	20 e0       	ldi	r18, 0x00	; 0
    5204:	3f ef       	ldi	r19, 0xFF	; 255
    5206:	4f e7       	ldi	r20, 0x7F	; 127
    5208:	57 e4       	ldi	r21, 0x47	; 71
    520a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    520e:	18 16       	cp	r1, r24
    5210:	4c f5       	brge	.+82     	; 0x5264 <Door+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5212:	69 8d       	ldd	r22, Y+25	; 0x19
    5214:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5216:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5218:	9c 8d       	ldd	r25, Y+28	; 0x1c
    521a:	20 e0       	ldi	r18, 0x00	; 0
    521c:	30 e0       	ldi	r19, 0x00	; 0
    521e:	40 e2       	ldi	r20, 0x20	; 32
    5220:	51 e4       	ldi	r21, 0x41	; 65
    5222:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5226:	dc 01       	movw	r26, r24
    5228:	cb 01       	movw	r24, r22
    522a:	bc 01       	movw	r22, r24
    522c:	cd 01       	movw	r24, r26
    522e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5232:	dc 01       	movw	r26, r24
    5234:	cb 01       	movw	r24, r22
    5236:	9c 8b       	std	Y+20, r25	; 0x14
    5238:	8b 8b       	std	Y+19, r24	; 0x13
    523a:	0f c0       	rjmp	.+30     	; 0x525a <Door+0x1e6>
    523c:	88 ec       	ldi	r24, 0xC8	; 200
    523e:	90 e0       	ldi	r25, 0x00	; 0
    5240:	9a 8b       	std	Y+18, r25	; 0x12
    5242:	89 8b       	std	Y+17, r24	; 0x11
    5244:	89 89       	ldd	r24, Y+17	; 0x11
    5246:	9a 89       	ldd	r25, Y+18	; 0x12
    5248:	01 97       	sbiw	r24, 0x01	; 1
    524a:	f1 f7       	brne	.-4      	; 0x5248 <Door+0x1d4>
    524c:	9a 8b       	std	Y+18, r25	; 0x12
    524e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5250:	8b 89       	ldd	r24, Y+19	; 0x13
    5252:	9c 89       	ldd	r25, Y+20	; 0x14
    5254:	01 97       	sbiw	r24, 0x01	; 1
    5256:	9c 8b       	std	Y+20, r25	; 0x14
    5258:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    525a:	8b 89       	ldd	r24, Y+19	; 0x13
    525c:	9c 89       	ldd	r25, Y+20	; 0x14
    525e:	00 97       	sbiw	r24, 0x00	; 0
    5260:	69 f7       	brne	.-38     	; 0x523c <Door+0x1c8>
    5262:	14 c0       	rjmp	.+40     	; 0x528c <Door+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5264:	6d 89       	ldd	r22, Y+21	; 0x15
    5266:	7e 89       	ldd	r23, Y+22	; 0x16
    5268:	8f 89       	ldd	r24, Y+23	; 0x17
    526a:	98 8d       	ldd	r25, Y+24	; 0x18
    526c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5270:	dc 01       	movw	r26, r24
    5272:	cb 01       	movw	r24, r22
    5274:	9c 8b       	std	Y+20, r25	; 0x14
    5276:	8b 8b       	std	Y+19, r24	; 0x13
    5278:	8b 89       	ldd	r24, Y+19	; 0x13
    527a:	9c 89       	ldd	r25, Y+20	; 0x14
    527c:	98 8b       	std	Y+16, r25	; 0x10
    527e:	8f 87       	std	Y+15, r24	; 0x0f
    5280:	8f 85       	ldd	r24, Y+15	; 0x0f
    5282:	98 89       	ldd	r25, Y+16	; 0x10
    5284:	01 97       	sbiw	r24, 0x01	; 1
    5286:	f1 f7       	brne	.-4      	; 0x5284 <Door+0x210>
    5288:	98 8b       	std	Y+16, r25	; 0x10
    528a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);

		if(Local_Receive == 5)
    528c:	8c a5       	ldd	r24, Y+44	; 0x2c
    528e:	85 30       	cpi	r24, 0x05	; 5
    5290:	09 f0       	breq	.+2      	; 0x5294 <Door+0x220>
    5292:	79 c0       	rjmp	.+242    	; 0x5386 <Door+0x312>
		{
			CLCD_voidSendCommand(1);
    5294:	81 e0       	ldi	r24, 0x01	; 1
    5296:	0e 94 e6 07 	call	0xfcc	; 0xfcc <CLCD_voidSendCommand>
			CLCD_voidSendString("Openning");
    529a:	8f e7       	ldi	r24, 0x7F	; 127
    529c:	91 e0       	ldi	r25, 0x01	; 1
    529e:	0e 94 b0 09 	call	0x1360	; 0x1360 <CLCD_voidSendString>
    52a2:	80 e0       	ldi	r24, 0x00	; 0
    52a4:	90 e0       	ldi	r25, 0x00	; 0
    52a6:	aa e7       	ldi	r26, 0x7A	; 122
    52a8:	b4 e4       	ldi	r27, 0x44	; 68
    52aa:	8b 87       	std	Y+11, r24	; 0x0b
    52ac:	9c 87       	std	Y+12, r25	; 0x0c
    52ae:	ad 87       	std	Y+13, r26	; 0x0d
    52b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    52b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    52b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    52b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    52ba:	20 e0       	ldi	r18, 0x00	; 0
    52bc:	30 e0       	ldi	r19, 0x00	; 0
    52be:	4a ef       	ldi	r20, 0xFA	; 250
    52c0:	54 e4       	ldi	r21, 0x44	; 68
    52c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52c6:	dc 01       	movw	r26, r24
    52c8:	cb 01       	movw	r24, r22
    52ca:	8f 83       	std	Y+7, r24	; 0x07
    52cc:	98 87       	std	Y+8, r25	; 0x08
    52ce:	a9 87       	std	Y+9, r26	; 0x09
    52d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    52d2:	6f 81       	ldd	r22, Y+7	; 0x07
    52d4:	78 85       	ldd	r23, Y+8	; 0x08
    52d6:	89 85       	ldd	r24, Y+9	; 0x09
    52d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    52da:	20 e0       	ldi	r18, 0x00	; 0
    52dc:	30 e0       	ldi	r19, 0x00	; 0
    52de:	40 e8       	ldi	r20, 0x80	; 128
    52e0:	5f e3       	ldi	r21, 0x3F	; 63
    52e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    52e6:	88 23       	and	r24, r24
    52e8:	2c f4       	brge	.+10     	; 0x52f4 <Door+0x280>
		__ticks = 1;
    52ea:	81 e0       	ldi	r24, 0x01	; 1
    52ec:	90 e0       	ldi	r25, 0x00	; 0
    52ee:	9e 83       	std	Y+6, r25	; 0x06
    52f0:	8d 83       	std	Y+5, r24	; 0x05
    52f2:	3f c0       	rjmp	.+126    	; 0x5372 <Door+0x2fe>
	else if (__tmp > 65535)
    52f4:	6f 81       	ldd	r22, Y+7	; 0x07
    52f6:	78 85       	ldd	r23, Y+8	; 0x08
    52f8:	89 85       	ldd	r24, Y+9	; 0x09
    52fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    52fc:	20 e0       	ldi	r18, 0x00	; 0
    52fe:	3f ef       	ldi	r19, 0xFF	; 255
    5300:	4f e7       	ldi	r20, 0x7F	; 127
    5302:	57 e4       	ldi	r21, 0x47	; 71
    5304:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5308:	18 16       	cp	r1, r24
    530a:	4c f5       	brge	.+82     	; 0x535e <Door+0x2ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    530c:	6b 85       	ldd	r22, Y+11	; 0x0b
    530e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5310:	8d 85       	ldd	r24, Y+13	; 0x0d
    5312:	9e 85       	ldd	r25, Y+14	; 0x0e
    5314:	20 e0       	ldi	r18, 0x00	; 0
    5316:	30 e0       	ldi	r19, 0x00	; 0
    5318:	40 e2       	ldi	r20, 0x20	; 32
    531a:	51 e4       	ldi	r21, 0x41	; 65
    531c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5320:	dc 01       	movw	r26, r24
    5322:	cb 01       	movw	r24, r22
    5324:	bc 01       	movw	r22, r24
    5326:	cd 01       	movw	r24, r26
    5328:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    532c:	dc 01       	movw	r26, r24
    532e:	cb 01       	movw	r24, r22
    5330:	9e 83       	std	Y+6, r25	; 0x06
    5332:	8d 83       	std	Y+5, r24	; 0x05
    5334:	0f c0       	rjmp	.+30     	; 0x5354 <Door+0x2e0>
    5336:	88 ec       	ldi	r24, 0xC8	; 200
    5338:	90 e0       	ldi	r25, 0x00	; 0
    533a:	9c 83       	std	Y+4, r25	; 0x04
    533c:	8b 83       	std	Y+3, r24	; 0x03
    533e:	8b 81       	ldd	r24, Y+3	; 0x03
    5340:	9c 81       	ldd	r25, Y+4	; 0x04
    5342:	01 97       	sbiw	r24, 0x01	; 1
    5344:	f1 f7       	brne	.-4      	; 0x5342 <Door+0x2ce>
    5346:	9c 83       	std	Y+4, r25	; 0x04
    5348:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    534a:	8d 81       	ldd	r24, Y+5	; 0x05
    534c:	9e 81       	ldd	r25, Y+6	; 0x06
    534e:	01 97       	sbiw	r24, 0x01	; 1
    5350:	9e 83       	std	Y+6, r25	; 0x06
    5352:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5354:	8d 81       	ldd	r24, Y+5	; 0x05
    5356:	9e 81       	ldd	r25, Y+6	; 0x06
    5358:	00 97       	sbiw	r24, 0x00	; 0
    535a:	69 f7       	brne	.-38     	; 0x5336 <Door+0x2c2>
    535c:	14 c0       	rjmp	.+40     	; 0x5386 <Door+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    535e:	6f 81       	ldd	r22, Y+7	; 0x07
    5360:	78 85       	ldd	r23, Y+8	; 0x08
    5362:	89 85       	ldd	r24, Y+9	; 0x09
    5364:	9a 85       	ldd	r25, Y+10	; 0x0a
    5366:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    536a:	dc 01       	movw	r26, r24
    536c:	cb 01       	movw	r24, r22
    536e:	9e 83       	std	Y+6, r25	; 0x06
    5370:	8d 83       	std	Y+5, r24	; 0x05
    5372:	8d 81       	ldd	r24, Y+5	; 0x05
    5374:	9e 81       	ldd	r25, Y+6	; 0x06
    5376:	9a 83       	std	Y+2, r25	; 0x02
    5378:	89 83       	std	Y+1, r24	; 0x01
    537a:	89 81       	ldd	r24, Y+1	; 0x01
    537c:	9a 81       	ldd	r25, Y+2	; 0x02
    537e:	01 97       	sbiw	r24, 0x01	; 1
    5380:	f1 f7       	brne	.-4      	; 0x537e <Door+0x30a>
    5382:	9a 83       	std	Y+2, r25	; 0x02
    5384:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
		}
	}


}
    5386:	ac 96       	adiw	r28, 0x2c	; 44
    5388:	0f b6       	in	r0, 0x3f	; 63
    538a:	f8 94       	cli
    538c:	de bf       	out	0x3e, r29	; 62
    538e:	0f be       	out	0x3f, r0	; 63
    5390:	cd bf       	out	0x3d, r28	; 61
    5392:	cf 91       	pop	r28
    5394:	df 91       	pop	r29
    5396:	08 95       	ret

00005398 <Map>:

s32 Map(s32 InputMin,s32 InputMax,s32 OutputMin,s32 OutputMax, s32 InputVal)
{
    5398:	af 92       	push	r10
    539a:	bf 92       	push	r11
    539c:	cf 92       	push	r12
    539e:	df 92       	push	r13
    53a0:	ef 92       	push	r14
    53a2:	ff 92       	push	r15
    53a4:	0f 93       	push	r16
    53a6:	1f 93       	push	r17
    53a8:	df 93       	push	r29
    53aa:	cf 93       	push	r28
    53ac:	cd b7       	in	r28, 0x3d	; 61
    53ae:	de b7       	in	r29, 0x3e	; 62
    53b0:	a4 97       	sbiw	r28, 0x24	; 36
    53b2:	0f b6       	in	r0, 0x3f	; 63
    53b4:	f8 94       	cli
    53b6:	de bf       	out	0x3e, r29	; 62
    53b8:	0f be       	out	0x3f, r0	; 63
    53ba:	cd bf       	out	0x3d, r28	; 61
    53bc:	6d 8b       	std	Y+21, r22	; 0x15
    53be:	7e 8b       	std	Y+22, r23	; 0x16
    53c0:	8f 8b       	std	Y+23, r24	; 0x17
    53c2:	98 8f       	std	Y+24, r25	; 0x18
    53c4:	29 8f       	std	Y+25, r18	; 0x19
    53c6:	3a 8f       	std	Y+26, r19	; 0x1a
    53c8:	4b 8f       	std	Y+27, r20	; 0x1b
    53ca:	5c 8f       	std	Y+28, r21	; 0x1c
    53cc:	ed 8e       	std	Y+29, r14	; 0x1d
    53ce:	fe 8e       	std	Y+30, r15	; 0x1e
    53d0:	0f 8f       	std	Y+31, r16	; 0x1f
    53d2:	18 a3       	std	Y+32, r17	; 0x20
    53d4:	a9 a2       	std	Y+33, r10	; 0x21
    53d6:	ba a2       	std	Y+34, r11	; 0x22
    53d8:	cb a2       	std	Y+35, r12	; 0x23
    53da:	dc a2       	std	Y+36, r13	; 0x24
	s32 val1=InputMax-InputMin;
    53dc:	29 8d       	ldd	r18, Y+25	; 0x19
    53de:	3a 8d       	ldd	r19, Y+26	; 0x1a
    53e0:	4b 8d       	ldd	r20, Y+27	; 0x1b
    53e2:	5c 8d       	ldd	r21, Y+28	; 0x1c
    53e4:	8d 89       	ldd	r24, Y+21	; 0x15
    53e6:	9e 89       	ldd	r25, Y+22	; 0x16
    53e8:	af 89       	ldd	r26, Y+23	; 0x17
    53ea:	b8 8d       	ldd	r27, Y+24	; 0x18
    53ec:	79 01       	movw	r14, r18
    53ee:	8a 01       	movw	r16, r20
    53f0:	e8 1a       	sub	r14, r24
    53f2:	f9 0a       	sbc	r15, r25
    53f4:	0a 0b       	sbc	r16, r26
    53f6:	1b 0b       	sbc	r17, r27
    53f8:	d8 01       	movw	r26, r16
    53fa:	c7 01       	movw	r24, r14
    53fc:	89 8b       	std	Y+17, r24	; 0x11
    53fe:	9a 8b       	std	Y+18, r25	; 0x12
    5400:	ab 8b       	std	Y+19, r26	; 0x13
    5402:	bc 8b       	std	Y+20, r27	; 0x14
	s32 val2=OutputMax-OutputMin;
    5404:	29 a1       	ldd	r18, Y+33	; 0x21
    5406:	3a a1       	ldd	r19, Y+34	; 0x22
    5408:	4b a1       	ldd	r20, Y+35	; 0x23
    540a:	5c a1       	ldd	r21, Y+36	; 0x24
    540c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    540e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5410:	af 8d       	ldd	r26, Y+31	; 0x1f
    5412:	b8 a1       	ldd	r27, Y+32	; 0x20
    5414:	79 01       	movw	r14, r18
    5416:	8a 01       	movw	r16, r20
    5418:	e8 1a       	sub	r14, r24
    541a:	f9 0a       	sbc	r15, r25
    541c:	0a 0b       	sbc	r16, r26
    541e:	1b 0b       	sbc	r17, r27
    5420:	d8 01       	movw	r26, r16
    5422:	c7 01       	movw	r24, r14
    5424:	8d 87       	std	Y+13, r24	; 0x0d
    5426:	9e 87       	std	Y+14, r25	; 0x0e
    5428:	af 87       	std	Y+15, r26	; 0x0f
    542a:	b8 8b       	std	Y+16, r27	; 0x10
	s32 val3= val1/val2;
    542c:	89 89       	ldd	r24, Y+17	; 0x11
    542e:	9a 89       	ldd	r25, Y+18	; 0x12
    5430:	ab 89       	ldd	r26, Y+19	; 0x13
    5432:	bc 89       	ldd	r27, Y+20	; 0x14
    5434:	2d 85       	ldd	r18, Y+13	; 0x0d
    5436:	3e 85       	ldd	r19, Y+14	; 0x0e
    5438:	4f 85       	ldd	r20, Y+15	; 0x0f
    543a:	58 89       	ldd	r21, Y+16	; 0x10
    543c:	bc 01       	movw	r22, r24
    543e:	cd 01       	movw	r24, r26
    5440:	0e 94 c2 2a 	call	0x5584	; 0x5584 <__divmodsi4>
    5444:	da 01       	movw	r26, r20
    5446:	c9 01       	movw	r24, r18
    5448:	89 87       	std	Y+9, r24	; 0x09
    544a:	9a 87       	std	Y+10, r25	; 0x0a
    544c:	ab 87       	std	Y+11, r26	; 0x0b
    544e:	bc 87       	std	Y+12, r27	; 0x0c

	s32 val4 = val3 * (InputVal-OutputMin);
    5450:	29 a9       	ldd	r18, Y+49	; 0x31
    5452:	3a a9       	ldd	r19, Y+50	; 0x32
    5454:	4b a9       	ldd	r20, Y+51	; 0x33
    5456:	5c a9       	ldd	r21, Y+52	; 0x34
    5458:	8d 8d       	ldd	r24, Y+29	; 0x1d
    545a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    545c:	af 8d       	ldd	r26, Y+31	; 0x1f
    545e:	b8 a1       	ldd	r27, Y+32	; 0x20
    5460:	79 01       	movw	r14, r18
    5462:	8a 01       	movw	r16, r20
    5464:	e8 1a       	sub	r14, r24
    5466:	f9 0a       	sbc	r15, r25
    5468:	0a 0b       	sbc	r16, r26
    546a:	1b 0b       	sbc	r17, r27
    546c:	d8 01       	movw	r26, r16
    546e:	c7 01       	movw	r24, r14
    5470:	29 85       	ldd	r18, Y+9	; 0x09
    5472:	3a 85       	ldd	r19, Y+10	; 0x0a
    5474:	4b 85       	ldd	r20, Y+11	; 0x0b
    5476:	5c 85       	ldd	r21, Y+12	; 0x0c
    5478:	bc 01       	movw	r22, r24
    547a:	cd 01       	movw	r24, r26
    547c:	0e 94 6d 2a 	call	0x54da	; 0x54da <__mulsi3>
    5480:	dc 01       	movw	r26, r24
    5482:	cb 01       	movw	r24, r22
    5484:	8d 83       	std	Y+5, r24	; 0x05
    5486:	9e 83       	std	Y+6, r25	; 0x06
    5488:	af 83       	std	Y+7, r26	; 0x07
    548a:	b8 87       	std	Y+8, r27	; 0x08
	s32 result =val4+InputMin;
    548c:	2d 81       	ldd	r18, Y+5	; 0x05
    548e:	3e 81       	ldd	r19, Y+6	; 0x06
    5490:	4f 81       	ldd	r20, Y+7	; 0x07
    5492:	58 85       	ldd	r21, Y+8	; 0x08
    5494:	8d 89       	ldd	r24, Y+21	; 0x15
    5496:	9e 89       	ldd	r25, Y+22	; 0x16
    5498:	af 89       	ldd	r26, Y+23	; 0x17
    549a:	b8 8d       	ldd	r27, Y+24	; 0x18
    549c:	82 0f       	add	r24, r18
    549e:	93 1f       	adc	r25, r19
    54a0:	a4 1f       	adc	r26, r20
    54a2:	b5 1f       	adc	r27, r21
    54a4:	89 83       	std	Y+1, r24	; 0x01
    54a6:	9a 83       	std	Y+2, r25	; 0x02
    54a8:	ab 83       	std	Y+3, r26	; 0x03
    54aa:	bc 83       	std	Y+4, r27	; 0x04

	return result;
    54ac:	89 81       	ldd	r24, Y+1	; 0x01
    54ae:	9a 81       	ldd	r25, Y+2	; 0x02
    54b0:	ab 81       	ldd	r26, Y+3	; 0x03
    54b2:	bc 81       	ldd	r27, Y+4	; 0x04

}
    54b4:	bc 01       	movw	r22, r24
    54b6:	cd 01       	movw	r24, r26
    54b8:	a4 96       	adiw	r28, 0x24	; 36
    54ba:	0f b6       	in	r0, 0x3f	; 63
    54bc:	f8 94       	cli
    54be:	de bf       	out	0x3e, r29	; 62
    54c0:	0f be       	out	0x3f, r0	; 63
    54c2:	cd bf       	out	0x3d, r28	; 61
    54c4:	cf 91       	pop	r28
    54c6:	df 91       	pop	r29
    54c8:	1f 91       	pop	r17
    54ca:	0f 91       	pop	r16
    54cc:	ff 90       	pop	r15
    54ce:	ef 90       	pop	r14
    54d0:	df 90       	pop	r13
    54d2:	cf 90       	pop	r12
    54d4:	bf 90       	pop	r11
    54d6:	af 90       	pop	r10
    54d8:	08 95       	ret

000054da <__mulsi3>:
    54da:	62 9f       	mul	r22, r18
    54dc:	d0 01       	movw	r26, r0
    54de:	73 9f       	mul	r23, r19
    54e0:	f0 01       	movw	r30, r0
    54e2:	82 9f       	mul	r24, r18
    54e4:	e0 0d       	add	r30, r0
    54e6:	f1 1d       	adc	r31, r1
    54e8:	64 9f       	mul	r22, r20
    54ea:	e0 0d       	add	r30, r0
    54ec:	f1 1d       	adc	r31, r1
    54ee:	92 9f       	mul	r25, r18
    54f0:	f0 0d       	add	r31, r0
    54f2:	83 9f       	mul	r24, r19
    54f4:	f0 0d       	add	r31, r0
    54f6:	74 9f       	mul	r23, r20
    54f8:	f0 0d       	add	r31, r0
    54fa:	65 9f       	mul	r22, r21
    54fc:	f0 0d       	add	r31, r0
    54fe:	99 27       	eor	r25, r25
    5500:	72 9f       	mul	r23, r18
    5502:	b0 0d       	add	r27, r0
    5504:	e1 1d       	adc	r30, r1
    5506:	f9 1f       	adc	r31, r25
    5508:	63 9f       	mul	r22, r19
    550a:	b0 0d       	add	r27, r0
    550c:	e1 1d       	adc	r30, r1
    550e:	f9 1f       	adc	r31, r25
    5510:	bd 01       	movw	r22, r26
    5512:	cf 01       	movw	r24, r30
    5514:	11 24       	eor	r1, r1
    5516:	08 95       	ret

00005518 <__udivmodhi4>:
    5518:	aa 1b       	sub	r26, r26
    551a:	bb 1b       	sub	r27, r27
    551c:	51 e1       	ldi	r21, 0x11	; 17
    551e:	07 c0       	rjmp	.+14     	; 0x552e <__udivmodhi4_ep>

00005520 <__udivmodhi4_loop>:
    5520:	aa 1f       	adc	r26, r26
    5522:	bb 1f       	adc	r27, r27
    5524:	a6 17       	cp	r26, r22
    5526:	b7 07       	cpc	r27, r23
    5528:	10 f0       	brcs	.+4      	; 0x552e <__udivmodhi4_ep>
    552a:	a6 1b       	sub	r26, r22
    552c:	b7 0b       	sbc	r27, r23

0000552e <__udivmodhi4_ep>:
    552e:	88 1f       	adc	r24, r24
    5530:	99 1f       	adc	r25, r25
    5532:	5a 95       	dec	r21
    5534:	a9 f7       	brne	.-22     	; 0x5520 <__udivmodhi4_loop>
    5536:	80 95       	com	r24
    5538:	90 95       	com	r25
    553a:	bc 01       	movw	r22, r24
    553c:	cd 01       	movw	r24, r26
    553e:	08 95       	ret

00005540 <__udivmodsi4>:
    5540:	a1 e2       	ldi	r26, 0x21	; 33
    5542:	1a 2e       	mov	r1, r26
    5544:	aa 1b       	sub	r26, r26
    5546:	bb 1b       	sub	r27, r27
    5548:	fd 01       	movw	r30, r26
    554a:	0d c0       	rjmp	.+26     	; 0x5566 <__udivmodsi4_ep>

0000554c <__udivmodsi4_loop>:
    554c:	aa 1f       	adc	r26, r26
    554e:	bb 1f       	adc	r27, r27
    5550:	ee 1f       	adc	r30, r30
    5552:	ff 1f       	adc	r31, r31
    5554:	a2 17       	cp	r26, r18
    5556:	b3 07       	cpc	r27, r19
    5558:	e4 07       	cpc	r30, r20
    555a:	f5 07       	cpc	r31, r21
    555c:	20 f0       	brcs	.+8      	; 0x5566 <__udivmodsi4_ep>
    555e:	a2 1b       	sub	r26, r18
    5560:	b3 0b       	sbc	r27, r19
    5562:	e4 0b       	sbc	r30, r20
    5564:	f5 0b       	sbc	r31, r21

00005566 <__udivmodsi4_ep>:
    5566:	66 1f       	adc	r22, r22
    5568:	77 1f       	adc	r23, r23
    556a:	88 1f       	adc	r24, r24
    556c:	99 1f       	adc	r25, r25
    556e:	1a 94       	dec	r1
    5570:	69 f7       	brne	.-38     	; 0x554c <__udivmodsi4_loop>
    5572:	60 95       	com	r22
    5574:	70 95       	com	r23
    5576:	80 95       	com	r24
    5578:	90 95       	com	r25
    557a:	9b 01       	movw	r18, r22
    557c:	ac 01       	movw	r20, r24
    557e:	bd 01       	movw	r22, r26
    5580:	cf 01       	movw	r24, r30
    5582:	08 95       	ret

00005584 <__divmodsi4>:
    5584:	97 fb       	bst	r25, 7
    5586:	09 2e       	mov	r0, r25
    5588:	05 26       	eor	r0, r21
    558a:	0e d0       	rcall	.+28     	; 0x55a8 <__divmodsi4_neg1>
    558c:	57 fd       	sbrc	r21, 7
    558e:	04 d0       	rcall	.+8      	; 0x5598 <__divmodsi4_neg2>
    5590:	d7 df       	rcall	.-82     	; 0x5540 <__udivmodsi4>
    5592:	0a d0       	rcall	.+20     	; 0x55a8 <__divmodsi4_neg1>
    5594:	00 1c       	adc	r0, r0
    5596:	38 f4       	brcc	.+14     	; 0x55a6 <__divmodsi4_exit>

00005598 <__divmodsi4_neg2>:
    5598:	50 95       	com	r21
    559a:	40 95       	com	r20
    559c:	30 95       	com	r19
    559e:	21 95       	neg	r18
    55a0:	3f 4f       	sbci	r19, 0xFF	; 255
    55a2:	4f 4f       	sbci	r20, 0xFF	; 255
    55a4:	5f 4f       	sbci	r21, 0xFF	; 255

000055a6 <__divmodsi4_exit>:
    55a6:	08 95       	ret

000055a8 <__divmodsi4_neg1>:
    55a8:	f6 f7       	brtc	.-4      	; 0x55a6 <__divmodsi4_exit>
    55aa:	90 95       	com	r25
    55ac:	80 95       	com	r24
    55ae:	70 95       	com	r23
    55b0:	61 95       	neg	r22
    55b2:	7f 4f       	sbci	r23, 0xFF	; 255
    55b4:	8f 4f       	sbci	r24, 0xFF	; 255
    55b6:	9f 4f       	sbci	r25, 0xFF	; 255
    55b8:	08 95       	ret

000055ba <__prologue_saves__>:
    55ba:	2f 92       	push	r2
    55bc:	3f 92       	push	r3
    55be:	4f 92       	push	r4
    55c0:	5f 92       	push	r5
    55c2:	6f 92       	push	r6
    55c4:	7f 92       	push	r7
    55c6:	8f 92       	push	r8
    55c8:	9f 92       	push	r9
    55ca:	af 92       	push	r10
    55cc:	bf 92       	push	r11
    55ce:	cf 92       	push	r12
    55d0:	df 92       	push	r13
    55d2:	ef 92       	push	r14
    55d4:	ff 92       	push	r15
    55d6:	0f 93       	push	r16
    55d8:	1f 93       	push	r17
    55da:	cf 93       	push	r28
    55dc:	df 93       	push	r29
    55de:	cd b7       	in	r28, 0x3d	; 61
    55e0:	de b7       	in	r29, 0x3e	; 62
    55e2:	ca 1b       	sub	r28, r26
    55e4:	db 0b       	sbc	r29, r27
    55e6:	0f b6       	in	r0, 0x3f	; 63
    55e8:	f8 94       	cli
    55ea:	de bf       	out	0x3e, r29	; 62
    55ec:	0f be       	out	0x3f, r0	; 63
    55ee:	cd bf       	out	0x3d, r28	; 61
    55f0:	09 94       	ijmp

000055f2 <__epilogue_restores__>:
    55f2:	2a 88       	ldd	r2, Y+18	; 0x12
    55f4:	39 88       	ldd	r3, Y+17	; 0x11
    55f6:	48 88       	ldd	r4, Y+16	; 0x10
    55f8:	5f 84       	ldd	r5, Y+15	; 0x0f
    55fa:	6e 84       	ldd	r6, Y+14	; 0x0e
    55fc:	7d 84       	ldd	r7, Y+13	; 0x0d
    55fe:	8c 84       	ldd	r8, Y+12	; 0x0c
    5600:	9b 84       	ldd	r9, Y+11	; 0x0b
    5602:	aa 84       	ldd	r10, Y+10	; 0x0a
    5604:	b9 84       	ldd	r11, Y+9	; 0x09
    5606:	c8 84       	ldd	r12, Y+8	; 0x08
    5608:	df 80       	ldd	r13, Y+7	; 0x07
    560a:	ee 80       	ldd	r14, Y+6	; 0x06
    560c:	fd 80       	ldd	r15, Y+5	; 0x05
    560e:	0c 81       	ldd	r16, Y+4	; 0x04
    5610:	1b 81       	ldd	r17, Y+3	; 0x03
    5612:	aa 81       	ldd	r26, Y+2	; 0x02
    5614:	b9 81       	ldd	r27, Y+1	; 0x01
    5616:	ce 0f       	add	r28, r30
    5618:	d1 1d       	adc	r29, r1
    561a:	0f b6       	in	r0, 0x3f	; 63
    561c:	f8 94       	cli
    561e:	de bf       	out	0x3e, r29	; 62
    5620:	0f be       	out	0x3f, r0	; 63
    5622:	cd bf       	out	0x3d, r28	; 61
    5624:	ed 01       	movw	r28, r26
    5626:	08 95       	ret

00005628 <_exit>:
    5628:	f8 94       	cli

0000562a <__stop_program>:
    562a:	ff cf       	rjmp	.-2      	; 0x562a <__stop_program>
