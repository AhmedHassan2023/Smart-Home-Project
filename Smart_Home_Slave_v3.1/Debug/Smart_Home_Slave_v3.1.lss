
Smart_Home_Slave_v3.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000046e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  000046e8  0000477c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  0080008a  0080008a  000047a6  2**0
                  ALLOC
  3 .stab         00004524  00000000  00000000  000047a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001b64  00000000  00000000  00008ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000a830  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000a970  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000aae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000c729  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000d614  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000e3c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000e524  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000e7b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ef7f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 13 19 	jmp	0x3226	; 0x3226 <__vector_4>
      14:	0c 94 46 19 	jmp	0x328c	; 0x328c <__vector_5>
      18:	0c 94 ce 16 	jmp	0x2d9c	; 0x2d9c <__vector_6>
      1c:	0c 94 01 17 	jmp	0x2e02	; 0x2e02 <__vector_7>
      20:	0c 94 34 17 	jmp	0x2e68	; 0x2e68 <__vector_8>
      24:	0c 94 67 17 	jmp	0x2ece	; 0x2ece <__vector_9>
      28:	0c 94 34 12 	jmp	0x2468	; 0x2468 <__vector_10>
      2c:	0c 94 67 12 	jmp	0x24ce	; 0x24ce <__vector_11>
      30:	0c 94 ed 0e 	jmp	0x1dda	; 0x1dda <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 54 07 	jmp	0xea8	; 0xea8 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ee       	ldi	r30, 0xE8	; 232
      68:	f6 e4       	ldi	r31, 0x46	; 70
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e8       	ldi	r26, 0x8A	; 138
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3a       	cpi	r26, 0xAB	; 171
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 79 19 	call	0x32f2	; 0x32f2 <main>
      8a:	0c 94 72 23 	jmp	0x46e4	; 0x46e4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3b 23 	jmp	0x4676	; 0x4676 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 57 23 	jmp	0x46ae	; 0x46ae <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 47 23 	jmp	0x468e	; 0x468e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 63 23 	jmp	0x46c6	; 0x46c6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 47 23 	jmp	0x468e	; 0x468e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 63 23 	jmp	0x46c6	; 0x46c6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3b 23 	jmp	0x4676	; 0x4676 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 57 23 	jmp	0x46ae	; 0x46ae <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 47 23 	jmp	0x468e	; 0x468e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 63 23 	jmp	0x46c6	; 0x46c6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 47 23 	jmp	0x468e	; 0x468e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 63 23 	jmp	0x46c6	; 0x46c6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 47 23 	jmp	0x468e	; 0x468e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 63 23 	jmp	0x46c6	; 0x46c6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 4b 23 	jmp	0x4696	; 0x4696 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 67 23 	jmp	0x46ce	; 0x46ce <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidInit>:
static u8* ADC_ChainArr= NULL;
static u8 ADC_u8ChainLength=0;
static u8 ADC_u8ChainIndex=0;

void ADC_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	}

#elif(ADC_VREF==AVCC)
	{
		/*AVCC as reference voltage*/
		SET_BIT(ADMUX,ADMUX_REFS0);
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 64       	ori	r24, 0x40	; 64
     b5a:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,ADMUX_REFS1);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8f 77       	andi	r24, 0x7F	; 127
     b68:	8c 93       	st	X, r24


#if(ADC_RESOLUTION==ADC_8_BITS_RESOLUTION)
	{
		/*Activate Left Adjust result*/
		SET_BIT(ADMUX,ADMUX_ADLAR);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	80 62       	ori	r24, 0x20	; 32
     b76:	8c 93       	st	X, r24
#error "Wrong Resolution Configuration"
#endif


	/*Set Prescaler division factor*/
	ADCSRA &=PRESCALAR_MASK;
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	88 7f       	andi	r24, 0xF8	; 248
     b84:	8c 93       	st	X, r24
	ADCSRA |=ADC_PRESCALAR;
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	87 60       	ori	r24, 0x07	; 7
     b92:	8c 93       	st	X, r24

	/*Enable peripheral*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	80 68       	ori	r24, 0x80	; 128
     ba0:	8c 93       	st	X, r24
}
     ba2:	cf 91       	pop	r28
     ba4:	df 91       	pop	r29
     ba6:	08 95       	ret

00000ba8 <ADC_u8StartConversionSynch>:

u8 ADC_u8StartConversionSynch(u8 Copy_u8Channel,u8* Copy_pu8Reading)
{
     ba8:	df 93       	push	r29
     baa:	cf 93       	push	r28
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62
     bb0:	28 97       	sbiw	r28, 0x08	; 8
     bb2:	0f b6       	in	r0, 0x3f	; 63
     bb4:	f8 94       	cli
     bb6:	de bf       	out	0x3e, r29	; 62
     bb8:	0f be       	out	0x3f, r0	; 63
     bba:	cd bf       	out	0x3d, r28	; 61
     bbc:	8e 83       	std	Y+6, r24	; 0x06
     bbe:	78 87       	std	Y+8, r23	; 0x08
     bc0:	6f 83       	std	Y+7, r22	; 0x07
	u32 Local_u32Counter=0;
     bc2:	1a 82       	std	Y+2, r1	; 0x02
     bc4:	1b 82       	std	Y+3, r1	; 0x03
     bc6:	1c 82       	std	Y+4, r1	; 0x04
     bc8:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8ErrorState=OK;
     bca:	19 82       	std	Y+1, r1	; 0x01

	if(ADC_u8BusyState == IDLE)
     bcc:	80 91 8f 00 	lds	r24, 0x008F
     bd0:	88 23       	and	r24, r24
     bd2:	09 f0       	breq	.+2      	; 0xbd6 <ADC_u8StartConversionSynch+0x2e>
     bd4:	5a c0       	rjmp	.+180    	; 0xc8a <ADC_u8StartConversionSynch+0xe2>
	{
		/*ADC is now BUSY*/
		ADC_u8BusyState =BUSY;
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	80 93 8f 00 	sts	0x008F, r24

		/*Clear the MUX bits in ADMUX register*/
		ADMUX &=ADMUX_Mask;
     bdc:	a7 e2       	ldi	r26, 0x27	; 39
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	e7 e2       	ldi	r30, 0x27	; 39
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	80 7e       	andi	r24, 0xE0	; 224
     be8:	8c 93       	st	X, r24

		/*Set the required Channel into the MUX bits*/
		ADMUX|=Copy_u8Channel;
     bea:	a7 e2       	ldi	r26, 0x27	; 39
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	e7 e2       	ldi	r30, 0x27	; 39
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	90 81       	ld	r25, Z
     bf4:	8e 81       	ldd	r24, Y+6	; 0x06
     bf6:	89 2b       	or	r24, r25
     bf8:	8c 93       	st	X, r24

		/*Start Conversion*/
		SET_BIT(ADCSRA,ADCSRA_ADSC);
     bfa:	a6 e2       	ldi	r26, 0x26	; 38
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	e6 e2       	ldi	r30, 0x26	; 38
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	80 81       	ld	r24, Z
     c04:	80 64       	ori	r24, 0x40	; 64
     c06:	8c 93       	st	X, r24

		/*Polling (busy waiting) until the conversion complete flag is set or Counter reaching timeout value*/
		while(((GET_BIT(ADCSRA,ADCSRA_ADIF))==0) && (Local_u32Counter != ADC_u32TIMEOUT));
     c08:	e6 e2       	ldi	r30, 0x26	; 38
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	82 95       	swap	r24
     c10:	8f 70       	andi	r24, 0x0F	; 15
     c12:	88 2f       	mov	r24, r24
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	81 70       	andi	r24, 0x01	; 1
     c18:	90 70       	andi	r25, 0x00	; 0
     c1a:	00 97       	sbiw	r24, 0x00	; 0
     c1c:	61 f4       	brne	.+24     	; 0xc36 <ADC_u8StartConversionSynch+0x8e>
     c1e:	8a 81       	ldd	r24, Y+2	; 0x02
     c20:	9b 81       	ldd	r25, Y+3	; 0x03
     c22:	ac 81       	ldd	r26, Y+4	; 0x04
     c24:	bd 81       	ldd	r27, Y+5	; 0x05
     c26:	80 35       	cpi	r24, 0x50	; 80
     c28:	23 ec       	ldi	r18, 0xC3	; 195
     c2a:	92 07       	cpc	r25, r18
     c2c:	20 e0       	ldi	r18, 0x00	; 0
     c2e:	a2 07       	cpc	r26, r18
     c30:	20 e0       	ldi	r18, 0x00	; 0
     c32:	b2 07       	cpc	r27, r18
     c34:	49 f7       	brne	.-46     	; 0xc08 <ADC_u8StartConversionSynch+0x60>
		{
			Local_u32Counter++;
     c36:	8a 81       	ldd	r24, Y+2	; 0x02
     c38:	9b 81       	ldd	r25, Y+3	; 0x03
     c3a:	ac 81       	ldd	r26, Y+4	; 0x04
     c3c:	bd 81       	ldd	r27, Y+5	; 0x05
     c3e:	01 96       	adiw	r24, 0x01	; 1
     c40:	a1 1d       	adc	r26, r1
     c42:	b1 1d       	adc	r27, r1
     c44:	8a 83       	std	Y+2, r24	; 0x02
     c46:	9b 83       	std	Y+3, r25	; 0x03
     c48:	ac 83       	std	Y+4, r26	; 0x04
     c4a:	bd 83       	std	Y+5, r27	; 0x05
		}
		if(Local_u32Counter==ADC_u32TIMEOUT)
     c4c:	8a 81       	ldd	r24, Y+2	; 0x02
     c4e:	9b 81       	ldd	r25, Y+3	; 0x03
     c50:	ac 81       	ldd	r26, Y+4	; 0x04
     c52:	bd 81       	ldd	r27, Y+5	; 0x05
     c54:	80 35       	cpi	r24, 0x50	; 80
     c56:	23 ec       	ldi	r18, 0xC3	; 195
     c58:	92 07       	cpc	r25, r18
     c5a:	20 e0       	ldi	r18, 0x00	; 0
     c5c:	a2 07       	cpc	r26, r18
     c5e:	20 e0       	ldi	r18, 0x00	; 0
     c60:	b2 07       	cpc	r27, r18
     c62:	19 f4       	brne	.+6      	; 0xc6a <ADC_u8StartConversionSynch+0xc2>
		{
			/*Loop is broken because the timeout is reached*/
			Local_u8ErrorState=NOK;
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	89 83       	std	Y+1, r24	; 0x01
     c68:	12 c0       	rjmp	.+36     	; 0xc8e <ADC_u8StartConversionSynch+0xe6>
		else
		{
			/*Loop is broken because flag is raised*/

			/*Clear the conversion complete flag*/
			SET_BIT(ADCSRA,ADCSRA_ADIF);
     c6a:	a6 e2       	ldi	r26, 0x26	; 38
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	e6 e2       	ldi	r30, 0x26	; 38
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	80 61       	ori	r24, 0x10	; 16
     c76:	8c 93       	st	X, r24

			/*Return the reading if : 1- 8 bits resolution return ADCH --> Left Adjust
			 * 						  2- 10 bits resolution return ADC --> ADCL+ADCH */
#if(ADC_RESOLUTION == ADC_8_BITS_RESOLUTION)
			{
				*Copy_pu8Reading=ADCH;
     c78:	e5 e2       	ldi	r30, 0x25	; 37
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	ef 81       	ldd	r30, Y+7	; 0x07
     c80:	f8 85       	ldd	r31, Y+8	; 0x08
     c82:	80 83       	st	Z, r24
			{
				*Copy_pu8Rading=ADC;
			}
#endif
			/*ADC is finished, return it to IDLE*/
			ADC_u8BusyState=IDLE;
     c84:	10 92 8f 00 	sts	0x008F, r1
     c88:	02 c0       	rjmp	.+4      	; 0xc8e <ADC_u8StartConversionSynch+0xe6>
		}
	}
	else
	{
		Local_u8ErrorState=BUSY_FUNC;
     c8a:	83 e0       	ldi	r24, 0x03	; 3
     c8c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
}
     c90:	28 96       	adiw	r28, 0x08	; 8
     c92:	0f b6       	in	r0, 0x3f	; 63
     c94:	f8 94       	cli
     c96:	de bf       	out	0x3e, r29	; 62
     c98:	0f be       	out	0x3f, r0	; 63
     c9a:	cd bf       	out	0x3d, r28	; 61
     c9c:	cf 91       	pop	r28
     c9e:	df 91       	pop	r29
     ca0:	08 95       	ret

00000ca2 <ADC_u8StartConversionASynch>:

u8 ADC_u8StartConversionASynch(u8 Copy_u8Channel, u8* Copy_pu8Reading, void(*Copy_pvNotificationFunv)(void))
{
     ca2:	df 93       	push	r29
     ca4:	cf 93       	push	r28
     ca6:	00 d0       	rcall	.+0      	; 0xca8 <ADC_u8StartConversionASynch+0x6>
     ca8:	00 d0       	rcall	.+0      	; 0xcaa <ADC_u8StartConversionASynch+0x8>
     caa:	00 d0       	rcall	.+0      	; 0xcac <ADC_u8StartConversionASynch+0xa>
     cac:	cd b7       	in	r28, 0x3d	; 61
     cae:	de b7       	in	r29, 0x3e	; 62
     cb0:	8a 83       	std	Y+2, r24	; 0x02
     cb2:	7c 83       	std	Y+4, r23	; 0x04
     cb4:	6b 83       	std	Y+3, r22	; 0x03
     cb6:	5e 83       	std	Y+6, r21	; 0x06
     cb8:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState=OK;
     cba:	19 82       	std	Y+1, r1	; 0x01

	if(ADC_u8BusyState==IDLE)
     cbc:	80 91 8f 00 	lds	r24, 0x008F
     cc0:	88 23       	and	r24, r24
     cc2:	c1 f5       	brne	.+112    	; 0xd34 <ADC_u8StartConversionASynch+0x92>
	{
		if(Copy_pu8Reading == NULL || Copy_pvNotificationFunv == NULL)
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	9c 81       	ldd	r25, Y+4	; 0x04
     cc8:	00 97       	sbiw	r24, 0x00	; 0
     cca:	21 f0       	breq	.+8      	; 0xcd4 <ADC_u8StartConversionASynch+0x32>
     ccc:	8d 81       	ldd	r24, Y+5	; 0x05
     cce:	9e 81       	ldd	r25, Y+6	; 0x06
     cd0:	00 97       	sbiw	r24, 0x00	; 0
     cd2:	19 f4       	brne	.+6      	; 0xcda <ADC_u8StartConversionASynch+0x38>
		{
			Local_u8ErrorState=NULL_POINTER;
     cd4:	82 e0       	ldi	r24, 0x02	; 2
     cd6:	89 83       	std	Y+1, r24	; 0x01
     cd8:	2f c0       	rjmp	.+94     	; 0xd38 <ADC_u8StartConversionASynch+0x96>
		}
		else
		{
			/*Make ADC busy in order not to work until being IDLE*/
			ADC_u8BusyState = BUSY;
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	80 93 8f 00 	sts	0x008F, r24

			/*Initialize the reading variable globally*/
			ADC_pu8Reading=Copy_pu8Reading;
     ce0:	8b 81       	ldd	r24, Y+3	; 0x03
     ce2:	9c 81       	ldd	r25, Y+4	; 0x04
     ce4:	90 93 8c 00 	sts	0x008C, r25
     ce8:	80 93 8b 00 	sts	0x008B, r24

			/*Initialize the callback notification function globally*/
			ADC_pvCallBackNotificationFunc=Copy_pvNotificationFunv;
     cec:	8d 81       	ldd	r24, Y+5	; 0x05
     cee:	9e 81       	ldd	r25, Y+6	; 0x06
     cf0:	90 93 8e 00 	sts	0x008E, r25
     cf4:	80 93 8d 00 	sts	0x008D, r24

			/*Clear the MUX bits in ADMUX register*/
			ADMUX &=ADMUX_Mask;
     cf8:	a7 e2       	ldi	r26, 0x27	; 39
     cfa:	b0 e0       	ldi	r27, 0x00	; 0
     cfc:	e7 e2       	ldi	r30, 0x27	; 39
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	80 7e       	andi	r24, 0xE0	; 224
     d04:	8c 93       	st	X, r24

			/*Set the required Channel into the MUX bits*/
			ADMUX|=Copy_u8Channel;
     d06:	a7 e2       	ldi	r26, 0x27	; 39
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	e7 e2       	ldi	r30, 0x27	; 39
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	90 81       	ld	r25, Z
     d10:	8a 81       	ldd	r24, Y+2	; 0x02
     d12:	89 2b       	or	r24, r25
     d14:	8c 93       	st	X, r24

			/*Start Conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     d16:	a6 e2       	ldi	r26, 0x26	; 38
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e6 e2       	ldi	r30, 0x26	; 38
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	80 64       	ori	r24, 0x40	; 64
     d22:	8c 93       	st	X, r24

			/*ADC Interrupt Enable*/
			SET_BIT(ADCSRA,ADCSRA_ADIE);
     d24:	a6 e2       	ldi	r26, 0x26	; 38
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e6 e2       	ldi	r30, 0x26	; 38
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	88 60       	ori	r24, 0x08	; 8
     d30:	8c 93       	st	X, r24
     d32:	02 c0       	rjmp	.+4      	; 0xd38 <ADC_u8StartConversionASynch+0x96>
		}
	}
	else
	{
		Local_u8ErrorState=BUSY_FUNC;
     d34:	83 e0       	ldi	r24, 0x03	; 3
     d36:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
     d38:	89 81       	ldd	r24, Y+1	; 0x01

}
     d3a:	26 96       	adiw	r28, 0x06	; 6
     d3c:	0f b6       	in	r0, 0x3f	; 63
     d3e:	f8 94       	cli
     d40:	de bf       	out	0x3e, r29	; 62
     d42:	0f be       	out	0x3f, r0	; 63
     d44:	cd bf       	out	0x3d, r28	; 61
     d46:	cf 91       	pop	r28
     d48:	df 91       	pop	r29
     d4a:	08 95       	ret

00000d4c <ADC_u8ChainInitAsynch>:

u8 ADC_u8ChainInitAsynch(ADC_chain_t * Copy_ADC_chain_tChain,u8 *Copy_pu8Channels, u8 Copy_u8Size,u8 * Copy_pu8Results)
{
     d4c:	df 93       	push	r29
     d4e:	cf 93       	push	r28
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
     d54:	28 97       	sbiw	r28, 0x08	; 8
     d56:	0f b6       	in	r0, 0x3f	; 63
     d58:	f8 94       	cli
     d5a:	de bf       	out	0x3e, r29	; 62
     d5c:	0f be       	out	0x3f, r0	; 63
     d5e:	cd bf       	out	0x3d, r28	; 61
     d60:	9b 83       	std	Y+3, r25	; 0x03
     d62:	8a 83       	std	Y+2, r24	; 0x02
     d64:	7d 83       	std	Y+5, r23	; 0x05
     d66:	6c 83       	std	Y+4, r22	; 0x04
     d68:	4e 83       	std	Y+6, r20	; 0x06
     d6a:	38 87       	std	Y+8, r19	; 0x08
     d6c:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8ErrorState=OK;
     d6e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_ADC_chain_tChain == NULL || Copy_pu8Channels == NULL || Copy_pu8Results)
     d70:	8a 81       	ldd	r24, Y+2	; 0x02
     d72:	9b 81       	ldd	r25, Y+3	; 0x03
     d74:	00 97       	sbiw	r24, 0x00	; 0
     d76:	41 f0       	breq	.+16     	; 0xd88 <ADC_u8ChainInitAsynch+0x3c>
     d78:	8c 81       	ldd	r24, Y+4	; 0x04
     d7a:	9d 81       	ldd	r25, Y+5	; 0x05
     d7c:	00 97       	sbiw	r24, 0x00	; 0
     d7e:	21 f0       	breq	.+8      	; 0xd88 <ADC_u8ChainInitAsynch+0x3c>
     d80:	8f 81       	ldd	r24, Y+7	; 0x07
     d82:	98 85       	ldd	r25, Y+8	; 0x08
     d84:	00 97       	sbiw	r24, 0x00	; 0
     d86:	19 f0       	breq	.+6      	; 0xd8e <ADC_u8ChainInitAsynch+0x42>
	{
		Local_u8ErrorState=NULL_POINTER;
     d88:	82 e0       	ldi	r24, 0x02	; 2
     d8a:	89 83       	std	Y+1, r24	; 0x01
     d8c:	10 c0       	rjmp	.+32     	; 0xdae <ADC_u8ChainInitAsynch+0x62>
	}
	else
	{
		Copy_ADC_chain_tChain->chain_ID=Copy_pu8Channels;
     d8e:	ea 81       	ldd	r30, Y+2	; 0x02
     d90:	fb 81       	ldd	r31, Y+3	; 0x03
     d92:	8c 81       	ldd	r24, Y+4	; 0x04
     d94:	9d 81       	ldd	r25, Y+5	; 0x05
     d96:	91 83       	std	Z+1, r25	; 0x01
     d98:	80 83       	st	Z, r24
		Copy_ADC_chain_tChain->size=Copy_u8Size;
     d9a:	ea 81       	ldd	r30, Y+2	; 0x02
     d9c:	fb 81       	ldd	r31, Y+3	; 0x03
     d9e:	8e 81       	ldd	r24, Y+6	; 0x06
     da0:	82 83       	std	Z+2, r24	; 0x02
		Copy_ADC_chain_tChain->result=Copy_pu8Results;
     da2:	ea 81       	ldd	r30, Y+2	; 0x02
     da4:	fb 81       	ldd	r31, Y+3	; 0x03
     da6:	8f 81       	ldd	r24, Y+7	; 0x07
     da8:	98 85       	ldd	r25, Y+8	; 0x08
     daa:	94 83       	std	Z+4, r25	; 0x04
     dac:	83 83       	std	Z+3, r24	; 0x03
	}
	return Local_u8ErrorState;
     dae:	89 81       	ldd	r24, Y+1	; 0x01
}
     db0:	28 96       	adiw	r28, 0x08	; 8
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	f8 94       	cli
     db6:	de bf       	out	0x3e, r29	; 62
     db8:	0f be       	out	0x3f, r0	; 63
     dba:	cd bf       	out	0x3d, r28	; 61
     dbc:	cf 91       	pop	r28
     dbe:	df 91       	pop	r29
     dc0:	08 95       	ret

00000dc2 <ADC_u8StartChainConvertionAsynch>:

u8 ADC_u8StartChainConvertionAsynch(ADC_chain_t* Copy_ADC_chain_tChain, void(*Copy_pvNotificationFunc)(void))
{
     dc2:	df 93       	push	r29
     dc4:	cf 93       	push	r28
     dc6:	00 d0       	rcall	.+0      	; 0xdc8 <ADC_u8StartChainConvertionAsynch+0x6>
     dc8:	00 d0       	rcall	.+0      	; 0xdca <ADC_u8StartChainConvertionAsynch+0x8>
     dca:	0f 92       	push	r0
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
     dd0:	9b 83       	std	Y+3, r25	; 0x03
     dd2:	8a 83       	std	Y+2, r24	; 0x02
     dd4:	7d 83       	std	Y+5, r23	; 0x05
     dd6:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState=OK;
     dd8:	19 82       	std	Y+1, r1	; 0x01
	if(ADC_u8BusyState==IDLE)
     dda:	80 91 8f 00 	lds	r24, 0x008F
     dde:	88 23       	and	r24, r24
     de0:	09 f0       	breq	.+2      	; 0xde4 <ADC_u8StartChainConvertionAsynch+0x22>
     de2:	57 c0       	rjmp	.+174    	; 0xe92 <ADC_u8StartChainConvertionAsynch+0xd0>
	{
		if(Copy_ADC_chain_tChain == NULL || Copy_pvNotificationFunc == NULL)
     de4:	8a 81       	ldd	r24, Y+2	; 0x02
     de6:	9b 81       	ldd	r25, Y+3	; 0x03
     de8:	00 97       	sbiw	r24, 0x00	; 0
     dea:	21 f0       	breq	.+8      	; 0xdf4 <ADC_u8StartChainConvertionAsynch+0x32>
     dec:	8c 81       	ldd	r24, Y+4	; 0x04
     dee:	9d 81       	ldd	r25, Y+5	; 0x05
     df0:	00 97       	sbiw	r24, 0x00	; 0
     df2:	19 f4       	brne	.+6      	; 0xdfa <ADC_u8StartChainConvertionAsynch+0x38>
		{
			Local_u8ErrorState=NULL_POINTER;
     df4:	82 e0       	ldi	r24, 0x02	; 2
     df6:	89 83       	std	Y+1, r24	; 0x01
     df8:	4e c0       	rjmp	.+156    	; 0xe96 <ADC_u8StartChainConvertionAsynch+0xd4>
		else
		{
			/*Ready to start conversion*/

			/*Make ADC busy in order not to work until being IDLE ,and Make ISR state Chain Conversion State*/
			ADC_u8BusyState = BUSY;
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	80 93 8f 00 	sts	0x008F, r24
			ADC_u8ISRState = ADC_u8Chain_Converion;
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	80 93 8a 00 	sts	0x008A, r24

			/*Initialize the callback notification function globally*/
			ADC_pvCallBackNotificationFunc = Copy_pvNotificationFunc;
     e06:	8c 81       	ldd	r24, Y+4	; 0x04
     e08:	9d 81       	ldd	r25, Y+5	; 0x05
     e0a:	90 93 8e 00 	sts	0x008E, r25
     e0e:	80 93 8d 00 	sts	0x008D, r24

			ADC_ChainArr=Copy_ADC_chain_tChain->chain_ID;
     e12:	ea 81       	ldd	r30, Y+2	; 0x02
     e14:	fb 81       	ldd	r31, Y+3	; 0x03
     e16:	80 81       	ld	r24, Z
     e18:	91 81       	ldd	r25, Z+1	; 0x01
     e1a:	90 93 91 00 	sts	0x0091, r25
     e1e:	80 93 90 00 	sts	0x0090, r24
			ADC_u8ChainLength=Copy_ADC_chain_tChain->size;
     e22:	ea 81       	ldd	r30, Y+2	; 0x02
     e24:	fb 81       	ldd	r31, Y+3	; 0x03
     e26:	82 81       	ldd	r24, Z+2	; 0x02
     e28:	80 93 92 00 	sts	0x0092, r24
			ADC_pu8Reading=Copy_ADC_chain_tChain->result;
     e2c:	ea 81       	ldd	r30, Y+2	; 0x02
     e2e:	fb 81       	ldd	r31, Y+3	; 0x03
     e30:	83 81       	ldd	r24, Z+3	; 0x03
     e32:	94 81       	ldd	r25, Z+4	; 0x04
     e34:	90 93 8c 00 	sts	0x008C, r25
     e38:	80 93 8b 00 	sts	0x008B, r24

			/*Start conversion for the first channel in the chain*/
			ADC_u8ChainIndex=0;
     e3c:	10 92 93 00 	sts	0x0093, r1

			/*Clear the MUX bits in ADMUX register*/
			ADMUX &=ADMUX_Mask;
     e40:	a7 e2       	ldi	r26, 0x27	; 39
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	e7 e2       	ldi	r30, 0x27	; 39
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	80 7e       	andi	r24, 0xE0	; 224
     e4c:	8c 93       	st	X, r24

			/*Choose Channel*/
			ADMUX|=ADC_ChainArr[ADC_u8ChainIndex];
     e4e:	a7 e2       	ldi	r26, 0x27	; 39
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	e7 e2       	ldi	r30, 0x27	; 39
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	40 81       	ld	r20, Z
     e58:	20 91 90 00 	lds	r18, 0x0090
     e5c:	30 91 91 00 	lds	r19, 0x0091
     e60:	80 91 93 00 	lds	r24, 0x0093
     e64:	88 2f       	mov	r24, r24
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	f9 01       	movw	r30, r18
     e6a:	e8 0f       	add	r30, r24
     e6c:	f9 1f       	adc	r31, r25
     e6e:	80 81       	ld	r24, Z
     e70:	84 2b       	or	r24, r20
     e72:	8c 93       	st	X, r24

			/*Start Conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     e74:	a6 e2       	ldi	r26, 0x26	; 38
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e6 e2       	ldi	r30, 0x26	; 38
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	80 64       	ori	r24, 0x40	; 64
     e80:	8c 93       	st	X, r24

			/*ADC Interrupt Enable*/
			SET_BIT(ADCSRA,ADCSRA_ADIE);
     e82:	a6 e2       	ldi	r26, 0x26	; 38
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e6 e2       	ldi	r30, 0x26	; 38
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	88 60       	ori	r24, 0x08	; 8
     e8e:	8c 93       	st	X, r24
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <ADC_u8StartChainConvertionAsynch+0xd4>
		}
	}
	else
	{
		Local_u8ErrorState=BUSY_FUNC;
     e92:	83 e0       	ldi	r24, 0x03	; 3
     e94:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     e96:	89 81       	ldd	r24, Y+1	; 0x01
}
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
     e9c:	0f 90       	pop	r0
     e9e:	0f 90       	pop	r0
     ea0:	0f 90       	pop	r0
     ea2:	cf 91       	pop	r28
     ea4:	df 91       	pop	r29
     ea6:	08 95       	ret

00000ea8 <__vector_16>:


void __vector_16 (void)  __attribute__((signal));
void __vector_16 (void)
{
     ea8:	1f 92       	push	r1
     eaa:	0f 92       	push	r0
     eac:	0f b6       	in	r0, 0x3f	; 63
     eae:	0f 92       	push	r0
     eb0:	11 24       	eor	r1, r1
     eb2:	2f 93       	push	r18
     eb4:	3f 93       	push	r19
     eb6:	4f 93       	push	r20
     eb8:	5f 93       	push	r21
     eba:	6f 93       	push	r22
     ebc:	7f 93       	push	r23
     ebe:	8f 93       	push	r24
     ec0:	9f 93       	push	r25
     ec2:	af 93       	push	r26
     ec4:	bf 93       	push	r27
     ec6:	ef 93       	push	r30
     ec8:	ff 93       	push	r31
     eca:	df 93       	push	r29
     ecc:	cf 93       	push	r28
     ece:	cd b7       	in	r28, 0x3d	; 61
     ed0:	de b7       	in	r29, 0x3e	; 62
	if(ADC_u8ISRState==ADC_u8Single_Converion)
     ed2:	80 91 8a 00 	lds	r24, 0x008A
     ed6:	88 23       	and	r24, r24
     ed8:	d1 f4       	brne	.+52     	; 0xf0e <__vector_16+0x66>
	{
		/*Read ADC result*/
#if(ADC_RESOLUTION == ADC_8_BITS_RESOLUTION)
		{
			*ADC_pu8Reading = ADCH;
     eda:	a0 91 8b 00 	lds	r26, 0x008B
     ede:	b0 91 8c 00 	lds	r27, 0x008C
     ee2:	e5 e2       	ldi	r30, 0x25	; 37
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	88 2f       	mov	r24, r24
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	8d 93       	st	X+, r24
     eee:	9c 93       	st	X, r25
		}
#endif


		/*make ADC state be IDLE because it finished*/
		ADC_u8BusyState = IDLE;
     ef0:	10 92 8f 00 	sts	0x008F, r1

		/*Invoke the callback notification function*/
		ADC_pvCallBackNotificationFunc();
     ef4:	e0 91 8d 00 	lds	r30, 0x008D
     ef8:	f0 91 8e 00 	lds	r31, 0x008E
     efc:	09 95       	icall

		/*Disable ADC conversion complete interrupt*/
		CLR_BIT(ADCSRA,ADCSRA_ADIE);
     efe:	a6 e2       	ldi	r26, 0x26	; 38
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e6 e2       	ldi	r30, 0x26	; 38
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	87 7f       	andi	r24, 0xF7	; 247
     f0a:	8c 93       	st	X, r24
     f0c:	4c c0       	rjmp	.+152    	; 0xfa6 <__vector_16+0xfe>
	}
	else if(ADC_u8ISRState==ADC_u8Chain_Converion)
     f0e:	80 91 8a 00 	lds	r24, 0x008A
     f12:	81 30       	cpi	r24, 0x01	; 1
     f14:	09 f0       	breq	.+2      	; 0xf18 <__vector_16+0x70>
     f16:	47 c0       	rjmp	.+142    	; 0xfa6 <__vector_16+0xfe>
	{
		/*Read ADC result*/
#if(ADC_RESOLUTION == ADC_8_BITS_RESOLUTION)
		{
			*ADC_pu8Reading = ADCH;
     f18:	a0 91 8b 00 	lds	r26, 0x008B
     f1c:	b0 91 8c 00 	lds	r27, 0x008C
     f20:	e5 e2       	ldi	r30, 0x25	; 37
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	88 2f       	mov	r24, r24
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	11 96       	adiw	r26, 0x01	; 1
     f2c:	9c 93       	st	X, r25
     f2e:	8e 93       	st	-X, r24
			*ADC_pu8Reading = ADC;
		}
#endif

		/*Increment Chain Index*/
		ADC_u8ChainIndex++;
     f30:	80 91 93 00 	lds	r24, 0x0093
     f34:	8f 5f       	subi	r24, 0xFF	; 255
     f36:	80 93 93 00 	sts	0x0093, r24

		/*Check if all channels is converted*/
		if(ADC_u8ChainIndex==ADC_u8ChainLength)
     f3a:	90 91 93 00 	lds	r25, 0x0093
     f3e:	80 91 92 00 	lds	r24, 0x0092
     f42:	98 17       	cp	r25, r24
     f44:	79 f4       	brne	.+30     	; 0xf64 <__vector_16+0xbc>
		{

			/*make ADC state be IDLE because it finished*/
			ADC_u8BusyState = IDLE;
     f46:	10 92 8f 00 	sts	0x008F, r1

			/*Invoke the callback notification function*/
			ADC_pvCallBackNotificationFunc();
     f4a:	e0 91 8d 00 	lds	r30, 0x008D
     f4e:	f0 91 8e 00 	lds	r31, 0x008E
     f52:	09 95       	icall

			/*Disable ADC conversion complete interrupt*/
			CLR_BIT(ADCSRA,ADCSRA_ADIE);
     f54:	a6 e2       	ldi	r26, 0x26	; 38
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	e6 e2       	ldi	r30, 0x26	; 38
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	87 7f       	andi	r24, 0xF7	; 247
     f60:	8c 93       	st	X, r24
     f62:	21 c0       	rjmp	.+66     	; 0xfa6 <__vector_16+0xfe>

		}
		else
		{
			/*Clear the MUX bits in ADMUX register*/
			ADMUX &=ADMUX_Mask;
     f64:	a7 e2       	ldi	r26, 0x27	; 39
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e7 e2       	ldi	r30, 0x27	; 39
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	80 7e       	andi	r24, 0xE0	; 224
     f70:	8c 93       	st	X, r24

			/*Choose Channel*/
			ADMUX|=ADC_ChainArr[ADC_u8ChainIndex];
     f72:	a7 e2       	ldi	r26, 0x27	; 39
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	e7 e2       	ldi	r30, 0x27	; 39
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	40 81       	ld	r20, Z
     f7c:	20 91 90 00 	lds	r18, 0x0090
     f80:	30 91 91 00 	lds	r19, 0x0091
     f84:	80 91 93 00 	lds	r24, 0x0093
     f88:	88 2f       	mov	r24, r24
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	f9 01       	movw	r30, r18
     f8e:	e8 0f       	add	r30, r24
     f90:	f9 1f       	adc	r31, r25
     f92:	80 81       	ld	r24, Z
     f94:	84 2b       	or	r24, r20
     f96:	8c 93       	st	X, r24

			/*Start Conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     f98:	a6 e2       	ldi	r26, 0x26	; 38
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e6 e2       	ldi	r30, 0x26	; 38
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	80 64       	ori	r24, 0x40	; 64
     fa4:	8c 93       	st	X, r24

		}

	}
}
     fa6:	cf 91       	pop	r28
     fa8:	df 91       	pop	r29
     faa:	ff 91       	pop	r31
     fac:	ef 91       	pop	r30
     fae:	bf 91       	pop	r27
     fb0:	af 91       	pop	r26
     fb2:	9f 91       	pop	r25
     fb4:	8f 91       	pop	r24
     fb6:	7f 91       	pop	r23
     fb8:	6f 91       	pop	r22
     fba:	5f 91       	pop	r21
     fbc:	4f 91       	pop	r20
     fbe:	3f 91       	pop	r19
     fc0:	2f 91       	pop	r18
     fc2:	0f 90       	pop	r0
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	0f 90       	pop	r0
     fc8:	1f 90       	pop	r1
     fca:	18 95       	reti

00000fcc <BUZZER_voidInit>:
#include "BUZZER_interface.h"
#include "BUZZER_private.h"
#include "BUZZER_config.h"

void BUZZER_voidInit(void)
{
     fcc:	df 93       	push	r29
     fce:	cf 93       	push	r28
     fd0:	cd b7       	in	r28, 0x3d	; 61
     fd2:	de b7       	in	r29, 0x3e	; 62
	TIMER0_voidInit(TIMER0_FAST_PWM,DIVIDE_BY_8);
     fd4:	83 e0       	ldi	r24, 0x03	; 3
     fd6:	62 e0       	ldi	r22, 0x02	; 2
     fd8:	0e 94 bb 10 	call	0x2176	; 0x2176 <TIMER0_voidInit>
	TIMER0_voidSetCompMatchOutputMode(NON_INVERTED_MODE);
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	0e 94 33 11 	call	0x2266	; 0x2266 <TIMER0_voidSetCompMatchOutputMode>
}
     fe2:	cf 91       	pop	r28
     fe4:	df 91       	pop	r29
     fe6:	08 95       	ret

00000fe8 <BUZZER_voidSetSoundMode>:

void BUZZER_voidSetSoundMode(u8 Copy_u8State)
{
     fe8:	df 93       	push	r29
     fea:	cf 93       	push	r28
     fec:	00 d0       	rcall	.+0      	; 0xfee <BUZZER_voidSetSoundMode+0x6>
     fee:	0f 92       	push	r0
     ff0:	cd b7       	in	r28, 0x3d	; 61
     ff2:	de b7       	in	r29, 0x3e	; 62
     ff4:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8State)
     ff6:	89 81       	ldd	r24, Y+1	; 0x01
     ff8:	28 2f       	mov	r18, r24
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	3b 83       	std	Y+3, r19	; 0x03
     ffe:	2a 83       	std	Y+2, r18	; 0x02
    1000:	8a 81       	ldd	r24, Y+2	; 0x02
    1002:	9b 81       	ldd	r25, Y+3	; 0x03
    1004:	00 97       	sbiw	r24, 0x00	; 0
    1006:	31 f0       	breq	.+12     	; 0x1014 <BUZZER_voidSetSoundMode+0x2c>
    1008:	2a 81       	ldd	r18, Y+2	; 0x02
    100a:	3b 81       	ldd	r19, Y+3	; 0x03
    100c:	21 30       	cpi	r18, 0x01	; 1
    100e:	31 05       	cpc	r19, r1
    1010:	29 f0       	breq	.+10     	; 0x101c <BUZZER_voidSetSoundMode+0x34>
    1012:	07 c0       	rjmp	.+14     	; 0x1022 <BUZZER_voidSetSoundMode+0x3a>
	{
	case BUZZER_ON: TIMER0_voidSetDutyCycle(BUZZER_MAX_SOUND); break;
    1014:	8f e5       	ldi	r24, 0x5F	; 95
    1016:	0e 94 dd 11 	call	0x23ba	; 0x23ba <TIMER0_voidSetDutyCycle>
    101a:	03 c0       	rjmp	.+6      	; 0x1022 <BUZZER_voidSetSoundMode+0x3a>
	case BUZZER_OFF: TIMER0_voidSetDutyCycle(BUZZER_SOUND_OFF); break;
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	0e 94 dd 11 	call	0x23ba	; 0x23ba <TIMER0_voidSetDutyCycle>
	default: break;
	}

}
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	cf 91       	pop	r28
    102a:	df 91       	pop	r29
    102c:	08 95       	ret

0000102e <BUZZER_voidSetSoundValue>:

void BUZZER_voidSetSoundValue(u8 Copy_u8SoundValue)
{
    102e:	df 93       	push	r29
    1030:	cf 93       	push	r28
    1032:	0f 92       	push	r0
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
    1038:	89 83       	std	Y+1, r24	; 0x01
	/*Set sound value from 0 ---> 100 */
	TIMER0_voidSetDutyCycle(Copy_u8SoundValue);
    103a:	89 81       	ldd	r24, Y+1	; 0x01
    103c:	0e 94 dd 11 	call	0x23ba	; 0x23ba <TIMER0_voidSetDutyCycle>
}
    1040:	0f 90       	pop	r0
    1042:	cf 91       	pop	r28
    1044:	df 91       	pop	r29
    1046:	08 95       	ret

00001048 <CLCD_voidSendCommand>:
#include "CLCD_interface.h"
#include "CLCD_private.h"


void CLCD_voidSendCommand(u8 Copy_u8Command)
{
    1048:	df 93       	push	r29
    104a:	cf 93       	push	r28
    104c:	cd b7       	in	r28, 0x3d	; 61
    104e:	de b7       	in	r29, 0x3e	; 62
    1050:	2f 97       	sbiw	r28, 0x0f	; 15
    1052:	0f b6       	in	r0, 0x3f	; 63
    1054:	f8 94       	cli
    1056:	de bf       	out	0x3e, r29	; 62
    1058:	0f be       	out	0x3f, r0	; 63
    105a:	cd bf       	out	0x3d, r28	; 61
    105c:	8f 87       	std	Y+15, r24	; 0x0f
	/*SET RS pin to low for Command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	67 e0       	ldi	r22, 0x07	; 7
    1062:	40 e0       	ldi	r20, 0x00	; 0
    1064:	0e 94 2a 0b 	call	0x1654	; 0x1654 <DIO_u8SetPinValue>

	/*SET RW pin low for Write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	66 e0       	ldi	r22, 0x06	; 6
    106c:	40 e0       	ldi	r20, 0x00	; 0
    106e:	0e 94 2a 0b 	call	0x1654	; 0x1654 <DIO_u8SetPinValue>

	/*Set Command to data pins*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
    1072:	82 e0       	ldi	r24, 0x02	; 2
    1074:	6f 85       	ldd	r22, Y+15	; 0x0f
    1076:	0e 94 3c 0c 	call	0x1878	; 0x1878 <DIO_u8SetPortValue>

	/*Send Enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	65 e0       	ldi	r22, 0x05	; 5
    107e:	41 e0       	ldi	r20, 0x01	; 1
    1080:	0e 94 2a 0b 	call	0x1654	; 0x1654 <DIO_u8SetPinValue>
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	a0 e0       	ldi	r26, 0x00	; 0
    108a:	b0 e4       	ldi	r27, 0x40	; 64
    108c:	8b 87       	std	Y+11, r24	; 0x0b
    108e:	9c 87       	std	Y+12, r25	; 0x0c
    1090:	ad 87       	std	Y+13, r26	; 0x0d
    1092:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1094:	6b 85       	ldd	r22, Y+11	; 0x0b
    1096:	7c 85       	ldd	r23, Y+12	; 0x0c
    1098:	8d 85       	ldd	r24, Y+13	; 0x0d
    109a:	9e 85       	ldd	r25, Y+14	; 0x0e
    109c:	20 e0       	ldi	r18, 0x00	; 0
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	4a ef       	ldi	r20, 0xFA	; 250
    10a2:	54 e4       	ldi	r21, 0x44	; 68
    10a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10a8:	dc 01       	movw	r26, r24
    10aa:	cb 01       	movw	r24, r22
    10ac:	8f 83       	std	Y+7, r24	; 0x07
    10ae:	98 87       	std	Y+8, r25	; 0x08
    10b0:	a9 87       	std	Y+9, r26	; 0x09
    10b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10b4:	6f 81       	ldd	r22, Y+7	; 0x07
    10b6:	78 85       	ldd	r23, Y+8	; 0x08
    10b8:	89 85       	ldd	r24, Y+9	; 0x09
    10ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    10bc:	20 e0       	ldi	r18, 0x00	; 0
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	40 e8       	ldi	r20, 0x80	; 128
    10c2:	5f e3       	ldi	r21, 0x3F	; 63
    10c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10c8:	88 23       	and	r24, r24
    10ca:	2c f4       	brge	.+10     	; 0x10d6 <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	9e 83       	std	Y+6, r25	; 0x06
    10d2:	8d 83       	std	Y+5, r24	; 0x05
    10d4:	3f c0       	rjmp	.+126    	; 0x1154 <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    10d6:	6f 81       	ldd	r22, Y+7	; 0x07
    10d8:	78 85       	ldd	r23, Y+8	; 0x08
    10da:	89 85       	ldd	r24, Y+9	; 0x09
    10dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	3f ef       	ldi	r19, 0xFF	; 255
    10e2:	4f e7       	ldi	r20, 0x7F	; 127
    10e4:	57 e4       	ldi	r21, 0x47	; 71
    10e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10ea:	18 16       	cp	r1, r24
    10ec:	4c f5       	brge	.+82     	; 0x1140 <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    10f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    10f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    10f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    10f6:	20 e0       	ldi	r18, 0x00	; 0
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	40 e2       	ldi	r20, 0x20	; 32
    10fc:	51 e4       	ldi	r21, 0x41	; 65
    10fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1102:	dc 01       	movw	r26, r24
    1104:	cb 01       	movw	r24, r22
    1106:	bc 01       	movw	r22, r24
    1108:	cd 01       	movw	r24, r26
    110a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    110e:	dc 01       	movw	r26, r24
    1110:	cb 01       	movw	r24, r22
    1112:	9e 83       	std	Y+6, r25	; 0x06
    1114:	8d 83       	std	Y+5, r24	; 0x05
    1116:	0f c0       	rjmp	.+30     	; 0x1136 <CLCD_voidSendCommand+0xee>
    1118:	88 ec       	ldi	r24, 0xC8	; 200
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	9c 83       	std	Y+4, r25	; 0x04
    111e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1120:	8b 81       	ldd	r24, Y+3	; 0x03
    1122:	9c 81       	ldd	r25, Y+4	; 0x04
    1124:	01 97       	sbiw	r24, 0x01	; 1
    1126:	f1 f7       	brne	.-4      	; 0x1124 <CLCD_voidSendCommand+0xdc>
    1128:	9c 83       	std	Y+4, r25	; 0x04
    112a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    112c:	8d 81       	ldd	r24, Y+5	; 0x05
    112e:	9e 81       	ldd	r25, Y+6	; 0x06
    1130:	01 97       	sbiw	r24, 0x01	; 1
    1132:	9e 83       	std	Y+6, r25	; 0x06
    1134:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1136:	8d 81       	ldd	r24, Y+5	; 0x05
    1138:	9e 81       	ldd	r25, Y+6	; 0x06
    113a:	00 97       	sbiw	r24, 0x00	; 0
    113c:	69 f7       	brne	.-38     	; 0x1118 <CLCD_voidSendCommand+0xd0>
    113e:	14 c0       	rjmp	.+40     	; 0x1168 <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1140:	6f 81       	ldd	r22, Y+7	; 0x07
    1142:	78 85       	ldd	r23, Y+8	; 0x08
    1144:	89 85       	ldd	r24, Y+9	; 0x09
    1146:	9a 85       	ldd	r25, Y+10	; 0x0a
    1148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    114c:	dc 01       	movw	r26, r24
    114e:	cb 01       	movw	r24, r22
    1150:	9e 83       	std	Y+6, r25	; 0x06
    1152:	8d 83       	std	Y+5, r24	; 0x05
    1154:	8d 81       	ldd	r24, Y+5	; 0x05
    1156:	9e 81       	ldd	r25, Y+6	; 0x06
    1158:	9a 83       	std	Y+2, r25	; 0x02
    115a:	89 83       	std	Y+1, r24	; 0x01
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	9a 81       	ldd	r25, Y+2	; 0x02
    1160:	01 97       	sbiw	r24, 0x01	; 1
    1162:	f1 f7       	brne	.-4      	; 0x1160 <CLCD_voidSendCommand+0x118>
    1164:	9a 83       	std	Y+2, r25	; 0x02
    1166:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1168:	80 e0       	ldi	r24, 0x00	; 0
    116a:	65 e0       	ldi	r22, 0x05	; 5
    116c:	40 e0       	ldi	r20, 0x00	; 0
    116e:	0e 94 2a 0b 	call	0x1654	; 0x1654 <DIO_u8SetPinValue>



}
    1172:	2f 96       	adiw	r28, 0x0f	; 15
    1174:	0f b6       	in	r0, 0x3f	; 63
    1176:	f8 94       	cli
    1178:	de bf       	out	0x3e, r29	; 62
    117a:	0f be       	out	0x3f, r0	; 63
    117c:	cd bf       	out	0x3d, r28	; 61
    117e:	cf 91       	pop	r28
    1180:	df 91       	pop	r29
    1182:	08 95       	ret

00001184 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
    1184:	df 93       	push	r29
    1186:	cf 93       	push	r28
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    118c:	2f 97       	sbiw	r28, 0x0f	; 15
    118e:	0f b6       	in	r0, 0x3f	; 63
    1190:	f8 94       	cli
    1192:	de bf       	out	0x3e, r29	; 62
    1194:	0f be       	out	0x3f, r0	; 63
    1196:	cd bf       	out	0x3d, r28	; 61
    1198:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set RS pin to HIGH for Data*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	67 e0       	ldi	r22, 0x07	; 7
    119e:	41 e0       	ldi	r20, 0x01	; 1
    11a0:	0e 94 2a 0b 	call	0x1654	; 0x1654 <DIO_u8SetPinValue>

	/*Set RW pin low for Write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
    11a4:	80 e0       	ldi	r24, 0x00	; 0
    11a6:	66 e0       	ldi	r22, 0x06	; 6
    11a8:	40 e0       	ldi	r20, 0x00	; 0
    11aa:	0e 94 2a 0b 	call	0x1654	; 0x1654 <DIO_u8SetPinValue>

	/*Send Data to data pins*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
    11ae:	82 e0       	ldi	r24, 0x02	; 2
    11b0:	6f 85       	ldd	r22, Y+15	; 0x0f
    11b2:	0e 94 3c 0c 	call	0x1878	; 0x1878 <DIO_u8SetPortValue>

	/*Send Enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	65 e0       	ldi	r22, 0x05	; 5
    11ba:	41 e0       	ldi	r20, 0x01	; 1
    11bc:	0e 94 2a 0b 	call	0x1654	; 0x1654 <DIO_u8SetPinValue>
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	a0 e0       	ldi	r26, 0x00	; 0
    11c6:	b0 e4       	ldi	r27, 0x40	; 64
    11c8:	8b 87       	std	Y+11, r24	; 0x0b
    11ca:	9c 87       	std	Y+12, r25	; 0x0c
    11cc:	ad 87       	std	Y+13, r26	; 0x0d
    11ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    11d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    11d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    11d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    11d8:	20 e0       	ldi	r18, 0x00	; 0
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	4a ef       	ldi	r20, 0xFA	; 250
    11de:	54 e4       	ldi	r21, 0x44	; 68
    11e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11e4:	dc 01       	movw	r26, r24
    11e6:	cb 01       	movw	r24, r22
    11e8:	8f 83       	std	Y+7, r24	; 0x07
    11ea:	98 87       	std	Y+8, r25	; 0x08
    11ec:	a9 87       	std	Y+9, r26	; 0x09
    11ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11f0:	6f 81       	ldd	r22, Y+7	; 0x07
    11f2:	78 85       	ldd	r23, Y+8	; 0x08
    11f4:	89 85       	ldd	r24, Y+9	; 0x09
    11f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    11f8:	20 e0       	ldi	r18, 0x00	; 0
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	40 e8       	ldi	r20, 0x80	; 128
    11fe:	5f e3       	ldi	r21, 0x3F	; 63
    1200:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1204:	88 23       	and	r24, r24
    1206:	2c f4       	brge	.+10     	; 0x1212 <CLCD_voidSendData+0x8e>
		__ticks = 1;
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	9e 83       	std	Y+6, r25	; 0x06
    120e:	8d 83       	std	Y+5, r24	; 0x05
    1210:	3f c0       	rjmp	.+126    	; 0x1290 <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    1212:	6f 81       	ldd	r22, Y+7	; 0x07
    1214:	78 85       	ldd	r23, Y+8	; 0x08
    1216:	89 85       	ldd	r24, Y+9	; 0x09
    1218:	9a 85       	ldd	r25, Y+10	; 0x0a
    121a:	20 e0       	ldi	r18, 0x00	; 0
    121c:	3f ef       	ldi	r19, 0xFF	; 255
    121e:	4f e7       	ldi	r20, 0x7F	; 127
    1220:	57 e4       	ldi	r21, 0x47	; 71
    1222:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1226:	18 16       	cp	r1, r24
    1228:	4c f5       	brge	.+82     	; 0x127c <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    122a:	6b 85       	ldd	r22, Y+11	; 0x0b
    122c:	7c 85       	ldd	r23, Y+12	; 0x0c
    122e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1230:	9e 85       	ldd	r25, Y+14	; 0x0e
    1232:	20 e0       	ldi	r18, 0x00	; 0
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	40 e2       	ldi	r20, 0x20	; 32
    1238:	51 e4       	ldi	r21, 0x41	; 65
    123a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    123e:	dc 01       	movw	r26, r24
    1240:	cb 01       	movw	r24, r22
    1242:	bc 01       	movw	r22, r24
    1244:	cd 01       	movw	r24, r26
    1246:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    124a:	dc 01       	movw	r26, r24
    124c:	cb 01       	movw	r24, r22
    124e:	9e 83       	std	Y+6, r25	; 0x06
    1250:	8d 83       	std	Y+5, r24	; 0x05
    1252:	0f c0       	rjmp	.+30     	; 0x1272 <CLCD_voidSendData+0xee>
    1254:	88 ec       	ldi	r24, 0xC8	; 200
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	9c 83       	std	Y+4, r25	; 0x04
    125a:	8b 83       	std	Y+3, r24	; 0x03
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	9c 81       	ldd	r25, Y+4	; 0x04
    1260:	01 97       	sbiw	r24, 0x01	; 1
    1262:	f1 f7       	brne	.-4      	; 0x1260 <CLCD_voidSendData+0xdc>
    1264:	9c 83       	std	Y+4, r25	; 0x04
    1266:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1268:	8d 81       	ldd	r24, Y+5	; 0x05
    126a:	9e 81       	ldd	r25, Y+6	; 0x06
    126c:	01 97       	sbiw	r24, 0x01	; 1
    126e:	9e 83       	std	Y+6, r25	; 0x06
    1270:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1272:	8d 81       	ldd	r24, Y+5	; 0x05
    1274:	9e 81       	ldd	r25, Y+6	; 0x06
    1276:	00 97       	sbiw	r24, 0x00	; 0
    1278:	69 f7       	brne	.-38     	; 0x1254 <CLCD_voidSendData+0xd0>
    127a:	14 c0       	rjmp	.+40     	; 0x12a4 <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    127c:	6f 81       	ldd	r22, Y+7	; 0x07
    127e:	78 85       	ldd	r23, Y+8	; 0x08
    1280:	89 85       	ldd	r24, Y+9	; 0x09
    1282:	9a 85       	ldd	r25, Y+10	; 0x0a
    1284:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1288:	dc 01       	movw	r26, r24
    128a:	cb 01       	movw	r24, r22
    128c:	9e 83       	std	Y+6, r25	; 0x06
    128e:	8d 83       	std	Y+5, r24	; 0x05
    1290:	8d 81       	ldd	r24, Y+5	; 0x05
    1292:	9e 81       	ldd	r25, Y+6	; 0x06
    1294:	9a 83       	std	Y+2, r25	; 0x02
    1296:	89 83       	std	Y+1, r24	; 0x01
    1298:	89 81       	ldd	r24, Y+1	; 0x01
    129a:	9a 81       	ldd	r25, Y+2	; 0x02
    129c:	01 97       	sbiw	r24, 0x01	; 1
    129e:	f1 f7       	brne	.-4      	; 0x129c <CLCD_voidSendData+0x118>
    12a0:	9a 83       	std	Y+2, r25	; 0x02
    12a2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    12a4:	80 e0       	ldi	r24, 0x00	; 0
    12a6:	65 e0       	ldi	r22, 0x05	; 5
    12a8:	40 e0       	ldi	r20, 0x00	; 0
    12aa:	0e 94 2a 0b 	call	0x1654	; 0x1654 <DIO_u8SetPinValue>


}
    12ae:	2f 96       	adiw	r28, 0x0f	; 15
    12b0:	0f b6       	in	r0, 0x3f	; 63
    12b2:	f8 94       	cli
    12b4:	de bf       	out	0x3e, r29	; 62
    12b6:	0f be       	out	0x3f, r0	; 63
    12b8:	cd bf       	out	0x3d, r28	; 61
    12ba:	cf 91       	pop	r28
    12bc:	df 91       	pop	r29
    12be:	08 95       	ret

000012c0 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    12c0:	df 93       	push	r29
    12c2:	cf 93       	push	r28
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
    12c8:	2e 97       	sbiw	r28, 0x0e	; 14
    12ca:	0f b6       	in	r0, 0x3f	; 63
    12cc:	f8 94       	cli
    12ce:	de bf       	out	0x3e, r29	; 62
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	cd bf       	out	0x3d, r28	; 61
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	a0 e2       	ldi	r26, 0x20	; 32
    12da:	b2 e4       	ldi	r27, 0x42	; 66
    12dc:	8b 87       	std	Y+11, r24	; 0x0b
    12de:	9c 87       	std	Y+12, r25	; 0x0c
    12e0:	ad 87       	std	Y+13, r26	; 0x0d
    12e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    12e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    12e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    12ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	4a ef       	ldi	r20, 0xFA	; 250
    12f2:	54 e4       	ldi	r21, 0x44	; 68
    12f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f8:	dc 01       	movw	r26, r24
    12fa:	cb 01       	movw	r24, r22
    12fc:	8f 83       	std	Y+7, r24	; 0x07
    12fe:	98 87       	std	Y+8, r25	; 0x08
    1300:	a9 87       	std	Y+9, r26	; 0x09
    1302:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1304:	6f 81       	ldd	r22, Y+7	; 0x07
    1306:	78 85       	ldd	r23, Y+8	; 0x08
    1308:	89 85       	ldd	r24, Y+9	; 0x09
    130a:	9a 85       	ldd	r25, Y+10	; 0x0a
    130c:	20 e0       	ldi	r18, 0x00	; 0
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	40 e8       	ldi	r20, 0x80	; 128
    1312:	5f e3       	ldi	r21, 0x3F	; 63
    1314:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1318:	88 23       	and	r24, r24
    131a:	2c f4       	brge	.+10     	; 0x1326 <CLCD_voidInit+0x66>
		__ticks = 1;
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	9e 83       	std	Y+6, r25	; 0x06
    1322:	8d 83       	std	Y+5, r24	; 0x05
    1324:	3f c0       	rjmp	.+126    	; 0x13a4 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1326:	6f 81       	ldd	r22, Y+7	; 0x07
    1328:	78 85       	ldd	r23, Y+8	; 0x08
    132a:	89 85       	ldd	r24, Y+9	; 0x09
    132c:	9a 85       	ldd	r25, Y+10	; 0x0a
    132e:	20 e0       	ldi	r18, 0x00	; 0
    1330:	3f ef       	ldi	r19, 0xFF	; 255
    1332:	4f e7       	ldi	r20, 0x7F	; 127
    1334:	57 e4       	ldi	r21, 0x47	; 71
    1336:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    133a:	18 16       	cp	r1, r24
    133c:	4c f5       	brge	.+82     	; 0x1390 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    133e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1340:	7c 85       	ldd	r23, Y+12	; 0x0c
    1342:	8d 85       	ldd	r24, Y+13	; 0x0d
    1344:	9e 85       	ldd	r25, Y+14	; 0x0e
    1346:	20 e0       	ldi	r18, 0x00	; 0
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	40 e2       	ldi	r20, 0x20	; 32
    134c:	51 e4       	ldi	r21, 0x41	; 65
    134e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1352:	dc 01       	movw	r26, r24
    1354:	cb 01       	movw	r24, r22
    1356:	bc 01       	movw	r22, r24
    1358:	cd 01       	movw	r24, r26
    135a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    135e:	dc 01       	movw	r26, r24
    1360:	cb 01       	movw	r24, r22
    1362:	9e 83       	std	Y+6, r25	; 0x06
    1364:	8d 83       	std	Y+5, r24	; 0x05
    1366:	0f c0       	rjmp	.+30     	; 0x1386 <CLCD_voidInit+0xc6>
    1368:	88 ec       	ldi	r24, 0xC8	; 200
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	9c 83       	std	Y+4, r25	; 0x04
    136e:	8b 83       	std	Y+3, r24	; 0x03
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	9c 81       	ldd	r25, Y+4	; 0x04
    1374:	01 97       	sbiw	r24, 0x01	; 1
    1376:	f1 f7       	brne	.-4      	; 0x1374 <CLCD_voidInit+0xb4>
    1378:	9c 83       	std	Y+4, r25	; 0x04
    137a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    137c:	8d 81       	ldd	r24, Y+5	; 0x05
    137e:	9e 81       	ldd	r25, Y+6	; 0x06
    1380:	01 97       	sbiw	r24, 0x01	; 1
    1382:	9e 83       	std	Y+6, r25	; 0x06
    1384:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1386:	8d 81       	ldd	r24, Y+5	; 0x05
    1388:	9e 81       	ldd	r25, Y+6	; 0x06
    138a:	00 97       	sbiw	r24, 0x00	; 0
    138c:	69 f7       	brne	.-38     	; 0x1368 <CLCD_voidInit+0xa8>
    138e:	14 c0       	rjmp	.+40     	; 0x13b8 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1390:	6f 81       	ldd	r22, Y+7	; 0x07
    1392:	78 85       	ldd	r23, Y+8	; 0x08
    1394:	89 85       	ldd	r24, Y+9	; 0x09
    1396:	9a 85       	ldd	r25, Y+10	; 0x0a
    1398:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    139c:	dc 01       	movw	r26, r24
    139e:	cb 01       	movw	r24, r22
    13a0:	9e 83       	std	Y+6, r25	; 0x06
    13a2:	8d 83       	std	Y+5, r24	; 0x05
    13a4:	8d 81       	ldd	r24, Y+5	; 0x05
    13a6:	9e 81       	ldd	r25, Y+6	; 0x06
    13a8:	9a 83       	std	Y+2, r25	; 0x02
    13aa:	89 83       	std	Y+1, r24	; 0x01
    13ac:	89 81       	ldd	r24, Y+1	; 0x01
    13ae:	9a 81       	ldd	r25, Y+2	; 0x02
    13b0:	01 97       	sbiw	r24, 0x01	; 1
    13b2:	f1 f7       	brne	.-4      	; 0x13b0 <CLCD_voidInit+0xf0>
    13b4:	9a 83       	std	Y+2, r25	; 0x02
    13b6:	89 83       	std	Y+1, r24	; 0x01
	/*Wait for more than 30 ms*/
	_delay_ms(40);

	/*Function Send command : 2 Lines, 5*8 Font size*/
	CLCD_voidSendCommand(0b00111000);
    13b8:	88 e3       	ldi	r24, 0x38	; 56
    13ba:	0e 94 24 08 	call	0x1048	; 0x1048 <CLCD_voidSendCommand>

	/*Display on off control: display enable, disable cursor, no blink cursor*/
	CLCD_voidSendCommand(0b00001100);
    13be:	8c e0       	ldi	r24, 0x0C	; 12
    13c0:	0e 94 24 08 	call	0x1048	; 0x1048 <CLCD_voidSendCommand>

	/*Clear display -> 0b00000001 == 1*/
	CLCD_voidSendCommand(1);
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	0e 94 24 08 	call	0x1048	; 0x1048 <CLCD_voidSendCommand>
#else
#error "Wrong CLCD MODE Initialization Option"
#endif

*/
}
    13ca:	2e 96       	adiw	r28, 0x0e	; 14
    13cc:	0f b6       	in	r0, 0x3f	; 63
    13ce:	f8 94       	cli
    13d0:	de bf       	out	0x3e, r29	; 62
    13d2:	0f be       	out	0x3f, r0	; 63
    13d4:	cd bf       	out	0x3d, r28	; 61
    13d6:	cf 91       	pop	r28
    13d8:	df 91       	pop	r29
    13da:	08 95       	ret

000013dc <CLCD_voidSendString>:

void CLCD_voidSendString(const char* Copy_pcString)
{
    13dc:	df 93       	push	r29
    13de:	cf 93       	push	r28
    13e0:	00 d0       	rcall	.+0      	; 0x13e2 <CLCD_voidSendString+0x6>
    13e2:	0f 92       	push	r0
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
    13e8:	9b 83       	std	Y+3, r25	; 0x03
    13ea:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter=0;
    13ec:	19 82       	std	Y+1, r1	; 0x01
    13ee:	0e c0       	rjmp	.+28     	; 0x140c <CLCD_voidSendString+0x30>
	while(Copy_pcString[Local_u8Counter]!= '\0')
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
    13f0:	89 81       	ldd	r24, Y+1	; 0x01
    13f2:	28 2f       	mov	r18, r24
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	9b 81       	ldd	r25, Y+3	; 0x03
    13fa:	fc 01       	movw	r30, r24
    13fc:	e2 0f       	add	r30, r18
    13fe:	f3 1f       	adc	r31, r19
    1400:	80 81       	ld	r24, Z
    1402:	0e 94 c2 08 	call	0x1184	; 0x1184 <CLCD_voidSendData>
		Local_u8Counter++;
    1406:	89 81       	ldd	r24, Y+1	; 0x01
    1408:	8f 5f       	subi	r24, 0xFF	; 255
    140a:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_voidSendString(const char* Copy_pcString)
{
	u8 Local_u8Counter=0;
	while(Copy_pcString[Local_u8Counter]!= '\0')
    140c:	89 81       	ldd	r24, Y+1	; 0x01
    140e:	28 2f       	mov	r18, r24
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	8a 81       	ldd	r24, Y+2	; 0x02
    1414:	9b 81       	ldd	r25, Y+3	; 0x03
    1416:	fc 01       	movw	r30, r24
    1418:	e2 0f       	add	r30, r18
    141a:	f3 1f       	adc	r31, r19
    141c:	80 81       	ld	r24, Z
    141e:	88 23       	and	r24, r24
    1420:	39 f7       	brne	.-50     	; 0x13f0 <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
	}

}
    1422:	0f 90       	pop	r0
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
    1428:	cf 91       	pop	r28
    142a:	df 91       	pop	r29
    142c:	08 95       	ret

0000142e <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    142e:	df 93       	push	r29
    1430:	cf 93       	push	r28
    1432:	00 d0       	rcall	.+0      	; 0x1434 <CLCD_voidGoToXY+0x6>
    1434:	0f 92       	push	r0
    1436:	cd b7       	in	r28, 0x3d	; 61
    1438:	de b7       	in	r29, 0x3e	; 62
    143a:	8a 83       	std	Y+2, r24	; 0x02
    143c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if (Copy_u8XPos==0)
    143e:	8a 81       	ldd	r24, Y+2	; 0x02
    1440:	88 23       	and	r24, r24
    1442:	19 f4       	brne	.+6      	; 0x144a <CLCD_voidGoToXY+0x1c>
	{
		/*Location is at first line*/
		Local_u8Address=Copy_u8YPos;
    1444:	8b 81       	ldd	r24, Y+3	; 0x03
    1446:	89 83       	std	Y+1, r24	; 0x01
    1448:	06 c0       	rjmp	.+12     	; 0x1456 <CLCD_voidGoToXY+0x28>
	}
	else if(Copy_u8XPos==1)
    144a:	8a 81       	ldd	r24, Y+2	; 0x02
    144c:	81 30       	cpi	r24, 0x01	; 1
    144e:	19 f4       	brne	.+6      	; 0x1456 <CLCD_voidGoToXY+0x28>
	{
		/*Location is at second line*/
		Local_u8Address=Copy_u8YPos+0x40;
    1450:	8b 81       	ldd	r24, Y+3	; 0x03
    1452:	80 5c       	subi	r24, 0xC0	; 192
    1454:	89 83       	std	Y+1, r24	; 0x01
	}
	/*set bit number 7 for Set DDRAM Address command then send the command*/
	CLCD_voidSendCommand(Local_u8Address+128);
    1456:	89 81       	ldd	r24, Y+1	; 0x01
    1458:	80 58       	subi	r24, 0x80	; 128
    145a:	0e 94 24 08 	call	0x1048	; 0x1048 <CLCD_voidSendCommand>

}
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	cf 91       	pop	r28
    1466:	df 91       	pop	r29
    1468:	08 95       	ret

0000146a <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern,u8 Copy_u8PatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    146a:	df 93       	push	r29
    146c:	cf 93       	push	r28
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
    1472:	27 97       	sbiw	r28, 0x07	; 7
    1474:	0f b6       	in	r0, 0x3f	; 63
    1476:	f8 94       	cli
    1478:	de bf       	out	0x3e, r29	; 62
    147a:	0f be       	out	0x3f, r0	; 63
    147c:	cd bf       	out	0x3d, r28	; 61
    147e:	9c 83       	std	Y+4, r25	; 0x04
    1480:	8b 83       	std	Y+3, r24	; 0x03
    1482:	6d 83       	std	Y+5, r22	; 0x05
    1484:	4e 83       	std	Y+6, r20	; 0x06
    1486:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress=0, Local_u8Iterator;
    1488:	1a 82       	std	Y+2, r1	; 0x02

	/*Calculate CGRAM Address whose each block is 8 bytes*/
	Local_u8CGRAMAddress= Copy_u8PatternNumber*8;
    148a:	8d 81       	ldd	r24, Y+5	; 0x05
    148c:	88 2f       	mov	r24, r24
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	88 0f       	add	r24, r24
    1492:	99 1f       	adc	r25, r25
    1494:	88 0f       	add	r24, r24
    1496:	99 1f       	adc	r25, r25
    1498:	88 0f       	add	r24, r24
    149a:	99 1f       	adc	r25, r25
    149c:	8a 83       	std	Y+2, r24	; 0x02

	/*Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7*/
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	80 5c       	subi	r24, 0xC0	; 192
    14a2:	0e 94 24 08 	call	0x1048	; 0x1048 <CLCD_voidSendCommand>

	/*Write the Pattern into CGRAM */
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    14a6:	19 82       	std	Y+1, r1	; 0x01
    14a8:	0e c0       	rjmp	.+28     	; 0x14c6 <CLCD_voidWriteSpecialCharacter+0x5c>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
    14aa:	89 81       	ldd	r24, Y+1	; 0x01
    14ac:	28 2f       	mov	r18, r24
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	8b 81       	ldd	r24, Y+3	; 0x03
    14b2:	9c 81       	ldd	r25, Y+4	; 0x04
    14b4:	fc 01       	movw	r30, r24
    14b6:	e2 0f       	add	r30, r18
    14b8:	f3 1f       	adc	r31, r19
    14ba:	80 81       	ld	r24, Z
    14bc:	0e 94 c2 08 	call	0x1184	; 0x1184 <CLCD_voidSendData>

	/*Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7*/
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);

	/*Write the Pattern into CGRAM */
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    14c0:	89 81       	ldd	r24, Y+1	; 0x01
    14c2:	8f 5f       	subi	r24, 0xFF	; 255
    14c4:	89 83       	std	Y+1, r24	; 0x01
    14c6:	89 81       	ldd	r24, Y+1	; 0x01
    14c8:	88 30       	cpi	r24, 0x08	; 8
    14ca:	78 f3       	brcs	.-34     	; 0x14aa <CLCD_voidWriteSpecialCharacter+0x40>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);

	}
	/*go back to DDRAM to display the pattern*/
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    14cc:	8e 81       	ldd	r24, Y+6	; 0x06
    14ce:	6f 81       	ldd	r22, Y+7	; 0x07
    14d0:	0e 94 17 0a 	call	0x142e	; 0x142e <CLCD_voidGoToXY>

	/*Display the Pattern written in CGRAM */
	CLCD_voidSendData(Copy_u8PatternNumber);
    14d4:	8d 81       	ldd	r24, Y+5	; 0x05
    14d6:	0e 94 c2 08 	call	0x1184	; 0x1184 <CLCD_voidSendData>

}
    14da:	27 96       	adiw	r28, 0x07	; 7
    14dc:	0f b6       	in	r0, 0x3f	; 63
    14de:	f8 94       	cli
    14e0:	de bf       	out	0x3e, r29	; 62
    14e2:	0f be       	out	0x3f, r0	; 63
    14e4:	cd bf       	out	0x3d, r28	; 61
    14e6:	cf 91       	pop	r28
    14e8:	df 91       	pop	r29
    14ea:	08 95       	ret

000014ec <CLCD_voidWriteNumber>:

void CLCD_voidWriteNumber(u32 Copy_u32Number,u32 Copy_u32FieldLength)
{
    14ec:	0f 93       	push	r16
    14ee:	1f 93       	push	r17
    14f0:	df 93       	push	r29
    14f2:	cf 93       	push	r28
    14f4:	cd b7       	in	r28, 0x3d	; 61
    14f6:	de b7       	in	r29, 0x3e	; 62
    14f8:	66 97       	sbiw	r28, 0x16	; 22
    14fa:	0f b6       	in	r0, 0x3f	; 63
    14fc:	f8 94       	cli
    14fe:	de bf       	out	0x3e, r29	; 62
    1500:	0f be       	out	0x3f, r0	; 63
    1502:	cd bf       	out	0x3d, r28	; 61
    1504:	6f 87       	std	Y+15, r22	; 0x0f
    1506:	78 8b       	std	Y+16, r23	; 0x10
    1508:	89 8b       	std	Y+17, r24	; 0x11
    150a:	9a 8b       	std	Y+18, r25	; 0x12
    150c:	2b 8b       	std	Y+19, r18	; 0x13
    150e:	3c 8b       	std	Y+20, r19	; 0x14
    1510:	4d 8b       	std	Y+21, r20	; 0x15
    1512:	5e 8b       	std	Y+22, r21	; 0x16
	/*Copy_u32FieldLength  --> no of Number digits that will be displayed from 1:5.
	  if -1 it will display the number as Keypad.
	 */
	u16 str[5]={0,0,0,0,0};
    1514:	8a e0       	ldi	r24, 0x0A	; 10
    1516:	fe 01       	movw	r30, r28
    1518:	35 96       	adiw	r30, 0x05	; 5
    151a:	df 01       	movw	r26, r30
    151c:	28 2f       	mov	r18, r24
    151e:	1d 92       	st	X+, r1
    1520:	2a 95       	dec	r18
    1522:	e9 f7       	brne	.-6      	; 0x151e <CLCD_voidWriteNumber+0x32>
	u16 i=4,j=0;
    1524:	84 e0       	ldi	r24, 0x04	; 4
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	9c 83       	std	Y+4, r25	; 0x04
    152a:	8b 83       	std	Y+3, r24	; 0x03
    152c:	1a 82       	std	Y+2, r1	; 0x02
    152e:	19 82       	std	Y+1, r1	; 0x01
    1530:	33 c0       	rjmp	.+102    	; 0x1598 <CLCD_voidWriteNumber+0xac>

	}

	while(Copy_u32Number)
	{
		str[i]=Copy_u32Number%10;
    1532:	0b 81       	ldd	r16, Y+3	; 0x03
    1534:	1c 81       	ldd	r17, Y+4	; 0x04
    1536:	8f 85       	ldd	r24, Y+15	; 0x0f
    1538:	98 89       	ldd	r25, Y+16	; 0x10
    153a:	a9 89       	ldd	r26, Y+17	; 0x11
    153c:	ba 89       	ldd	r27, Y+18	; 0x12
    153e:	2a e0       	ldi	r18, 0x0A	; 10
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	40 e0       	ldi	r20, 0x00	; 0
    1544:	50 e0       	ldi	r21, 0x00	; 0
    1546:	bc 01       	movw	r22, r24
    1548:	cd 01       	movw	r24, r26
    154a:	0e 94 19 23 	call	0x4632	; 0x4632 <__udivmodsi4>
    154e:	dc 01       	movw	r26, r24
    1550:	cb 01       	movw	r24, r22
    1552:	ac 01       	movw	r20, r24
    1554:	98 01       	movw	r18, r16
    1556:	22 0f       	add	r18, r18
    1558:	33 1f       	adc	r19, r19
    155a:	ce 01       	movw	r24, r28
    155c:	01 96       	adiw	r24, 0x01	; 1
    155e:	82 0f       	add	r24, r18
    1560:	93 1f       	adc	r25, r19
    1562:	fc 01       	movw	r30, r24
    1564:	34 96       	adiw	r30, 0x04	; 4
    1566:	51 83       	std	Z+1, r21	; 0x01
    1568:	40 83       	st	Z, r20
		Copy_u32Number=Copy_u32Number/10;
    156a:	8f 85       	ldd	r24, Y+15	; 0x0f
    156c:	98 89       	ldd	r25, Y+16	; 0x10
    156e:	a9 89       	ldd	r26, Y+17	; 0x11
    1570:	ba 89       	ldd	r27, Y+18	; 0x12
    1572:	2a e0       	ldi	r18, 0x0A	; 10
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	40 e0       	ldi	r20, 0x00	; 0
    1578:	50 e0       	ldi	r21, 0x00	; 0
    157a:	bc 01       	movw	r22, r24
    157c:	cd 01       	movw	r24, r26
    157e:	0e 94 19 23 	call	0x4632	; 0x4632 <__udivmodsi4>
    1582:	da 01       	movw	r26, r20
    1584:	c9 01       	movw	r24, r18
    1586:	8f 87       	std	Y+15, r24	; 0x0f
    1588:	98 8b       	std	Y+16, r25	; 0x10
    158a:	a9 8b       	std	Y+17, r26	; 0x11
    158c:	ba 8b       	std	Y+18, r27	; 0x12
		i--;
    158e:	8b 81       	ldd	r24, Y+3	; 0x03
    1590:	9c 81       	ldd	r25, Y+4	; 0x04
    1592:	01 97       	sbiw	r24, 0x01	; 1
    1594:	9c 83       	std	Y+4, r25	; 0x04
    1596:	8b 83       	std	Y+3, r24	; 0x03
		CLCD_voidSendData('-');
		Copy_u32Number = Copy_u32Number*(-1);

	}

	while(Copy_u32Number)
    1598:	8f 85       	ldd	r24, Y+15	; 0x0f
    159a:	98 89       	ldd	r25, Y+16	; 0x10
    159c:	a9 89       	ldd	r26, Y+17	; 0x11
    159e:	ba 89       	ldd	r27, Y+18	; 0x12
    15a0:	00 97       	sbiw	r24, 0x00	; 0
    15a2:	a1 05       	cpc	r26, r1
    15a4:	b1 05       	cpc	r27, r1
    15a6:	29 f6       	brne	.-118    	; 0x1532 <CLCD_voidWriteNumber+0x46>
		str[i]=Copy_u32Number%10;
		Copy_u32Number=Copy_u32Number/10;
		i--;
	}

	if(Copy_u32FieldLength==-1)
    15a8:	8b 89       	ldd	r24, Y+19	; 0x13
    15aa:	9c 89       	ldd	r25, Y+20	; 0x14
    15ac:	ad 89       	ldd	r26, Y+21	; 0x15
    15ae:	be 89       	ldd	r27, Y+22	; 0x16
    15b0:	8f 3f       	cpi	r24, 0xFF	; 255
    15b2:	4f ef       	ldi	r20, 0xFF	; 255
    15b4:	94 07       	cpc	r25, r20
    15b6:	4f ef       	ldi	r20, 0xFF	; 255
    15b8:	a4 07       	cpc	r26, r20
    15ba:	4f ef       	ldi	r20, 0xFF	; 255
    15bc:	b4 07       	cpc	r27, r20
    15be:	b1 f4       	brne	.+44     	; 0x15ec <CLCD_voidWriteNumber+0x100>
    15c0:	05 c0       	rjmp	.+10     	; 0x15cc <CLCD_voidWriteNumber+0xe0>
	{
		while(str[j]==0)
		{
			j++;
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	9a 81       	ldd	r25, Y+2	; 0x02
    15c6:	01 96       	adiw	r24, 0x01	; 1
    15c8:	9a 83       	std	Y+2, r25	; 0x02
    15ca:	89 83       	std	Y+1, r24	; 0x01
		i--;
	}

	if(Copy_u32FieldLength==-1)
	{
		while(str[j]==0)
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	9a 81       	ldd	r25, Y+2	; 0x02
    15d0:	9c 01       	movw	r18, r24
    15d2:	22 0f       	add	r18, r18
    15d4:	33 1f       	adc	r19, r19
    15d6:	ce 01       	movw	r24, r28
    15d8:	01 96       	adiw	r24, 0x01	; 1
    15da:	82 0f       	add	r24, r18
    15dc:	93 1f       	adc	r25, r19
    15de:	fc 01       	movw	r30, r24
    15e0:	34 96       	adiw	r30, 0x04	; 4
    15e2:	80 81       	ld	r24, Z
    15e4:	91 81       	ldd	r25, Z+1	; 0x01
    15e6:	00 97       	sbiw	r24, 0x00	; 0
    15e8:	61 f3       	breq	.-40     	; 0x15c2 <CLCD_voidWriteNumber+0xd6>
    15ea:	0a c0       	rjmp	.+20     	; 0x1600 <CLCD_voidWriteNumber+0x114>
			j++;
		}
	}
	else
	{
		j=5-Copy_u32FieldLength;
    15ec:	8b 89       	ldd	r24, Y+19	; 0x13
    15ee:	9c 89       	ldd	r25, Y+20	; 0x14
    15f0:	25 e0       	ldi	r18, 0x05	; 5
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	d9 01       	movw	r26, r18
    15f6:	a8 1b       	sub	r26, r24
    15f8:	b9 0b       	sbc	r27, r25
    15fa:	cd 01       	movw	r24, r26
    15fc:	9a 83       	std	Y+2, r25	; 0x02
    15fe:	89 83       	std	Y+1, r24	; 0x01
	}

	for(i=j;i<5;i++)
    1600:	89 81       	ldd	r24, Y+1	; 0x01
    1602:	9a 81       	ldd	r25, Y+2	; 0x02
    1604:	9c 83       	std	Y+4, r25	; 0x04
    1606:	8b 83       	std	Y+3, r24	; 0x03
    1608:	15 c0       	rjmp	.+42     	; 0x1634 <CLCD_voidWriteNumber+0x148>
	{
		CLCD_voidSendData('0'+str[i]);
    160a:	8b 81       	ldd	r24, Y+3	; 0x03
    160c:	9c 81       	ldd	r25, Y+4	; 0x04
    160e:	9c 01       	movw	r18, r24
    1610:	22 0f       	add	r18, r18
    1612:	33 1f       	adc	r19, r19
    1614:	ce 01       	movw	r24, r28
    1616:	01 96       	adiw	r24, 0x01	; 1
    1618:	82 0f       	add	r24, r18
    161a:	93 1f       	adc	r25, r19
    161c:	fc 01       	movw	r30, r24
    161e:	34 96       	adiw	r30, 0x04	; 4
    1620:	80 81       	ld	r24, Z
    1622:	91 81       	ldd	r25, Z+1	; 0x01
    1624:	80 5d       	subi	r24, 0xD0	; 208
    1626:	0e 94 c2 08 	call	0x1184	; 0x1184 <CLCD_voidSendData>
	else
	{
		j=5-Copy_u32FieldLength;
	}

	for(i=j;i<5;i++)
    162a:	8b 81       	ldd	r24, Y+3	; 0x03
    162c:	9c 81       	ldd	r25, Y+4	; 0x04
    162e:	01 96       	adiw	r24, 0x01	; 1
    1630:	9c 83       	std	Y+4, r25	; 0x04
    1632:	8b 83       	std	Y+3, r24	; 0x03
    1634:	8b 81       	ldd	r24, Y+3	; 0x03
    1636:	9c 81       	ldd	r25, Y+4	; 0x04
    1638:	85 30       	cpi	r24, 0x05	; 5
    163a:	91 05       	cpc	r25, r1
    163c:	30 f3       	brcs	.-52     	; 0x160a <CLCD_voidWriteNumber+0x11e>
	{
		CLCD_voidSendData('0'+str[i]);
	}

}
    163e:	66 96       	adiw	r28, 0x16	; 22
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	f8 94       	cli
    1644:	de bf       	out	0x3e, r29	; 62
    1646:	0f be       	out	0x3f, r0	; 63
    1648:	cd bf       	out	0x3d, r28	; 61
    164a:	cf 91       	pop	r28
    164c:	df 91       	pop	r29
    164e:	1f 91       	pop	r17
    1650:	0f 91       	pop	r16
    1652:	08 95       	ret

00001654 <DIO_u8SetPinValue>:
#include "DIO_config.h"



u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    1654:	df 93       	push	r29
    1656:	cf 93       	push	r28
    1658:	cd b7       	in	r28, 0x3d	; 61
    165a:	de b7       	in	r29, 0x3e	; 62
    165c:	28 97       	sbiw	r28, 0x08	; 8
    165e:	0f b6       	in	r0, 0x3f	; 63
    1660:	f8 94       	cli
    1662:	de bf       	out	0x3e, r29	; 62
    1664:	0f be       	out	0x3f, r0	; 63
    1666:	cd bf       	out	0x3d, r28	; 61
    1668:	8a 83       	std	Y+2, r24	; 0x02
    166a:	6b 83       	std	Y+3, r22	; 0x03
    166c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    166e:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8Pin<=DIO_u8PIN7)
    1670:	8b 81       	ldd	r24, Y+3	; 0x03
    1672:	88 30       	cpi	r24, 0x08	; 8
    1674:	08 f0       	brcs	.+2      	; 0x1678 <DIO_u8SetPinValue+0x24>
    1676:	f4 c0       	rjmp	.+488    	; 0x1860 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
    1678:	8c 81       	ldd	r24, Y+4	; 0x04
    167a:	88 23       	and	r24, r24
    167c:	09 f0       	breq	.+2      	; 0x1680 <DIO_u8SetPinValue+0x2c>
    167e:	77 c0       	rjmp	.+238    	; 0x176e <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
    1680:	8a 81       	ldd	r24, Y+2	; 0x02
    1682:	28 2f       	mov	r18, r24
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	38 87       	std	Y+8, r19	; 0x08
    1688:	2f 83       	std	Y+7, r18	; 0x07
    168a:	8f 81       	ldd	r24, Y+7	; 0x07
    168c:	98 85       	ldd	r25, Y+8	; 0x08
    168e:	81 30       	cpi	r24, 0x01	; 1
    1690:	91 05       	cpc	r25, r1
    1692:	59 f1       	breq	.+86     	; 0x16ea <DIO_u8SetPinValue+0x96>
    1694:	2f 81       	ldd	r18, Y+7	; 0x07
    1696:	38 85       	ldd	r19, Y+8	; 0x08
    1698:	22 30       	cpi	r18, 0x02	; 2
    169a:	31 05       	cpc	r19, r1
    169c:	2c f4       	brge	.+10     	; 0x16a8 <DIO_u8SetPinValue+0x54>
    169e:	8f 81       	ldd	r24, Y+7	; 0x07
    16a0:	98 85       	ldd	r25, Y+8	; 0x08
    16a2:	00 97       	sbiw	r24, 0x00	; 0
    16a4:	69 f0       	breq	.+26     	; 0x16c0 <DIO_u8SetPinValue+0x6c>
    16a6:	60 c0       	rjmp	.+192    	; 0x1768 <DIO_u8SetPinValue+0x114>
    16a8:	2f 81       	ldd	r18, Y+7	; 0x07
    16aa:	38 85       	ldd	r19, Y+8	; 0x08
    16ac:	22 30       	cpi	r18, 0x02	; 2
    16ae:	31 05       	cpc	r19, r1
    16b0:	89 f1       	breq	.+98     	; 0x1714 <DIO_u8SetPinValue+0xc0>
    16b2:	8f 81       	ldd	r24, Y+7	; 0x07
    16b4:	98 85       	ldd	r25, Y+8	; 0x08
    16b6:	83 30       	cpi	r24, 0x03	; 3
    16b8:	91 05       	cpc	r25, r1
    16ba:	09 f4       	brne	.+2      	; 0x16be <DIO_u8SetPinValue+0x6a>
    16bc:	40 c0       	rjmp	.+128    	; 0x173e <DIO_u8SetPinValue+0xea>
    16be:	54 c0       	rjmp	.+168    	; 0x1768 <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA : CLR_BIT(PORTA,Copy_u8Pin); break;
    16c0:	ab e3       	ldi	r26, 0x3B	; 59
    16c2:	b0 e0       	ldi	r27, 0x00	; 0
    16c4:	eb e3       	ldi	r30, 0x3B	; 59
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	48 2f       	mov	r20, r24
    16cc:	8b 81       	ldd	r24, Y+3	; 0x03
    16ce:	28 2f       	mov	r18, r24
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	02 2e       	mov	r0, r18
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <DIO_u8SetPinValue+0x8a>
    16da:	88 0f       	add	r24, r24
    16dc:	99 1f       	adc	r25, r25
    16de:	0a 94       	dec	r0
    16e0:	e2 f7       	brpl	.-8      	; 0x16da <DIO_u8SetPinValue+0x86>
    16e2:	80 95       	com	r24
    16e4:	84 23       	and	r24, r20
    16e6:	8c 93       	st	X, r24
    16e8:	bd c0       	rjmp	.+378    	; 0x1864 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : CLR_BIT(PORTB,Copy_u8Pin); break;
    16ea:	a8 e3       	ldi	r26, 0x38	; 56
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	e8 e3       	ldi	r30, 0x38	; 56
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	48 2f       	mov	r20, r24
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	28 2f       	mov	r18, r24
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	02 2e       	mov	r0, r18
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <DIO_u8SetPinValue+0xb4>
    1704:	88 0f       	add	r24, r24
    1706:	99 1f       	adc	r25, r25
    1708:	0a 94       	dec	r0
    170a:	e2 f7       	brpl	.-8      	; 0x1704 <DIO_u8SetPinValue+0xb0>
    170c:	80 95       	com	r24
    170e:	84 23       	and	r24, r20
    1710:	8c 93       	st	X, r24
    1712:	a8 c0       	rjmp	.+336    	; 0x1864 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : CLR_BIT(PORTC,Copy_u8Pin); break;
    1714:	a5 e3       	ldi	r26, 0x35	; 53
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	e5 e3       	ldi	r30, 0x35	; 53
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	48 2f       	mov	r20, r24
    1720:	8b 81       	ldd	r24, Y+3	; 0x03
    1722:	28 2f       	mov	r18, r24
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	02 2e       	mov	r0, r18
    172c:	02 c0       	rjmp	.+4      	; 0x1732 <DIO_u8SetPinValue+0xde>
    172e:	88 0f       	add	r24, r24
    1730:	99 1f       	adc	r25, r25
    1732:	0a 94       	dec	r0
    1734:	e2 f7       	brpl	.-8      	; 0x172e <DIO_u8SetPinValue+0xda>
    1736:	80 95       	com	r24
    1738:	84 23       	and	r24, r20
    173a:	8c 93       	st	X, r24
    173c:	93 c0       	rjmp	.+294    	; 0x1864 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : CLR_BIT(PORTD,Copy_u8Pin); break;
    173e:	a2 e3       	ldi	r26, 0x32	; 50
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	e2 e3       	ldi	r30, 0x32	; 50
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	48 2f       	mov	r20, r24
    174a:	8b 81       	ldd	r24, Y+3	; 0x03
    174c:	28 2f       	mov	r18, r24
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	02 2e       	mov	r0, r18
    1756:	02 c0       	rjmp	.+4      	; 0x175c <DIO_u8SetPinValue+0x108>
    1758:	88 0f       	add	r24, r24
    175a:	99 1f       	adc	r25, r25
    175c:	0a 94       	dec	r0
    175e:	e2 f7       	brpl	.-8      	; 0x1758 <DIO_u8SetPinValue+0x104>
    1760:	80 95       	com	r24
    1762:	84 23       	and	r24, r20
    1764:	8c 93       	st	X, r24
    1766:	7e c0       	rjmp	.+252    	; 0x1864 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1;break;
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	89 83       	std	Y+1, r24	; 0x01
    176c:	7b c0       	rjmp	.+246    	; 0x1864 <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value==DIO_u8PIN_HIGH)
    176e:	8c 81       	ldd	r24, Y+4	; 0x04
    1770:	81 30       	cpi	r24, 0x01	; 1
    1772:	09 f0       	breq	.+2      	; 0x1776 <DIO_u8SetPinValue+0x122>
    1774:	72 c0       	rjmp	.+228    	; 0x185a <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    1776:	8a 81       	ldd	r24, Y+2	; 0x02
    1778:	28 2f       	mov	r18, r24
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	3e 83       	std	Y+6, r19	; 0x06
    177e:	2d 83       	std	Y+5, r18	; 0x05
    1780:	8d 81       	ldd	r24, Y+5	; 0x05
    1782:	9e 81       	ldd	r25, Y+6	; 0x06
    1784:	81 30       	cpi	r24, 0x01	; 1
    1786:	91 05       	cpc	r25, r1
    1788:	49 f1       	breq	.+82     	; 0x17dc <DIO_u8SetPinValue+0x188>
    178a:	2d 81       	ldd	r18, Y+5	; 0x05
    178c:	3e 81       	ldd	r19, Y+6	; 0x06
    178e:	22 30       	cpi	r18, 0x02	; 2
    1790:	31 05       	cpc	r19, r1
    1792:	2c f4       	brge	.+10     	; 0x179e <DIO_u8SetPinValue+0x14a>
    1794:	8d 81       	ldd	r24, Y+5	; 0x05
    1796:	9e 81       	ldd	r25, Y+6	; 0x06
    1798:	00 97       	sbiw	r24, 0x00	; 0
    179a:	61 f0       	breq	.+24     	; 0x17b4 <DIO_u8SetPinValue+0x160>
    179c:	5b c0       	rjmp	.+182    	; 0x1854 <DIO_u8SetPinValue+0x200>
    179e:	2d 81       	ldd	r18, Y+5	; 0x05
    17a0:	3e 81       	ldd	r19, Y+6	; 0x06
    17a2:	22 30       	cpi	r18, 0x02	; 2
    17a4:	31 05       	cpc	r19, r1
    17a6:	71 f1       	breq	.+92     	; 0x1804 <DIO_u8SetPinValue+0x1b0>
    17a8:	8d 81       	ldd	r24, Y+5	; 0x05
    17aa:	9e 81       	ldd	r25, Y+6	; 0x06
    17ac:	83 30       	cpi	r24, 0x03	; 3
    17ae:	91 05       	cpc	r25, r1
    17b0:	e9 f1       	breq	.+122    	; 0x182c <DIO_u8SetPinValue+0x1d8>
    17b2:	50 c0       	rjmp	.+160    	; 0x1854 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA : SET_BIT(PORTA,Copy_u8Pin); break;
    17b4:	ab e3       	ldi	r26, 0x3B	; 59
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	eb e3       	ldi	r30, 0x3B	; 59
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	48 2f       	mov	r20, r24
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	28 2f       	mov	r18, r24
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	02 2e       	mov	r0, r18
    17cc:	02 c0       	rjmp	.+4      	; 0x17d2 <DIO_u8SetPinValue+0x17e>
    17ce:	88 0f       	add	r24, r24
    17d0:	99 1f       	adc	r25, r25
    17d2:	0a 94       	dec	r0
    17d4:	e2 f7       	brpl	.-8      	; 0x17ce <DIO_u8SetPinValue+0x17a>
    17d6:	84 2b       	or	r24, r20
    17d8:	8c 93       	st	X, r24
    17da:	44 c0       	rjmp	.+136    	; 0x1864 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : SET_BIT(PORTB,Copy_u8Pin); break;
    17dc:	a8 e3       	ldi	r26, 0x38	; 56
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	e8 e3       	ldi	r30, 0x38	; 56
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	48 2f       	mov	r20, r24
    17e8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ea:	28 2f       	mov	r18, r24
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	02 2e       	mov	r0, r18
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <DIO_u8SetPinValue+0x1a6>
    17f6:	88 0f       	add	r24, r24
    17f8:	99 1f       	adc	r25, r25
    17fa:	0a 94       	dec	r0
    17fc:	e2 f7       	brpl	.-8      	; 0x17f6 <DIO_u8SetPinValue+0x1a2>
    17fe:	84 2b       	or	r24, r20
    1800:	8c 93       	st	X, r24
    1802:	30 c0       	rjmp	.+96     	; 0x1864 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : SET_BIT(PORTC,Copy_u8Pin); break;
    1804:	a5 e3       	ldi	r26, 0x35	; 53
    1806:	b0 e0       	ldi	r27, 0x00	; 0
    1808:	e5 e3       	ldi	r30, 0x35	; 53
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	48 2f       	mov	r20, r24
    1810:	8b 81       	ldd	r24, Y+3	; 0x03
    1812:	28 2f       	mov	r18, r24
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	02 2e       	mov	r0, r18
    181c:	02 c0       	rjmp	.+4      	; 0x1822 <DIO_u8SetPinValue+0x1ce>
    181e:	88 0f       	add	r24, r24
    1820:	99 1f       	adc	r25, r25
    1822:	0a 94       	dec	r0
    1824:	e2 f7       	brpl	.-8      	; 0x181e <DIO_u8SetPinValue+0x1ca>
    1826:	84 2b       	or	r24, r20
    1828:	8c 93       	st	X, r24
    182a:	1c c0       	rjmp	.+56     	; 0x1864 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : SET_BIT(PORTD,Copy_u8Pin); break;
    182c:	a2 e3       	ldi	r26, 0x32	; 50
    182e:	b0 e0       	ldi	r27, 0x00	; 0
    1830:	e2 e3       	ldi	r30, 0x32	; 50
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	80 81       	ld	r24, Z
    1836:	48 2f       	mov	r20, r24
    1838:	8b 81       	ldd	r24, Y+3	; 0x03
    183a:	28 2f       	mov	r18, r24
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	02 2e       	mov	r0, r18
    1844:	02 c0       	rjmp	.+4      	; 0x184a <DIO_u8SetPinValue+0x1f6>
    1846:	88 0f       	add	r24, r24
    1848:	99 1f       	adc	r25, r25
    184a:	0a 94       	dec	r0
    184c:	e2 f7       	brpl	.-8      	; 0x1846 <DIO_u8SetPinValue+0x1f2>
    184e:	84 2b       	or	r24, r20
    1850:	8c 93       	st	X, r24
    1852:	08 c0       	rjmp	.+16     	; 0x1864 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1;break;
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	89 83       	std	Y+1, r24	; 0x01
    1858:	05 c0       	rjmp	.+10     	; 0x1864 <DIO_u8SetPinValue+0x210>
			}

		}
		else
		{
			Local_u8ErrorState=1;
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	89 83       	std	Y+1, r24	; 0x01
    185e:	02 c0       	rjmp	.+4      	; 0x1864 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1864:	89 81       	ldd	r24, Y+1	; 0x01

}
    1866:	28 96       	adiw	r28, 0x08	; 8
    1868:	0f b6       	in	r0, 0x3f	; 63
    186a:	f8 94       	cli
    186c:	de bf       	out	0x3e, r29	; 62
    186e:	0f be       	out	0x3f, r0	; 63
    1870:	cd bf       	out	0x3d, r28	; 61
    1872:	cf 91       	pop	r28
    1874:	df 91       	pop	r29
    1876:	08 95       	ret

00001878 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    1878:	df 93       	push	r29
    187a:	cf 93       	push	r28
    187c:	00 d0       	rcall	.+0      	; 0x187e <DIO_u8SetPortValue+0x6>
    187e:	00 d0       	rcall	.+0      	; 0x1880 <DIO_u8SetPortValue+0x8>
    1880:	0f 92       	push	r0
    1882:	cd b7       	in	r28, 0x3d	; 61
    1884:	de b7       	in	r29, 0x3e	; 62
    1886:	8a 83       	std	Y+2, r24	; 0x02
    1888:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    188a:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    188c:	8a 81       	ldd	r24, Y+2	; 0x02
    188e:	28 2f       	mov	r18, r24
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	3d 83       	std	Y+5, r19	; 0x05
    1894:	2c 83       	std	Y+4, r18	; 0x04
    1896:	8c 81       	ldd	r24, Y+4	; 0x04
    1898:	9d 81       	ldd	r25, Y+5	; 0x05
    189a:	81 30       	cpi	r24, 0x01	; 1
    189c:	91 05       	cpc	r25, r1
    189e:	d1 f0       	breq	.+52     	; 0x18d4 <DIO_u8SetPortValue+0x5c>
    18a0:	2c 81       	ldd	r18, Y+4	; 0x04
    18a2:	3d 81       	ldd	r19, Y+5	; 0x05
    18a4:	22 30       	cpi	r18, 0x02	; 2
    18a6:	31 05       	cpc	r19, r1
    18a8:	2c f4       	brge	.+10     	; 0x18b4 <DIO_u8SetPortValue+0x3c>
    18aa:	8c 81       	ldd	r24, Y+4	; 0x04
    18ac:	9d 81       	ldd	r25, Y+5	; 0x05
    18ae:	00 97       	sbiw	r24, 0x00	; 0
    18b0:	61 f0       	breq	.+24     	; 0x18ca <DIO_u8SetPortValue+0x52>
    18b2:	1f c0       	rjmp	.+62     	; 0x18f2 <DIO_u8SetPortValue+0x7a>
    18b4:	2c 81       	ldd	r18, Y+4	; 0x04
    18b6:	3d 81       	ldd	r19, Y+5	; 0x05
    18b8:	22 30       	cpi	r18, 0x02	; 2
    18ba:	31 05       	cpc	r19, r1
    18bc:	81 f0       	breq	.+32     	; 0x18de <DIO_u8SetPortValue+0x66>
    18be:	8c 81       	ldd	r24, Y+4	; 0x04
    18c0:	9d 81       	ldd	r25, Y+5	; 0x05
    18c2:	83 30       	cpi	r24, 0x03	; 3
    18c4:	91 05       	cpc	r25, r1
    18c6:	81 f0       	breq	.+32     	; 0x18e8 <DIO_u8SetPortValue+0x70>
    18c8:	14 c0       	rjmp	.+40     	; 0x18f2 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA : PORTA = Copy_u8Value; break;
    18ca:	eb e3       	ldi	r30, 0x3B	; 59
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	8b 81       	ldd	r24, Y+3	; 0x03
    18d0:	80 83       	st	Z, r24
    18d2:	11 c0       	rjmp	.+34     	; 0x18f6 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB : PORTB = Copy_u8Value; break;
    18d4:	e8 e3       	ldi	r30, 0x38	; 56
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	8b 81       	ldd	r24, Y+3	; 0x03
    18da:	80 83       	st	Z, r24
    18dc:	0c c0       	rjmp	.+24     	; 0x18f6 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC : PORTC = Copy_u8Value; break;
    18de:	e5 e3       	ldi	r30, 0x35	; 53
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	8b 81       	ldd	r24, Y+3	; 0x03
    18e4:	80 83       	st	Z, r24
    18e6:	07 c0       	rjmp	.+14     	; 0x18f6 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD : PORTD = Copy_u8Value; break;
    18e8:	e2 e3       	ldi	r30, 0x32	; 50
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	8b 81       	ldd	r24, Y+3	; 0x03
    18ee:	80 83       	st	Z, r24
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=1; break;
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    18f6:	89 81       	ldd	r24, Y+1	; 0x01

}
    18f8:	0f 90       	pop	r0
    18fa:	0f 90       	pop	r0
    18fc:	0f 90       	pop	r0
    18fe:	0f 90       	pop	r0
    1900:	0f 90       	pop	r0
    1902:	cf 91       	pop	r28
    1904:	df 91       	pop	r29
    1906:	08 95       	ret

00001908 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_pu8Value)
{
    1908:	df 93       	push	r29
    190a:	cf 93       	push	r28
    190c:	cd b7       	in	r28, 0x3d	; 61
    190e:	de b7       	in	r29, 0x3e	; 62
    1910:	27 97       	sbiw	r28, 0x07	; 7
    1912:	0f b6       	in	r0, 0x3f	; 63
    1914:	f8 94       	cli
    1916:	de bf       	out	0x3e, r29	; 62
    1918:	0f be       	out	0x3f, r0	; 63
    191a:	cd bf       	out	0x3d, r28	; 61
    191c:	8a 83       	std	Y+2, r24	; 0x02
    191e:	6b 83       	std	Y+3, r22	; 0x03
    1920:	5d 83       	std	Y+5, r21	; 0x05
    1922:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1924:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_pu8Value!=NULL) && (Copy_u8Pin<= DIO_u8PIN7))
    1926:	8c 81       	ldd	r24, Y+4	; 0x04
    1928:	9d 81       	ldd	r25, Y+5	; 0x05
    192a:	00 97       	sbiw	r24, 0x00	; 0
    192c:	09 f4       	brne	.+2      	; 0x1930 <DIO_u8GetPinValue+0x28>
    192e:	78 c0       	rjmp	.+240    	; 0x1a20 <DIO_u8GetPinValue+0x118>
    1930:	8b 81       	ldd	r24, Y+3	; 0x03
    1932:	88 30       	cpi	r24, 0x08	; 8
    1934:	08 f0       	brcs	.+2      	; 0x1938 <DIO_u8GetPinValue+0x30>
    1936:	74 c0       	rjmp	.+232    	; 0x1a20 <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8Port)
    1938:	8a 81       	ldd	r24, Y+2	; 0x02
    193a:	28 2f       	mov	r18, r24
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	3f 83       	std	Y+7, r19	; 0x07
    1940:	2e 83       	std	Y+6, r18	; 0x06
    1942:	4e 81       	ldd	r20, Y+6	; 0x06
    1944:	5f 81       	ldd	r21, Y+7	; 0x07
    1946:	41 30       	cpi	r20, 0x01	; 1
    1948:	51 05       	cpc	r21, r1
    194a:	59 f1       	breq	.+86     	; 0x19a2 <DIO_u8GetPinValue+0x9a>
    194c:	8e 81       	ldd	r24, Y+6	; 0x06
    194e:	9f 81       	ldd	r25, Y+7	; 0x07
    1950:	82 30       	cpi	r24, 0x02	; 2
    1952:	91 05       	cpc	r25, r1
    1954:	34 f4       	brge	.+12     	; 0x1962 <DIO_u8GetPinValue+0x5a>
    1956:	2e 81       	ldd	r18, Y+6	; 0x06
    1958:	3f 81       	ldd	r19, Y+7	; 0x07
    195a:	21 15       	cp	r18, r1
    195c:	31 05       	cpc	r19, r1
    195e:	69 f0       	breq	.+26     	; 0x197a <DIO_u8GetPinValue+0x72>
    1960:	5c c0       	rjmp	.+184    	; 0x1a1a <DIO_u8GetPinValue+0x112>
    1962:	4e 81       	ldd	r20, Y+6	; 0x06
    1964:	5f 81       	ldd	r21, Y+7	; 0x07
    1966:	42 30       	cpi	r20, 0x02	; 2
    1968:	51 05       	cpc	r21, r1
    196a:	79 f1       	breq	.+94     	; 0x19ca <DIO_u8GetPinValue+0xc2>
    196c:	8e 81       	ldd	r24, Y+6	; 0x06
    196e:	9f 81       	ldd	r25, Y+7	; 0x07
    1970:	83 30       	cpi	r24, 0x03	; 3
    1972:	91 05       	cpc	r25, r1
    1974:	09 f4       	brne	.+2      	; 0x1978 <DIO_u8GetPinValue+0x70>
    1976:	3d c0       	rjmp	.+122    	; 0x19f2 <DIO_u8GetPinValue+0xea>
    1978:	50 c0       	rjmp	.+160    	; 0x1a1a <DIO_u8GetPinValue+0x112>
		{
		case DIO_u8PORTA : *Copy_pu8Value= GET_BIT(PINA , Copy_u8Pin); break;
    197a:	e9 e3       	ldi	r30, 0x39	; 57
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	28 2f       	mov	r18, r24
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	8b 81       	ldd	r24, Y+3	; 0x03
    1986:	88 2f       	mov	r24, r24
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	a9 01       	movw	r20, r18
    198c:	02 c0       	rjmp	.+4      	; 0x1992 <DIO_u8GetPinValue+0x8a>
    198e:	55 95       	asr	r21
    1990:	47 95       	ror	r20
    1992:	8a 95       	dec	r24
    1994:	e2 f7       	brpl	.-8      	; 0x198e <DIO_u8GetPinValue+0x86>
    1996:	ca 01       	movw	r24, r20
    1998:	81 70       	andi	r24, 0x01	; 1
    199a:	ec 81       	ldd	r30, Y+4	; 0x04
    199c:	fd 81       	ldd	r31, Y+5	; 0x05
    199e:	80 83       	st	Z, r24
    19a0:	41 c0       	rjmp	.+130    	; 0x1a24 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTB : *Copy_pu8Value= GET_BIT(PINB , Copy_u8Pin); break;
    19a2:	e6 e3       	ldi	r30, 0x36	; 54
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	28 2f       	mov	r18, r24
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	8b 81       	ldd	r24, Y+3	; 0x03
    19ae:	88 2f       	mov	r24, r24
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	a9 01       	movw	r20, r18
    19b4:	02 c0       	rjmp	.+4      	; 0x19ba <DIO_u8GetPinValue+0xb2>
    19b6:	55 95       	asr	r21
    19b8:	47 95       	ror	r20
    19ba:	8a 95       	dec	r24
    19bc:	e2 f7       	brpl	.-8      	; 0x19b6 <DIO_u8GetPinValue+0xae>
    19be:	ca 01       	movw	r24, r20
    19c0:	81 70       	andi	r24, 0x01	; 1
    19c2:	ec 81       	ldd	r30, Y+4	; 0x04
    19c4:	fd 81       	ldd	r31, Y+5	; 0x05
    19c6:	80 83       	st	Z, r24
    19c8:	2d c0       	rjmp	.+90     	; 0x1a24 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTC : *Copy_pu8Value= GET_BIT(PINC , Copy_u8Pin); break;
    19ca:	e3 e3       	ldi	r30, 0x33	; 51
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	28 2f       	mov	r18, r24
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	8b 81       	ldd	r24, Y+3	; 0x03
    19d6:	88 2f       	mov	r24, r24
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	a9 01       	movw	r20, r18
    19dc:	02 c0       	rjmp	.+4      	; 0x19e2 <DIO_u8GetPinValue+0xda>
    19de:	55 95       	asr	r21
    19e0:	47 95       	ror	r20
    19e2:	8a 95       	dec	r24
    19e4:	e2 f7       	brpl	.-8      	; 0x19de <DIO_u8GetPinValue+0xd6>
    19e6:	ca 01       	movw	r24, r20
    19e8:	81 70       	andi	r24, 0x01	; 1
    19ea:	ec 81       	ldd	r30, Y+4	; 0x04
    19ec:	fd 81       	ldd	r31, Y+5	; 0x05
    19ee:	80 83       	st	Z, r24
    19f0:	19 c0       	rjmp	.+50     	; 0x1a24 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTD : *Copy_pu8Value= GET_BIT(PIND , Copy_u8Pin); break;
    19f2:	e0 e3       	ldi	r30, 0x30	; 48
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	28 2f       	mov	r18, r24
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	8b 81       	ldd	r24, Y+3	; 0x03
    19fe:	88 2f       	mov	r24, r24
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	a9 01       	movw	r20, r18
    1a04:	02 c0       	rjmp	.+4      	; 0x1a0a <DIO_u8GetPinValue+0x102>
    1a06:	55 95       	asr	r21
    1a08:	47 95       	ror	r20
    1a0a:	8a 95       	dec	r24
    1a0c:	e2 f7       	brpl	.-8      	; 0x1a06 <DIO_u8GetPinValue+0xfe>
    1a0e:	ca 01       	movw	r24, r20
    1a10:	81 70       	andi	r24, 0x01	; 1
    1a12:	ec 81       	ldd	r30, Y+4	; 0x04
    1a14:	fd 81       	ldd	r31, Y+5	; 0x05
    1a16:	80 83       	st	Z, r24
    1a18:	05 c0       	rjmp	.+10     	; 0x1a24 <DIO_u8GetPinValue+0x11c>
		default: Local_u8ErrorState=1; break;
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	89 83       	std	Y+1, r24	; 0x01
    1a1e:	02 c0       	rjmp	.+4      	; 0x1a24 <DIO_u8GetPinValue+0x11c>
		}

	}
	else
	{
		Local_u8ErrorState=1;
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    1a24:	89 81       	ldd	r24, Y+1	; 0x01

}
    1a26:	27 96       	adiw	r28, 0x07	; 7
    1a28:	0f b6       	in	r0, 0x3f	; 63
    1a2a:	f8 94       	cli
    1a2c:	de bf       	out	0x3e, r29	; 62
    1a2e:	0f be       	out	0x3f, r0	; 63
    1a30:	cd bf       	out	0x3d, r28	; 61
    1a32:	cf 91       	pop	r28
    1a34:	df 91       	pop	r29
    1a36:	08 95       	ret

00001a38 <GIE_voidEnable>:

#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_voidEnable(void)
{
    1a38:	df 93       	push	r29
    1a3a:	cf 93       	push	r28
    1a3c:	cd b7       	in	r28, 0x3d	; 61
    1a3e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    1a40:	af e5       	ldi	r26, 0x5F	; 95
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	ef e5       	ldi	r30, 0x5F	; 95
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	80 68       	ori	r24, 0x80	; 128
    1a4c:	8c 93       	st	X, r24
}
    1a4e:	cf 91       	pop	r28
    1a50:	df 91       	pop	r29
    1a52:	08 95       	ret

00001a54 <GIE_voidDisable>:

void GIE_voidDisable(void)
{
    1a54:	df 93       	push	r29
    1a56:	cf 93       	push	r28
    1a58:	cd b7       	in	r28, 0x3d	; 61
    1a5a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    1a5c:	af e5       	ldi	r26, 0x5F	; 95
    1a5e:	b0 e0       	ldi	r27, 0x00	; 0
    1a60:	ef e5       	ldi	r30, 0x5F	; 95
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	80 81       	ld	r24, Z
    1a66:	8f 77       	andi	r24, 0x7F	; 127
    1a68:	8c 93       	st	X, r24
    1a6a:	cf 91       	pop	r28
    1a6c:	df 91       	pop	r29
    1a6e:	08 95       	ret

00001a70 <KPD_u8GetPressedKey>:
#include "KPD_config.h"
#include "KPD_interface.h"
#include "KPD_private.h"

u8 KPD_u8GetPressedKey(void)
{
    1a70:	df 93       	push	r29
    1a72:	cf 93       	push	r28
    1a74:	00 d0       	rcall	.+0      	; 0x1a76 <KPD_u8GetPressedKey+0x6>
    1a76:	00 d0       	rcall	.+0      	; 0x1a78 <KPD_u8GetPressedKey+0x8>
    1a78:	0f 92       	push	r0
    1a7a:	cd b7       	in	r28, 0x3d	; 61
    1a7c:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey=KPD_NO_PRESSED_KEY;
    1a7e:	8f ef       	ldi	r24, 0xFF	; 255
    1a80:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ColumnIdx,Local_u8RowIdx,Local_u8PinState;
	static u8 Local_u8KPDArr[4][4]= KPD_ARR_VAL;
	static u8 Local_u8KPDColumnArr[COLUMN_NUM]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};
	static u8 Local_u8KPDRowArr[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

	for(Local_u8ColumnIdx=0;Local_u8ColumnIdx<COLUMN_NUM;Local_u8ColumnIdx++)
    1a82:	1a 82       	std	Y+2, r1	; 0x02
    1a84:	5e c0       	rjmp	.+188    	; 0x1b42 <KPD_u8GetPressedKey+0xd2>
	{
		/*Activate current column*/
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx],DIO_u8PIN_LOW);
    1a86:	8a 81       	ldd	r24, Y+2	; 0x02
    1a88:	88 2f       	mov	r24, r24
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	fc 01       	movw	r30, r24
    1a8e:	e4 59       	subi	r30, 0x94	; 148
    1a90:	ff 4f       	sbci	r31, 0xFF	; 255
    1a92:	90 81       	ld	r25, Z
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	69 2f       	mov	r22, r25
    1a98:	40 e0       	ldi	r20, 0x00	; 0
    1a9a:	0e 94 2a 0b 	call	0x1654	; 0x1654 <DIO_u8SetPinValue>

		for(Local_u8RowIdx=0;Local_u8RowIdx<ROW_NUM;Local_u8RowIdx++)
    1a9e:	19 82       	std	Y+1, r1	; 0x01
    1aa0:	3d c0       	rjmp	.+122    	; 0x1b1c <KPD_u8GetPressedKey+0xac>
		{
			/*Read the current row*/
			DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],&Local_u8PinState);
    1aa2:	89 81       	ldd	r24, Y+1	; 0x01
    1aa4:	88 2f       	mov	r24, r24
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	fc 01       	movw	r30, r24
    1aaa:	e8 59       	subi	r30, 0x98	; 152
    1aac:	ff 4f       	sbci	r31, 0xFF	; 255
    1aae:	90 81       	ld	r25, Z
    1ab0:	9e 01       	movw	r18, r28
    1ab2:	2c 5f       	subi	r18, 0xFC	; 252
    1ab4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	69 2f       	mov	r22, r25
    1aba:	a9 01       	movw	r20, r18
    1abc:	0e 94 84 0c 	call	0x1908	; 0x1908 <DIO_u8GetPinValue>

			/*Check if switch is pressed*/
			if(DIO_u8PIN_LOW==Local_u8PinState)
    1ac0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac2:	88 23       	and	r24, r24
    1ac4:	41 f5       	brne	.+80     	; 0x1b16 <KPD_u8GetPressedKey+0xa6>
			{
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];
    1ac6:	89 81       	ldd	r24, Y+1	; 0x01
    1ac8:	48 2f       	mov	r20, r24
    1aca:	50 e0       	ldi	r21, 0x00	; 0
    1acc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ace:	28 2f       	mov	r18, r24
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	ca 01       	movw	r24, r20
    1ad4:	88 0f       	add	r24, r24
    1ad6:	99 1f       	adc	r25, r25
    1ad8:	88 0f       	add	r24, r24
    1ada:	99 1f       	adc	r25, r25
    1adc:	82 0f       	add	r24, r18
    1ade:	93 1f       	adc	r25, r19
    1ae0:	fc 01       	movw	r30, r24
    1ae2:	e0 59       	subi	r30, 0x90	; 144
    1ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae6:	80 81       	ld	r24, Z
    1ae8:	8b 83       	std	Y+3, r24	; 0x03
    1aea:	0f c0       	rjmp	.+30     	; 0x1b0a <KPD_u8GetPressedKey+0x9a>

				/*Polling(busy waiting until the key is released */
				while(DIO_u8PIN_LOW==Local_u8PinState)
				{
					DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],&Local_u8PinState);
    1aec:	89 81       	ldd	r24, Y+1	; 0x01
    1aee:	88 2f       	mov	r24, r24
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	fc 01       	movw	r30, r24
    1af4:	e8 59       	subi	r30, 0x98	; 152
    1af6:	ff 4f       	sbci	r31, 0xFF	; 255
    1af8:	90 81       	ld	r25, Z
    1afa:	9e 01       	movw	r18, r28
    1afc:	2c 5f       	subi	r18, 0xFC	; 252
    1afe:	3f 4f       	sbci	r19, 0xFF	; 255
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	69 2f       	mov	r22, r25
    1b04:	a9 01       	movw	r20, r18
    1b06:	0e 94 84 0c 	call	0x1908	; 0x1908 <DIO_u8GetPinValue>
			if(DIO_u8PIN_LOW==Local_u8PinState)
			{
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];

				/*Polling(busy waiting until the key is released */
				while(DIO_u8PIN_LOW==Local_u8PinState)
    1b0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b0c:	88 23       	and	r24, r24
    1b0e:	71 f3       	breq	.-36     	; 0x1aec <KPD_u8GetPressedKey+0x7c>
				{
					DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],&Local_u8PinState);
				}

				return Local_u8PressedKey;
    1b10:	8b 81       	ldd	r24, Y+3	; 0x03
    1b12:	8d 83       	std	Y+5, r24	; 0x05
    1b14:	1c c0       	rjmp	.+56     	; 0x1b4e <KPD_u8GetPressedKey+0xde>
	for(Local_u8ColumnIdx=0;Local_u8ColumnIdx<COLUMN_NUM;Local_u8ColumnIdx++)
	{
		/*Activate current column*/
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx],DIO_u8PIN_LOW);

		for(Local_u8RowIdx=0;Local_u8RowIdx<ROW_NUM;Local_u8RowIdx++)
    1b16:	89 81       	ldd	r24, Y+1	; 0x01
    1b18:	8f 5f       	subi	r24, 0xFF	; 255
    1b1a:	89 83       	std	Y+1, r24	; 0x01
    1b1c:	89 81       	ldd	r24, Y+1	; 0x01
    1b1e:	84 30       	cpi	r24, 0x04	; 4
    1b20:	08 f4       	brcc	.+2      	; 0x1b24 <KPD_u8GetPressedKey+0xb4>
    1b22:	bf cf       	rjmp	.-130    	; 0x1aa2 <KPD_u8GetPressedKey+0x32>
				return Local_u8PressedKey;
			}
		}

		/*Deactivate the current column*/
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx],DIO_u8PIN_HIGH);
    1b24:	8a 81       	ldd	r24, Y+2	; 0x02
    1b26:	88 2f       	mov	r24, r24
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	fc 01       	movw	r30, r24
    1b2c:	e4 59       	subi	r30, 0x94	; 148
    1b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b30:	90 81       	ld	r25, Z
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	69 2f       	mov	r22, r25
    1b36:	41 e0       	ldi	r20, 0x01	; 1
    1b38:	0e 94 2a 0b 	call	0x1654	; 0x1654 <DIO_u8SetPinValue>
	u8 Local_u8ColumnIdx,Local_u8RowIdx,Local_u8PinState;
	static u8 Local_u8KPDArr[4][4]= KPD_ARR_VAL;
	static u8 Local_u8KPDColumnArr[COLUMN_NUM]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};
	static u8 Local_u8KPDRowArr[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

	for(Local_u8ColumnIdx=0;Local_u8ColumnIdx<COLUMN_NUM;Local_u8ColumnIdx++)
    1b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3e:	8f 5f       	subi	r24, 0xFF	; 255
    1b40:	8a 83       	std	Y+2, r24	; 0x02
    1b42:	8a 81       	ldd	r24, Y+2	; 0x02
    1b44:	84 30       	cpi	r24, 0x04	; 4
    1b46:	08 f4       	brcc	.+2      	; 0x1b4a <KPD_u8GetPressedKey+0xda>
    1b48:	9e cf       	rjmp	.-196    	; 0x1a86 <KPD_u8GetPressedKey+0x16>
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx],DIO_u8PIN_HIGH);

	}


	return Local_u8PressedKey;
    1b4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4c:	8d 83       	std	Y+5, r24	; 0x05
    1b4e:	8d 81       	ldd	r24, Y+5	; 0x05

}
    1b50:	0f 90       	pop	r0
    1b52:	0f 90       	pop	r0
    1b54:	0f 90       	pop	r0
    1b56:	0f 90       	pop	r0
    1b58:	0f 90       	pop	r0
    1b5a:	cf 91       	pop	r28
    1b5c:	df 91       	pop	r29
    1b5e:	08 95       	ret

00001b60 <PORT_voidInit>:
#include "PORT_private.h"
#include "PORT_interface.h"
#include "PORT_register.h"

void PORT_voidInit(void)
{
    1b60:	df 93       	push	r29
    1b62:	cf 93       	push	r28
    1b64:	cd b7       	in	r28, 0x3d	; 61
    1b66:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
    1b68:	ea e3       	ldi	r30, 0x3A	; 58
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	8f ef       	ldi	r24, 0xFF	; 255
    1b6e:	80 83       	st	Z, r24
	DDRB=PORTB_DIR;
    1b70:	e7 e3       	ldi	r30, 0x37	; 55
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	88 e4       	ldi	r24, 0x48	; 72
    1b76:	80 83       	st	Z, r24
	DDRC=PORTC_DIR;
    1b78:	e4 e3       	ldi	r30, 0x34	; 52
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	80 ec       	ldi	r24, 0xC0	; 192
    1b7e:	80 83       	st	Z, r24
	DDRD=PORTD_DIR;
    1b80:	e1 e3       	ldi	r30, 0x31	; 49
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 e2       	ldi	r24, 0x20	; 32
    1b86:	80 83       	st	Z, r24
	
	PORTA=PORTA_INITIAL_VALUE;
    1b88:	eb e3       	ldi	r30, 0x3B	; 59
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	10 82       	st	Z, r1
	PORTB=PORTB_INITIAL_VALUE;
    1b8e:	e8 e3       	ldi	r30, 0x38	; 56
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	10 82       	st	Z, r1
	PORTC=PORTC_INITIAL_VALUE;
    1b94:	e5 e3       	ldi	r30, 0x35	; 53
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	80 e8       	ldi	r24, 0x80	; 128
    1b9a:	80 83       	st	Z, r24
	PORTD=PORTD_INITIAL_VALUE;
    1b9c:	e2 e3       	ldi	r30, 0x32	; 50
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	10 82       	st	Z, r1
	
    1ba2:	cf 91       	pop	r28
    1ba4:	df 91       	pop	r29
    1ba6:	08 95       	ret

00001ba8 <SERVO_voidInit>:
#include "SERVO_config.h"
#include "SERVO_private.h"


void SERVO_voidInit(void)
{
    1ba8:	df 93       	push	r29
    1baa:	cf 93       	push	r28
    1bac:	cd b7       	in	r28, 0x3d	; 61
    1bae:	de b7       	in	r29, 0x3e	; 62
	TIMER1_voidInit(TIMER1_FAST_PWM_ICR1_MODE,DIVIDE_BY_8);
    1bb0:	8e e0       	ldi	r24, 0x0E	; 14
    1bb2:	62 e0       	ldi	r22, 0x02	; 2
    1bb4:	0e 94 9a 12 	call	0x2534	; 0x2534 <TIMER1_voidInit>
	TIMER1_voidSetCompareOutputMode(NON_INVERTED_MODE,TIMER1_OCR1A);
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	60 e0       	ldi	r22, 0x00	; 0
    1bbc:	0e 94 ce 14 	call	0x299c	; 0x299c <TIMER1_voidSetCompareOutputMode>

	/*20000 us to get freq 50Hz, Periodtime = 20ms */
	ICU_voidSetInputCaptureRegister(TOP_VALUE);
    1bc0:	80 e2       	ldi	r24, 0x20	; 32
    1bc2:	9e e4       	ldi	r25, 0x4E	; 78
    1bc4:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <ICU_voidSetInputCaptureRegister>

	/*Angle Zero at 1000us, Ontime : 1ms------->2ms
	 * 							     1000us------->2000us
	 * Practically Servo works in Rang : 750us ------> 2500us
	 * 									 0 degree ----->180 degree*/
	TIMER1_voidSetChannelACompMatchValue(MIN_VALUE);
    1bc8:	8e ee       	ldi	r24, 0xEE	; 238
    1bca:	92 e0       	ldi	r25, 0x02	; 2
    1bcc:	0e 94 7e 15 	call	0x2afc	; 0x2afc <TIMER1_voidSetChannelACompMatchValue>
	
}
    1bd0:	cf 91       	pop	r28
    1bd2:	df 91       	pop	r29
    1bd4:	08 95       	ret

00001bd6 <SERVO_voidSetAngle>:

void SERVO_voidSetAngle(u8 Copy_u8Angle)
{
    1bd6:	df 93       	push	r29
    1bd8:	cf 93       	push	r28
    1bda:	00 d0       	rcall	.+0      	; 0x1bdc <SERVO_voidSetAngle+0x6>
    1bdc:	0f 92       	push	r0
    1bde:	cd b7       	in	r28, 0x3d	; 61
    1be0:	de b7       	in	r29, 0x3e	; 62
    1be2:	8b 83       	std	Y+3, r24	; 0x03
	u16 Local_u16Result = (((u32)Copy_u8Angle * (MAX_VALUE-MIN_VALUE))/ANGLE_180)+ MIN_VALUE ;
    1be4:	8b 81       	ldd	r24, Y+3	; 0x03
    1be6:	88 2f       	mov	r24, r24
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	a0 e0       	ldi	r26, 0x00	; 0
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	26 ed       	ldi	r18, 0xD6	; 214
    1bf0:	36 e0       	ldi	r19, 0x06	; 6
    1bf2:	40 e0       	ldi	r20, 0x00	; 0
    1bf4:	50 e0       	ldi	r21, 0x00	; 0
    1bf6:	bc 01       	movw	r22, r24
    1bf8:	cd 01       	movw	r24, r26
    1bfa:	0e 94 e6 22 	call	0x45cc	; 0x45cc <__mulsi3>
    1bfe:	dc 01       	movw	r26, r24
    1c00:	cb 01       	movw	r24, r22
    1c02:	24 eb       	ldi	r18, 0xB4	; 180
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	40 e0       	ldi	r20, 0x00	; 0
    1c08:	50 e0       	ldi	r21, 0x00	; 0
    1c0a:	bc 01       	movw	r22, r24
    1c0c:	cd 01       	movw	r24, r26
    1c0e:	0e 94 19 23 	call	0x4632	; 0x4632 <__udivmodsi4>
    1c12:	da 01       	movw	r26, r20
    1c14:	c9 01       	movw	r24, r18
    1c16:	82 51       	subi	r24, 0x12	; 18
    1c18:	9d 4f       	sbci	r25, 0xFD	; 253
    1c1a:	9a 83       	std	Y+2, r25	; 0x02
    1c1c:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_voidSetChannelACompMatchValue(Local_u16Result);
    1c1e:	89 81       	ldd	r24, Y+1	; 0x01
    1c20:	9a 81       	ldd	r25, Y+2	; 0x02
    1c22:	0e 94 7e 15 	call	0x2afc	; 0x2afc <TIMER1_voidSetChannelACompMatchValue>
}
    1c26:	0f 90       	pop	r0
    1c28:	0f 90       	pop	r0
    1c2a:	0f 90       	pop	r0
    1c2c:	cf 91       	pop	r28
    1c2e:	df 91       	pop	r29
    1c30:	08 95       	ret

00001c32 <SPI_voidInit>:

/* Discription : Function to Initialize SPI
 * Input : void
 * Output : void		*/
void SPI_voidInit(void)
{
    1c32:	df 93       	push	r29
    1c34:	cf 93       	push	r28
    1c36:	cd b7       	in	r28, 0x3d	; 61
    1c38:	de b7       	in	r29, 0x3e	; 62
#endif

#elif SPI_MODE_SELECT == SPI_SLAVE
	{
		/*Slave Initialization*/
		CLR_BIT(SPCR,SPCR_MSTR);
    1c3a:	ad e2       	ldi	r26, 0x2D	; 45
    1c3c:	b0 e0       	ldi	r27, 0x00	; 0
    1c3e:	ed e2       	ldi	r30, 0x2D	; 45
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	8f 7e       	andi	r24, 0xEF	; 239
    1c46:	8c 93       	st	X, r24
	{
		CLR_BIT(SPCR,SPCR_DORD);
	}
#elif SPI_DATA_ORDER == SPI_LSB
	{
		SET_BIT(SPCR,SPCR_DORD);
    1c48:	ad e2       	ldi	r26, 0x2D	; 45
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	ed e2       	ldi	r30, 0x2D	; 45
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	80 62       	ori	r24, 0x20	; 32
    1c54:	8c 93       	st	X, r24
	{
		CLR_BIT(SPCR,SRCR_CPOL);
	}
#elif SPI_CLK_POL == SPI_RISING_EDGE
	{
		SET_BIT(SPCR,SPCR_CPOL);
    1c56:	ad e2       	ldi	r26, 0x2D	; 45
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	ed e2       	ldi	r30, 0x2D	; 45
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	88 60       	ori	r24, 0x08	; 8
    1c62:	8c 93       	st	X, r24
#endif

	/*Selecting Clock Phase*/
#if SPI_CLK_PHASE == SPI_SAMPLE
	{
		CLR_BIT(SPCR,SPCR_CPHA);
    1c64:	ad e2       	ldi	r26, 0x2D	; 45
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	ed e2       	ldi	r30, 0x2D	; 45
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	8b 7f       	andi	r24, 0xFB	; 251
    1c70:	8c 93       	st	X, r24
		SET_BIT(SPCR,SPCR_CPHA);
	}
#endif

	/*SPI Enable*/
	SET_BIT(SPCR,SPCR_SPE);
    1c72:	ad e2       	ldi	r26, 0x2D	; 45
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	ed e2       	ldi	r30, 0x2D	; 45
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	80 64       	ori	r24, 0x40	; 64
    1c7e:	8c 93       	st	X, r24
}
    1c80:	cf 91       	pop	r28
    1c82:	df 91       	pop	r29
    1c84:	08 95       	ret

00001c86 <SPI_u8TransceiveSynch>:
/*Discription : Function to send and receive dada Synchronously
 * Input : 1- Copy_pu8ReceivedData : pointer to hold the received data
 * 		   2- Copy_u8SendData : to send the data
 * Output : Local_u8ErrorStatus		*/
u8 SPI_u8TransceiveSynch(u8 *Copy_pu8ReceivedData,u8 Copy_u8SendData)
{
    1c86:	df 93       	push	r29
    1c88:	cf 93       	push	r28
    1c8a:	cd b7       	in	r28, 0x3d	; 61
    1c8c:	de b7       	in	r29, 0x3e	; 62
    1c8e:	28 97       	sbiw	r28, 0x08	; 8
    1c90:	0f b6       	in	r0, 0x3f	; 63
    1c92:	f8 94       	cli
    1c94:	de bf       	out	0x3e, r29	; 62
    1c96:	0f be       	out	0x3f, r0	; 63
    1c98:	cd bf       	out	0x3d, r28	; 61
    1c9a:	9f 83       	std	Y+7, r25	; 0x07
    1c9c:	8e 83       	std	Y+6, r24	; 0x06
    1c9e:	68 87       	std	Y+8, r22	; 0x08
	u32 Local_u32Counter=0;
    1ca0:	1a 82       	std	Y+2, r1	; 0x02
    1ca2:	1b 82       	std	Y+3, r1	; 0x03
    1ca4:	1c 82       	std	Y+4, r1	; 0x04
    1ca6:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8ErrorStatus = OK;
    1ca8:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pu8ReceivedData == NULL)
    1caa:	8e 81       	ldd	r24, Y+6	; 0x06
    1cac:	9f 81       	ldd	r25, Y+7	; 0x07
    1cae:	00 97       	sbiw	r24, 0x00	; 0
    1cb0:	19 f4       	brne	.+6      	; 0x1cb8 <SPI_u8TransceiveSynch+0x32>
	{
		Local_u8ErrorStatus = NULL_POINTER;
    1cb2:	82 e0       	ldi	r24, 0x02	; 2
    1cb4:	89 83       	std	Y+1, r24	; 0x01
    1cb6:	36 c0       	rjmp	.+108    	; 0x1d24 <SPI_u8TransceiveSynch+0x9e>
	}
	else
	{
		/*Writing in The Data register ---> sending*/
		SPDR = Copy_u8SendData;
    1cb8:	ef e2       	ldi	r30, 0x2F	; 47
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	88 85       	ldd	r24, Y+8	; 0x08
    1cbe:	80 83       	st	Z, r24
    1cc0:	0b c0       	rjmp	.+22     	; 0x1cd8 <SPI_u8TransceiveSynch+0x52>

		/*Wait until transmission complete*/
		while((GET_BIT(SPSR,SPSR_SPIF)==0) && (Local_u32Counter != SPI_u32_TIMEOUT))
		{
			Local_u32Counter++;
    1cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc4:	9b 81       	ldd	r25, Y+3	; 0x03
    1cc6:	ac 81       	ldd	r26, Y+4	; 0x04
    1cc8:	bd 81       	ldd	r27, Y+5	; 0x05
    1cca:	01 96       	adiw	r24, 0x01	; 1
    1ccc:	a1 1d       	adc	r26, r1
    1cce:	b1 1d       	adc	r27, r1
    1cd0:	8a 83       	std	Y+2, r24	; 0x02
    1cd2:	9b 83       	std	Y+3, r25	; 0x03
    1cd4:	ac 83       	std	Y+4, r26	; 0x04
    1cd6:	bd 83       	std	Y+5, r27	; 0x05
	{
		/*Writing in The Data register ---> sending*/
		SPDR = Copy_u8SendData;

		/*Wait until transmission complete*/
		while((GET_BIT(SPSR,SPSR_SPIF)==0) && (Local_u32Counter != SPI_u32_TIMEOUT))
    1cd8:	ee e2       	ldi	r30, 0x2E	; 46
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	80 81       	ld	r24, Z
    1cde:	88 23       	and	r24, r24
    1ce0:	64 f0       	brlt	.+24     	; 0x1cfa <SPI_u8TransceiveSynch+0x74>
    1ce2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ce6:	ac 81       	ldd	r26, Y+4	; 0x04
    1ce8:	bd 81       	ldd	r27, Y+5	; 0x05
    1cea:	80 35       	cpi	r24, 0x50	; 80
    1cec:	23 ec       	ldi	r18, 0xC3	; 195
    1cee:	92 07       	cpc	r25, r18
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	a2 07       	cpc	r26, r18
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	b2 07       	cpc	r27, r18
    1cf8:	21 f7       	brne	.-56     	; 0x1cc2 <SPI_u8TransceiveSynch+0x3c>
		{
			Local_u32Counter++;
		}
		if(Local_u32Counter==SPI_u32_TIMEOUT)
    1cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfc:	9b 81       	ldd	r25, Y+3	; 0x03
    1cfe:	ac 81       	ldd	r26, Y+4	; 0x04
    1d00:	bd 81       	ldd	r27, Y+5	; 0x05
    1d02:	80 35       	cpi	r24, 0x50	; 80
    1d04:	23 ec       	ldi	r18, 0xC3	; 195
    1d06:	92 07       	cpc	r25, r18
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	a2 07       	cpc	r26, r18
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	b2 07       	cpc	r27, r18
    1d10:	19 f4       	brne	.+6      	; 0x1d18 <SPI_u8TransceiveSynch+0x92>
		{
			/*Loop is broken because the timeout is reached*/
			Local_u8ErrorStatus=NOK;
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	89 83       	std	Y+1, r24	; 0x01
    1d16:	06 c0       	rjmp	.+12     	; 0x1d24 <SPI_u8TransceiveSynch+0x9e>
		}
		else
		{
			*Copy_pu8ReceivedData = SPDR;
    1d18:	ef e2       	ldi	r30, 0x2F	; 47
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	80 81       	ld	r24, Z
    1d1e:	ee 81       	ldd	r30, Y+6	; 0x06
    1d20:	ff 81       	ldd	r31, Y+7	; 0x07
    1d22:	80 83       	st	Z, r24
		}
	}

	return Local_u8ErrorStatus;
    1d24:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d26:	28 96       	adiw	r28, 0x08	; 8
    1d28:	0f b6       	in	r0, 0x3f	; 63
    1d2a:	f8 94       	cli
    1d2c:	de bf       	out	0x3e, r29	; 62
    1d2e:	0f be       	out	0x3f, r0	; 63
    1d30:	cd bf       	out	0x3d, r28	; 61
    1d32:	cf 91       	pop	r28
    1d34:	df 91       	pop	r29
    1d36:	08 95       	ret

00001d38 <SPI_u8TransceiveASynch>:
/*Discription : Function to send and receive dada ASynchronously
 * Input : 1- Copy_pu8ReceivedData : pointer to hold the received data
 * 		   2- Copy_u8SendData : to send the data
 * Output : Local_u8ErrorStatus		*/
u8 SPI_u8TransceiveASynch(u8 *Copy_pu8ReceivedData,u8 *Copy_u8SendData,void(*Copy_pvNotificationFunc)(void))
{
    1d38:	df 93       	push	r29
    1d3a:	cf 93       	push	r28
    1d3c:	cd b7       	in	r28, 0x3d	; 61
    1d3e:	de b7       	in	r29, 0x3e	; 62
    1d40:	27 97       	sbiw	r28, 0x07	; 7
    1d42:	0f b6       	in	r0, 0x3f	; 63
    1d44:	f8 94       	cli
    1d46:	de bf       	out	0x3e, r29	; 62
    1d48:	0f be       	out	0x3f, r0	; 63
    1d4a:	cd bf       	out	0x3d, r28	; 61
    1d4c:	9b 83       	std	Y+3, r25	; 0x03
    1d4e:	8a 83       	std	Y+2, r24	; 0x02
    1d50:	7d 83       	std	Y+5, r23	; 0x05
    1d52:	6c 83       	std	Y+4, r22	; 0x04
    1d54:	5f 83       	std	Y+7, r21	; 0x07
    1d56:	4e 83       	std	Y+6, r20	; 0x06
	u8 Local_u8ErrorStatus = OK;
    1d58:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8ReceivedData == NULL || Copy_pvNotificationFunc == NULL)
    1d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d5e:	00 97       	sbiw	r24, 0x00	; 0
    1d60:	21 f0       	breq	.+8      	; 0x1d6a <SPI_u8TransceiveASynch+0x32>
    1d62:	8e 81       	ldd	r24, Y+6	; 0x06
    1d64:	9f 81       	ldd	r25, Y+7	; 0x07
    1d66:	00 97       	sbiw	r24, 0x00	; 0
    1d68:	19 f4       	brne	.+6      	; 0x1d70 <SPI_u8TransceiveASynch+0x38>
	{
		Local_u8ErrorStatus = NULL_POINTER;
    1d6a:	82 e0       	ldi	r24, 0x02	; 2
    1d6c:	89 83       	std	Y+1, r24	; 0x01
    1d6e:	2b c0       	rjmp	.+86     	; 0x1dc6 <SPI_u8TransceiveASynch+0x8e>
	}
	else
	{
		if(SPI_u8BusyState == IDLE)
    1d70:	80 91 9a 00 	lds	r24, 0x009A
    1d74:	88 23       	and	r24, r24
    1d76:	29 f5       	brne	.+74     	; 0x1dc2 <SPI_u8TransceiveASynch+0x8a>
		{
			/*Make SPI Busy*/
			SPI_u8BusyState = BUSY;
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	80 93 9a 00 	sts	0x009A, r24

			/*Initialize the receving data variable globally*/
			SPI_pu8ReceivedData = Copy_pu8ReceivedData;
    1d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d80:	9b 81       	ldd	r25, Y+3	; 0x03
    1d82:	90 93 97 00 	sts	0x0097, r25
    1d86:	80 93 96 00 	sts	0x0096, r24

			/*Initialize the Sending data variable globally*/
			SPI_pu8SendData=Copy_u8SendData;
    1d8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d8c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d8e:	90 93 99 00 	sts	0x0099, r25
    1d92:	80 93 98 00 	sts	0x0098, r24

			/*Initialize the callback notification function globally*/
			SPI_pvCallBackNotificationFunc = Copy_pvNotificationFunc;
    1d96:	8e 81       	ldd	r24, Y+6	; 0x06
    1d98:	9f 81       	ldd	r25, Y+7	; 0x07
    1d9a:	90 93 95 00 	sts	0x0095, r25
    1d9e:	80 93 94 00 	sts	0x0094, r24

			SPDR = *SPI_pu8SendData;
    1da2:	af e2       	ldi	r26, 0x2F	; 47
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	e0 91 98 00 	lds	r30, 0x0098
    1daa:	f0 91 99 00 	lds	r31, 0x0099
    1dae:	80 81       	ld	r24, Z
    1db0:	8c 93       	st	X, r24

			/* Enable SPI Interrupt*/
			SET_BIT(SPCR,SPCR_SPIE);
    1db2:	ad e2       	ldi	r26, 0x2D	; 45
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	ed e2       	ldi	r30, 0x2D	; 45
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	80 81       	ld	r24, Z
    1dbc:	80 68       	ori	r24, 0x80	; 128
    1dbe:	8c 93       	st	X, r24
    1dc0:	02 c0       	rjmp	.+4      	; 0x1dc6 <SPI_u8TransceiveASynch+0x8e>
		}
		else
		{
			Local_u8ErrorStatus = BUSY_FUNC;
    1dc2:	83 e0       	ldi	r24, 0x03	; 3
    1dc4:	89 83       	std	Y+1, r24	; 0x01
		}
	}

	return Local_u8ErrorStatus;
    1dc6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dc8:	27 96       	adiw	r28, 0x07	; 7
    1dca:	0f b6       	in	r0, 0x3f	; 63
    1dcc:	f8 94       	cli
    1dce:	de bf       	out	0x3e, r29	; 62
    1dd0:	0f be       	out	0x3f, r0	; 63
    1dd2:	cd bf       	out	0x3d, r28	; 61
    1dd4:	cf 91       	pop	r28
    1dd6:	df 91       	pop	r29
    1dd8:	08 95       	ret

00001dda <__vector_12>:

void __vector_12 (void)	 __attribute__((signal));
void __vector_12 (void)
{
    1dda:	1f 92       	push	r1
    1ddc:	0f 92       	push	r0
    1dde:	0f b6       	in	r0, 0x3f	; 63
    1de0:	0f 92       	push	r0
    1de2:	11 24       	eor	r1, r1
    1de4:	2f 93       	push	r18
    1de6:	3f 93       	push	r19
    1de8:	4f 93       	push	r20
    1dea:	5f 93       	push	r21
    1dec:	6f 93       	push	r22
    1dee:	7f 93       	push	r23
    1df0:	8f 93       	push	r24
    1df2:	9f 93       	push	r25
    1df4:	af 93       	push	r26
    1df6:	bf 93       	push	r27
    1df8:	ef 93       	push	r30
    1dfa:	ff 93       	push	r31
    1dfc:	df 93       	push	r29
    1dfe:	cf 93       	push	r28
    1e00:	cd b7       	in	r28, 0x3d	; 61
    1e02:	de b7       	in	r29, 0x3e	; 62


	/*Reading the received Data byte*/
	*SPI_pu8ReceivedData = SPDR;
    1e04:	a0 91 96 00 	lds	r26, 0x0096
    1e08:	b0 91 97 00 	lds	r27, 0x0097
    1e0c:	ef e2       	ldi	r30, 0x2F	; 47
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	80 81       	ld	r24, Z
    1e12:	8c 93       	st	X, r24

	/*Disable SPI Interrupt*/
	CLR_BIT(SPCR,SPCR_SPIE);
    1e14:	ad e2       	ldi	r26, 0x2D	; 45
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	ed e2       	ldi	r30, 0x2D	; 45
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	80 81       	ld	r24, Z
    1e1e:	8f 77       	andi	r24, 0x7F	; 127
    1e20:	8c 93       	st	X, r24

	/*Make SPI State IDLE*/
	SPI_u8BusyState = IDLE;
    1e22:	10 92 9a 00 	sts	0x009A, r1

	/*Invoke SPI Notification Function*/
	SPI_pvCallBackNotificationFunc();
    1e26:	e0 91 94 00 	lds	r30, 0x0094
    1e2a:	f0 91 95 00 	lds	r31, 0x0095
    1e2e:	09 95       	icall


}
    1e30:	cf 91       	pop	r28
    1e32:	df 91       	pop	r29
    1e34:	ff 91       	pop	r31
    1e36:	ef 91       	pop	r30
    1e38:	bf 91       	pop	r27
    1e3a:	af 91       	pop	r26
    1e3c:	9f 91       	pop	r25
    1e3e:	8f 91       	pop	r24
    1e40:	7f 91       	pop	r23
    1e42:	6f 91       	pop	r22
    1e44:	5f 91       	pop	r21
    1e46:	4f 91       	pop	r20
    1e48:	3f 91       	pop	r19
    1e4a:	2f 91       	pop	r18
    1e4c:	0f 90       	pop	r0
    1e4e:	0f be       	out	0x3f, r0	; 63
    1e50:	0f 90       	pop	r0
    1e52:	1f 90       	pop	r1
    1e54:	18 95       	reti

00001e56 <SSD_voidSetNumber>:
#include <util/delay.h>



void SSD_voidSetNumber(SSD_t* Copy_u8SSD,u8 Copy_u8Number)
{
    1e56:	df 93       	push	r29
    1e58:	cf 93       	push	r28
    1e5a:	cd b7       	in	r28, 0x3d	; 61
    1e5c:	de b7       	in	r29, 0x3e	; 62
    1e5e:	62 97       	sbiw	r28, 0x12	; 18
    1e60:	0f b6       	in	r0, 0x3f	; 63
    1e62:	f8 94       	cli
    1e64:	de bf       	out	0x3e, r29	; 62
    1e66:	0f be       	out	0x3f, r0	; 63
    1e68:	cd bf       	out	0x3d, r28	; 61
    1e6a:	9c 87       	std	Y+12, r25	; 0x0c
    1e6c:	8b 87       	std	Y+11, r24	; 0x0b
    1e6e:	6d 87       	std	Y+13, r22	; 0x0d
	u8 Local_u8SSDValue[10]=SSD_ARR_VAL;
    1e70:	ce 01       	movw	r24, r28
    1e72:	01 96       	adiw	r24, 0x01	; 1
    1e74:	9f 87       	std	Y+15, r25	; 0x0f
    1e76:	8e 87       	std	Y+14, r24	; 0x0e
    1e78:	e0 e8       	ldi	r30, 0x80	; 128
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	f9 8b       	std	Y+17, r31	; 0x11
    1e7e:	e8 8b       	std	Y+16, r30	; 0x10
    1e80:	fa e0       	ldi	r31, 0x0A	; 10
    1e82:	fa 8b       	std	Y+18, r31	; 0x12
    1e84:	e8 89       	ldd	r30, Y+16	; 0x10
    1e86:	f9 89       	ldd	r31, Y+17	; 0x11
    1e88:	00 80       	ld	r0, Z
    1e8a:	88 89       	ldd	r24, Y+16	; 0x10
    1e8c:	99 89       	ldd	r25, Y+17	; 0x11
    1e8e:	01 96       	adiw	r24, 0x01	; 1
    1e90:	99 8b       	std	Y+17, r25	; 0x11
    1e92:	88 8b       	std	Y+16, r24	; 0x10
    1e94:	ee 85       	ldd	r30, Y+14	; 0x0e
    1e96:	ff 85       	ldd	r31, Y+15	; 0x0f
    1e98:	00 82       	st	Z, r0
    1e9a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e9c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e9e:	01 96       	adiw	r24, 0x01	; 1
    1ea0:	9f 87       	std	Y+15, r25	; 0x0f
    1ea2:	8e 87       	std	Y+14, r24	; 0x0e
    1ea4:	9a 89       	ldd	r25, Y+18	; 0x12
    1ea6:	91 50       	subi	r25, 0x01	; 1
    1ea8:	9a 8b       	std	Y+18, r25	; 0x12
    1eaa:	ea 89       	ldd	r30, Y+18	; 0x12
    1eac:	ee 23       	and	r30, r30
    1eae:	51 f7       	brne	.-44     	; 0x1e84 <SSD_voidSetNumber+0x2e>

	if(Copy_u8SSD->Com_Type == SSD_u8ComCathode)
    1eb0:	eb 85       	ldd	r30, Y+11	; 0x0b
    1eb2:	fc 85       	ldd	r31, Y+12	; 0x0c
    1eb4:	83 81       	ldd	r24, Z+3	; 0x03
    1eb6:	88 23       	and	r24, r24
    1eb8:	d9 f4       	brne	.+54     	; 0x1ef0 <SSD_voidSetNumber+0x9a>
	{
		DIO_u8SetPinValue(Copy_u8SSD->Enable_Port,Copy_u8SSD->Enable_Pin,DIO_u8PIN_LOW);
    1eba:	eb 85       	ldd	r30, Y+11	; 0x0b
    1ebc:	fc 85       	ldd	r31, Y+12	; 0x0c
    1ebe:	81 81       	ldd	r24, Z+1	; 0x01
    1ec0:	eb 85       	ldd	r30, Y+11	; 0x0b
    1ec2:	fc 85       	ldd	r31, Y+12	; 0x0c
    1ec4:	92 81       	ldd	r25, Z+2	; 0x02
    1ec6:	69 2f       	mov	r22, r25
    1ec8:	40 e0       	ldi	r20, 0x00	; 0
    1eca:	0e 94 2a 0b 	call	0x1654	; 0x1654 <DIO_u8SetPinValue>
		DIO_u8SetPortValue(Copy_u8SSD->Port,Local_u8SSDValue[Copy_u8Number]);
    1ece:	eb 85       	ldd	r30, Y+11	; 0x0b
    1ed0:	fc 85       	ldd	r31, Y+12	; 0x0c
    1ed2:	40 81       	ld	r20, Z
    1ed4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ed6:	28 2f       	mov	r18, r24
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	ce 01       	movw	r24, r28
    1edc:	01 96       	adiw	r24, 0x01	; 1
    1ede:	fc 01       	movw	r30, r24
    1ee0:	e2 0f       	add	r30, r18
    1ee2:	f3 1f       	adc	r31, r19
    1ee4:	90 81       	ld	r25, Z
    1ee6:	84 2f       	mov	r24, r20
    1ee8:	69 2f       	mov	r22, r25
    1eea:	0e 94 3c 0c 	call	0x1878	; 0x1878 <DIO_u8SetPortValue>
    1eee:	1f c0       	rjmp	.+62     	; 0x1f2e <SSD_voidSetNumber+0xd8>
	}
	else if(Copy_u8SSD->Com_Type == SSD_u8ComAnode)
    1ef0:	eb 85       	ldd	r30, Y+11	; 0x0b
    1ef2:	fc 85       	ldd	r31, Y+12	; 0x0c
    1ef4:	83 81       	ldd	r24, Z+3	; 0x03
    1ef6:	81 30       	cpi	r24, 0x01	; 1
    1ef8:	d1 f4       	brne	.+52     	; 0x1f2e <SSD_voidSetNumber+0xd8>
	{
		DIO_u8SetPinValue(Copy_u8SSD->Enable_Port,Copy_u8SSD->Enable_Pin,DIO_u8PIN_HIGH);
    1efa:	eb 85       	ldd	r30, Y+11	; 0x0b
    1efc:	fc 85       	ldd	r31, Y+12	; 0x0c
    1efe:	81 81       	ldd	r24, Z+1	; 0x01
    1f00:	eb 85       	ldd	r30, Y+11	; 0x0b
    1f02:	fc 85       	ldd	r31, Y+12	; 0x0c
    1f04:	92 81       	ldd	r25, Z+2	; 0x02
    1f06:	69 2f       	mov	r22, r25
    1f08:	41 e0       	ldi	r20, 0x01	; 1
    1f0a:	0e 94 2a 0b 	call	0x1654	; 0x1654 <DIO_u8SetPinValue>
		DIO_u8SetPortValue(Copy_u8SSD->Port,Local_u8SSDValue[Copy_u8Number]);
    1f0e:	eb 85       	ldd	r30, Y+11	; 0x0b
    1f10:	fc 85       	ldd	r31, Y+12	; 0x0c
    1f12:	40 81       	ld	r20, Z
    1f14:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f16:	28 2f       	mov	r18, r24
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	ce 01       	movw	r24, r28
    1f1c:	01 96       	adiw	r24, 0x01	; 1
    1f1e:	fc 01       	movw	r30, r24
    1f20:	e2 0f       	add	r30, r18
    1f22:	f3 1f       	adc	r31, r19
    1f24:	90 81       	ld	r25, Z
    1f26:	84 2f       	mov	r24, r20
    1f28:	69 2f       	mov	r22, r25
    1f2a:	0e 94 3c 0c 	call	0x1878	; 0x1878 <DIO_u8SetPortValue>
	}

}
    1f2e:	62 96       	adiw	r28, 0x12	; 18
    1f30:	0f b6       	in	r0, 0x3f	; 63
    1f32:	f8 94       	cli
    1f34:	de bf       	out	0x3e, r29	; 62
    1f36:	0f be       	out	0x3f, r0	; 63
    1f38:	cd bf       	out	0x3d, r28	; 61
    1f3a:	cf 91       	pop	r28
    1f3c:	df 91       	pop	r29
    1f3e:	08 95       	ret

00001f40 <SSD_voidMultiplex>:

void SSD_voidMultiplex(SSD_t* Copy_u8SSD1,SSD_t* Copy_u8SSD2,u8 Copy_u8Number1,u8 Copy_u8Number2)
{
    1f40:	df 93       	push	r29
    1f42:	cf 93       	push	r28
    1f44:	cd b7       	in	r28, 0x3d	; 61
    1f46:	de b7       	in	r29, 0x3e	; 62
    1f48:	a2 97       	sbiw	r28, 0x22	; 34
    1f4a:	0f b6       	in	r0, 0x3f	; 63
    1f4c:	f8 94       	cli
    1f4e:	de bf       	out	0x3e, r29	; 62
    1f50:	0f be       	out	0x3f, r0	; 63
    1f52:	cd bf       	out	0x3d, r28	; 61
    1f54:	9e 8f       	std	Y+30, r25	; 0x1e
    1f56:	8d 8f       	std	Y+29, r24	; 0x1d
    1f58:	78 a3       	std	Y+32, r23	; 0x20
    1f5a:	6f 8f       	std	Y+31, r22	; 0x1f
    1f5c:	49 a3       	std	Y+33, r20	; 0x21
    1f5e:	2a a3       	std	Y+34, r18	; 0x22

	SSD_voidSetNumber(Copy_u8SSD1,Copy_u8Number1);
    1f60:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f62:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f64:	69 a1       	ldd	r22, Y+33	; 0x21
    1f66:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <SSD_voidSetNumber>
	DIO_u8SetPinValue(Copy_u8SSD2->Enable_Port,Copy_u8SSD2->Enable_Pin,DIO_u8PIN_HIGH);
    1f6a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1f6c:	f8 a1       	ldd	r31, Y+32	; 0x20
    1f6e:	81 81       	ldd	r24, Z+1	; 0x01
    1f70:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1f72:	f8 a1       	ldd	r31, Y+32	; 0x20
    1f74:	92 81       	ldd	r25, Z+2	; 0x02
    1f76:	69 2f       	mov	r22, r25
    1f78:	41 e0       	ldi	r20, 0x01	; 1
    1f7a:	0e 94 2a 0b 	call	0x1654	; 0x1654 <DIO_u8SetPinValue>
    1f7e:	80 e0       	ldi	r24, 0x00	; 0
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	a0 e2       	ldi	r26, 0x20	; 32
    1f84:	b1 e4       	ldi	r27, 0x41	; 65
    1f86:	89 8f       	std	Y+25, r24	; 0x19
    1f88:	9a 8f       	std	Y+26, r25	; 0x1a
    1f8a:	ab 8f       	std	Y+27, r26	; 0x1b
    1f8c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f8e:	69 8d       	ldd	r22, Y+25	; 0x19
    1f90:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f92:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f94:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	4a ef       	ldi	r20, 0xFA	; 250
    1f9c:	54 e4       	ldi	r21, 0x44	; 68
    1f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa2:	dc 01       	movw	r26, r24
    1fa4:	cb 01       	movw	r24, r22
    1fa6:	8d 8b       	std	Y+21, r24	; 0x15
    1fa8:	9e 8b       	std	Y+22, r25	; 0x16
    1faa:	af 8b       	std	Y+23, r26	; 0x17
    1fac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fae:	6d 89       	ldd	r22, Y+21	; 0x15
    1fb0:	7e 89       	ldd	r23, Y+22	; 0x16
    1fb2:	8f 89       	ldd	r24, Y+23	; 0x17
    1fb4:	98 8d       	ldd	r25, Y+24	; 0x18
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	40 e8       	ldi	r20, 0x80	; 128
    1fbc:	5f e3       	ldi	r21, 0x3F	; 63
    1fbe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fc2:	88 23       	and	r24, r24
    1fc4:	2c f4       	brge	.+10     	; 0x1fd0 <SSD_voidMultiplex+0x90>
		__ticks = 1;
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	9c 8b       	std	Y+20, r25	; 0x14
    1fcc:	8b 8b       	std	Y+19, r24	; 0x13
    1fce:	3f c0       	rjmp	.+126    	; 0x204e <SSD_voidMultiplex+0x10e>
	else if (__tmp > 65535)
    1fd0:	6d 89       	ldd	r22, Y+21	; 0x15
    1fd2:	7e 89       	ldd	r23, Y+22	; 0x16
    1fd4:	8f 89       	ldd	r24, Y+23	; 0x17
    1fd6:	98 8d       	ldd	r25, Y+24	; 0x18
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	3f ef       	ldi	r19, 0xFF	; 255
    1fdc:	4f e7       	ldi	r20, 0x7F	; 127
    1fde:	57 e4       	ldi	r21, 0x47	; 71
    1fe0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fe4:	18 16       	cp	r1, r24
    1fe6:	4c f5       	brge	.+82     	; 0x203a <SSD_voidMultiplex+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fe8:	69 8d       	ldd	r22, Y+25	; 0x19
    1fea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	40 e2       	ldi	r20, 0x20	; 32
    1ff6:	51 e4       	ldi	r21, 0x41	; 65
    1ff8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ffc:	dc 01       	movw	r26, r24
    1ffe:	cb 01       	movw	r24, r22
    2000:	bc 01       	movw	r22, r24
    2002:	cd 01       	movw	r24, r26
    2004:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2008:	dc 01       	movw	r26, r24
    200a:	cb 01       	movw	r24, r22
    200c:	9c 8b       	std	Y+20, r25	; 0x14
    200e:	8b 8b       	std	Y+19, r24	; 0x13
    2010:	0f c0       	rjmp	.+30     	; 0x2030 <SSD_voidMultiplex+0xf0>
    2012:	88 ec       	ldi	r24, 0xC8	; 200
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	9a 8b       	std	Y+18, r25	; 0x12
    2018:	89 8b       	std	Y+17, r24	; 0x11
    201a:	89 89       	ldd	r24, Y+17	; 0x11
    201c:	9a 89       	ldd	r25, Y+18	; 0x12
    201e:	01 97       	sbiw	r24, 0x01	; 1
    2020:	f1 f7       	brne	.-4      	; 0x201e <SSD_voidMultiplex+0xde>
    2022:	9a 8b       	std	Y+18, r25	; 0x12
    2024:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2026:	8b 89       	ldd	r24, Y+19	; 0x13
    2028:	9c 89       	ldd	r25, Y+20	; 0x14
    202a:	01 97       	sbiw	r24, 0x01	; 1
    202c:	9c 8b       	std	Y+20, r25	; 0x14
    202e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2030:	8b 89       	ldd	r24, Y+19	; 0x13
    2032:	9c 89       	ldd	r25, Y+20	; 0x14
    2034:	00 97       	sbiw	r24, 0x00	; 0
    2036:	69 f7       	brne	.-38     	; 0x2012 <SSD_voidMultiplex+0xd2>
    2038:	14 c0       	rjmp	.+40     	; 0x2062 <SSD_voidMultiplex+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    203a:	6d 89       	ldd	r22, Y+21	; 0x15
    203c:	7e 89       	ldd	r23, Y+22	; 0x16
    203e:	8f 89       	ldd	r24, Y+23	; 0x17
    2040:	98 8d       	ldd	r25, Y+24	; 0x18
    2042:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	9c 8b       	std	Y+20, r25	; 0x14
    204c:	8b 8b       	std	Y+19, r24	; 0x13
    204e:	8b 89       	ldd	r24, Y+19	; 0x13
    2050:	9c 89       	ldd	r25, Y+20	; 0x14
    2052:	98 8b       	std	Y+16, r25	; 0x10
    2054:	8f 87       	std	Y+15, r24	; 0x0f
    2056:	8f 85       	ldd	r24, Y+15	; 0x0f
    2058:	98 89       	ldd	r25, Y+16	; 0x10
    205a:	01 97       	sbiw	r24, 0x01	; 1
    205c:	f1 f7       	brne	.-4      	; 0x205a <SSD_voidMultiplex+0x11a>
    205e:	98 8b       	std	Y+16, r25	; 0x10
    2060:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	SSD_voidSetNumber(Copy_u8SSD2,Copy_u8Number2);
    2062:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2064:	98 a1       	ldd	r25, Y+32	; 0x20
    2066:	6a a1       	ldd	r22, Y+34	; 0x22
    2068:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <SSD_voidSetNumber>
	DIO_u8SetPinValue(Copy_u8SSD1->Enable_Port,Copy_u8SSD1->Enable_Pin,DIO_u8PIN_HIGH);
    206c:	ed 8d       	ldd	r30, Y+29	; 0x1d
    206e:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2070:	81 81       	ldd	r24, Z+1	; 0x01
    2072:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2074:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2076:	92 81       	ldd	r25, Z+2	; 0x02
    2078:	69 2f       	mov	r22, r25
    207a:	41 e0       	ldi	r20, 0x01	; 1
    207c:	0e 94 2a 0b 	call	0x1654	; 0x1654 <DIO_u8SetPinValue>
    2080:	80 e0       	ldi	r24, 0x00	; 0
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	a0 e2       	ldi	r26, 0x20	; 32
    2086:	b1 e4       	ldi	r27, 0x41	; 65
    2088:	8b 87       	std	Y+11, r24	; 0x0b
    208a:	9c 87       	std	Y+12, r25	; 0x0c
    208c:	ad 87       	std	Y+13, r26	; 0x0d
    208e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2090:	6b 85       	ldd	r22, Y+11	; 0x0b
    2092:	7c 85       	ldd	r23, Y+12	; 0x0c
    2094:	8d 85       	ldd	r24, Y+13	; 0x0d
    2096:	9e 85       	ldd	r25, Y+14	; 0x0e
    2098:	20 e0       	ldi	r18, 0x00	; 0
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	4a ef       	ldi	r20, 0xFA	; 250
    209e:	54 e4       	ldi	r21, 0x44	; 68
    20a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a4:	dc 01       	movw	r26, r24
    20a6:	cb 01       	movw	r24, r22
    20a8:	8f 83       	std	Y+7, r24	; 0x07
    20aa:	98 87       	std	Y+8, r25	; 0x08
    20ac:	a9 87       	std	Y+9, r26	; 0x09
    20ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20b0:	6f 81       	ldd	r22, Y+7	; 0x07
    20b2:	78 85       	ldd	r23, Y+8	; 0x08
    20b4:	89 85       	ldd	r24, Y+9	; 0x09
    20b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	40 e8       	ldi	r20, 0x80	; 128
    20be:	5f e3       	ldi	r21, 0x3F	; 63
    20c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20c4:	88 23       	and	r24, r24
    20c6:	2c f4       	brge	.+10     	; 0x20d2 <SSD_voidMultiplex+0x192>
		__ticks = 1;
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	9e 83       	std	Y+6, r25	; 0x06
    20ce:	8d 83       	std	Y+5, r24	; 0x05
    20d0:	3f c0       	rjmp	.+126    	; 0x2150 <SSD_voidMultiplex+0x210>
	else if (__tmp > 65535)
    20d2:	6f 81       	ldd	r22, Y+7	; 0x07
    20d4:	78 85       	ldd	r23, Y+8	; 0x08
    20d6:	89 85       	ldd	r24, Y+9	; 0x09
    20d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	3f ef       	ldi	r19, 0xFF	; 255
    20de:	4f e7       	ldi	r20, 0x7F	; 127
    20e0:	57 e4       	ldi	r21, 0x47	; 71
    20e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20e6:	18 16       	cp	r1, r24
    20e8:	4c f5       	brge	.+82     	; 0x213c <SSD_voidMultiplex+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    20f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	40 e2       	ldi	r20, 0x20	; 32
    20f8:	51 e4       	ldi	r21, 0x41	; 65
    20fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20fe:	dc 01       	movw	r26, r24
    2100:	cb 01       	movw	r24, r22
    2102:	bc 01       	movw	r22, r24
    2104:	cd 01       	movw	r24, r26
    2106:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	9e 83       	std	Y+6, r25	; 0x06
    2110:	8d 83       	std	Y+5, r24	; 0x05
    2112:	0f c0       	rjmp	.+30     	; 0x2132 <SSD_voidMultiplex+0x1f2>
    2114:	88 ec       	ldi	r24, 0xC8	; 200
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	9c 83       	std	Y+4, r25	; 0x04
    211a:	8b 83       	std	Y+3, r24	; 0x03
    211c:	8b 81       	ldd	r24, Y+3	; 0x03
    211e:	9c 81       	ldd	r25, Y+4	; 0x04
    2120:	01 97       	sbiw	r24, 0x01	; 1
    2122:	f1 f7       	brne	.-4      	; 0x2120 <SSD_voidMultiplex+0x1e0>
    2124:	9c 83       	std	Y+4, r25	; 0x04
    2126:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2128:	8d 81       	ldd	r24, Y+5	; 0x05
    212a:	9e 81       	ldd	r25, Y+6	; 0x06
    212c:	01 97       	sbiw	r24, 0x01	; 1
    212e:	9e 83       	std	Y+6, r25	; 0x06
    2130:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2132:	8d 81       	ldd	r24, Y+5	; 0x05
    2134:	9e 81       	ldd	r25, Y+6	; 0x06
    2136:	00 97       	sbiw	r24, 0x00	; 0
    2138:	69 f7       	brne	.-38     	; 0x2114 <SSD_voidMultiplex+0x1d4>
    213a:	14 c0       	rjmp	.+40     	; 0x2164 <SSD_voidMultiplex+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    213c:	6f 81       	ldd	r22, Y+7	; 0x07
    213e:	78 85       	ldd	r23, Y+8	; 0x08
    2140:	89 85       	ldd	r24, Y+9	; 0x09
    2142:	9a 85       	ldd	r25, Y+10	; 0x0a
    2144:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	9e 83       	std	Y+6, r25	; 0x06
    214e:	8d 83       	std	Y+5, r24	; 0x05
    2150:	8d 81       	ldd	r24, Y+5	; 0x05
    2152:	9e 81       	ldd	r25, Y+6	; 0x06
    2154:	9a 83       	std	Y+2, r25	; 0x02
    2156:	89 83       	std	Y+1, r24	; 0x01
    2158:	89 81       	ldd	r24, Y+1	; 0x01
    215a:	9a 81       	ldd	r25, Y+2	; 0x02
    215c:	01 97       	sbiw	r24, 0x01	; 1
    215e:	f1 f7       	brne	.-4      	; 0x215c <SSD_voidMultiplex+0x21c>
    2160:	9a 83       	std	Y+2, r25	; 0x02
    2162:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    2164:	a2 96       	adiw	r28, 0x22	; 34
    2166:	0f b6       	in	r0, 0x3f	; 63
    2168:	f8 94       	cli
    216a:	de bf       	out	0x3e, r29	; 62
    216c:	0f be       	out	0x3f, r0	; 63
    216e:	cd bf       	out	0x3d, r28	; 61
    2170:	cf 91       	pop	r28
    2172:	df 91       	pop	r29
    2174:	08 95       	ret

00002176 <TIMER0_voidInit>:


static void(*TIMER0_pvCallBackFunc[2])(void)={NULL};

void TIMER0_voidInit(u8 Copy_u8Mode, u8 Copy_u8Prescaler)
{
    2176:	df 93       	push	r29
    2178:	cf 93       	push	r28
    217a:	00 d0       	rcall	.+0      	; 0x217c <TIMER0_voidInit+0x6>
    217c:	00 d0       	rcall	.+0      	; 0x217e <TIMER0_voidInit+0x8>
    217e:	cd b7       	in	r28, 0x3d	; 61
    2180:	de b7       	in	r29, 0x3e	; 62
    2182:	89 83       	std	Y+1, r24	; 0x01
    2184:	6a 83       	std	Y+2, r22	; 0x02
	/*Select Waveform generation mode*/
	switch(Copy_u8Mode)
    2186:	89 81       	ldd	r24, Y+1	; 0x01
    2188:	28 2f       	mov	r18, r24
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	3c 83       	std	Y+4, r19	; 0x04
    218e:	2b 83       	std	Y+3, r18	; 0x03
    2190:	8b 81       	ldd	r24, Y+3	; 0x03
    2192:	9c 81       	ldd	r25, Y+4	; 0x04
    2194:	81 30       	cpi	r24, 0x01	; 1
    2196:	91 05       	cpc	r25, r1
    2198:	21 f1       	breq	.+72     	; 0x21e2 <TIMER0_voidInit+0x6c>
    219a:	2b 81       	ldd	r18, Y+3	; 0x03
    219c:	3c 81       	ldd	r19, Y+4	; 0x04
    219e:	22 30       	cpi	r18, 0x02	; 2
    21a0:	31 05       	cpc	r19, r1
    21a2:	2c f4       	brge	.+10     	; 0x21ae <TIMER0_voidInit+0x38>
    21a4:	8b 81       	ldd	r24, Y+3	; 0x03
    21a6:	9c 81       	ldd	r25, Y+4	; 0x04
    21a8:	00 97       	sbiw	r24, 0x00	; 0
    21aa:	61 f0       	breq	.+24     	; 0x21c4 <TIMER0_voidInit+0x4e>
    21ac:	46 c0       	rjmp	.+140    	; 0x223a <TIMER0_voidInit+0xc4>
    21ae:	2b 81       	ldd	r18, Y+3	; 0x03
    21b0:	3c 81       	ldd	r19, Y+4	; 0x04
    21b2:	22 30       	cpi	r18, 0x02	; 2
    21b4:	31 05       	cpc	r19, r1
    21b6:	21 f1       	breq	.+72     	; 0x2200 <TIMER0_voidInit+0x8a>
    21b8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ba:	9c 81       	ldd	r25, Y+4	; 0x04
    21bc:	83 30       	cpi	r24, 0x03	; 3
    21be:	91 05       	cpc	r25, r1
    21c0:	71 f1       	breq	.+92     	; 0x221e <TIMER0_voidInit+0xa8>
    21c2:	3b c0       	rjmp	.+118    	; 0x223a <TIMER0_voidInit+0xc4>
	{
	case TIMER0_NORMAL_MODE: CLR_BIT(TCCR0,TCCR0_WGM00); CLR_BIT(TCCR0,TCCR0_WGM01); break;
    21c4:	a3 e5       	ldi	r26, 0x53	; 83
    21c6:	b0 e0       	ldi	r27, 0x00	; 0
    21c8:	e3 e5       	ldi	r30, 0x53	; 83
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	80 81       	ld	r24, Z
    21ce:	8f 7b       	andi	r24, 0xBF	; 191
    21d0:	8c 93       	st	X, r24
    21d2:	a3 e5       	ldi	r26, 0x53	; 83
    21d4:	b0 e0       	ldi	r27, 0x00	; 0
    21d6:	e3 e5       	ldi	r30, 0x53	; 83
    21d8:	f0 e0       	ldi	r31, 0x00	; 0
    21da:	80 81       	ld	r24, Z
    21dc:	87 7f       	andi	r24, 0xF7	; 247
    21de:	8c 93       	st	X, r24
    21e0:	2c c0       	rjmp	.+88     	; 0x223a <TIMER0_voidInit+0xc4>
	case TIMER0_PHASE_CORRECT_PWM :SET_BIT(TCCR0,TCCR0_WGM00); CLR_BIT(TCCR0,TCCR0_WGM01); break;
    21e2:	a3 e5       	ldi	r26, 0x53	; 83
    21e4:	b0 e0       	ldi	r27, 0x00	; 0
    21e6:	e3 e5       	ldi	r30, 0x53	; 83
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	80 81       	ld	r24, Z
    21ec:	80 64       	ori	r24, 0x40	; 64
    21ee:	8c 93       	st	X, r24
    21f0:	a3 e5       	ldi	r26, 0x53	; 83
    21f2:	b0 e0       	ldi	r27, 0x00	; 0
    21f4:	e3 e5       	ldi	r30, 0x53	; 83
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	80 81       	ld	r24, Z
    21fa:	87 7f       	andi	r24, 0xF7	; 247
    21fc:	8c 93       	st	X, r24
    21fe:	1d c0       	rjmp	.+58     	; 0x223a <TIMER0_voidInit+0xc4>
	case TIMER0_CTC: CLR_BIT(TCCR0,TCCR0_WGM00); SET_BIT(TCCR0,TCCR0_WGM01); break;
    2200:	a3 e5       	ldi	r26, 0x53	; 83
    2202:	b0 e0       	ldi	r27, 0x00	; 0
    2204:	e3 e5       	ldi	r30, 0x53	; 83
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	80 81       	ld	r24, Z
    220a:	8f 7b       	andi	r24, 0xBF	; 191
    220c:	8c 93       	st	X, r24
    220e:	a3 e5       	ldi	r26, 0x53	; 83
    2210:	b0 e0       	ldi	r27, 0x00	; 0
    2212:	e3 e5       	ldi	r30, 0x53	; 83
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	80 81       	ld	r24, Z
    2218:	88 60       	ori	r24, 0x08	; 8
    221a:	8c 93       	st	X, r24
    221c:	0e c0       	rjmp	.+28     	; 0x223a <TIMER0_voidInit+0xc4>
	case TIMER0_FAST_PWM: SET_BIT(TCCR0,TCCR0_WGM00); SET_BIT(TCCR0,TCCR0_WGM01); break;
    221e:	a3 e5       	ldi	r26, 0x53	; 83
    2220:	b0 e0       	ldi	r27, 0x00	; 0
    2222:	e3 e5       	ldi	r30, 0x53	; 83
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	80 81       	ld	r24, Z
    2228:	80 64       	ori	r24, 0x40	; 64
    222a:	8c 93       	st	X, r24
    222c:	a3 e5       	ldi	r26, 0x53	; 83
    222e:	b0 e0       	ldi	r27, 0x00	; 0
    2230:	e3 e5       	ldi	r30, 0x53	; 83
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	80 81       	ld	r24, Z
    2236:	88 60       	ori	r24, 0x08	; 8
    2238:	8c 93       	st	X, r24
	default: break;
	}


	/*Set Prescaler division factor*/
	TCCR0 &=PRESCALER_MASK;
    223a:	a3 e5       	ldi	r26, 0x53	; 83
    223c:	b0 e0       	ldi	r27, 0x00	; 0
    223e:	e3 e5       	ldi	r30, 0x53	; 83
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	80 81       	ld	r24, Z
    2244:	88 7f       	andi	r24, 0xF8	; 248
    2246:	8c 93       	st	X, r24
	TCCR0 |=Copy_u8Prescaler;
    2248:	a3 e5       	ldi	r26, 0x53	; 83
    224a:	b0 e0       	ldi	r27, 0x00	; 0
    224c:	e3 e5       	ldi	r30, 0x53	; 83
    224e:	f0 e0       	ldi	r31, 0x00	; 0
    2250:	90 81       	ld	r25, Z
    2252:	8a 81       	ldd	r24, Y+2	; 0x02
    2254:	89 2b       	or	r24, r25
    2256:	8c 93       	st	X, r24

}
    2258:	0f 90       	pop	r0
    225a:	0f 90       	pop	r0
    225c:	0f 90       	pop	r0
    225e:	0f 90       	pop	r0
    2260:	cf 91       	pop	r28
    2262:	df 91       	pop	r29
    2264:	08 95       	ret

00002266 <TIMER0_voidSetCompMatchOutputMode>:

void TIMER0_voidSetCompMatchOutputMode(u8 Copy_u8CompOutputMode)
{
    2266:	df 93       	push	r29
    2268:	cf 93       	push	r28
    226a:	00 d0       	rcall	.+0      	; 0x226c <TIMER0_voidSetCompMatchOutputMode+0x6>
    226c:	0f 92       	push	r0
    226e:	cd b7       	in	r28, 0x3d	; 61
    2270:	de b7       	in	r29, 0x3e	; 62
    2272:	89 83       	std	Y+1, r24	; 0x01
	/*Select Compare match Output mode*/
	switch(Copy_u8CompOutputMode)
    2274:	89 81       	ldd	r24, Y+1	; 0x01
    2276:	28 2f       	mov	r18, r24
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	3b 83       	std	Y+3, r19	; 0x03
    227c:	2a 83       	std	Y+2, r18	; 0x02
    227e:	8a 81       	ldd	r24, Y+2	; 0x02
    2280:	9b 81       	ldd	r25, Y+3	; 0x03
    2282:	81 30       	cpi	r24, 0x01	; 1
    2284:	91 05       	cpc	r25, r1
    2286:	c1 f0       	breq	.+48     	; 0x22b8 <TIMER0_voidSetCompMatchOutputMode+0x52>
    2288:	2a 81       	ldd	r18, Y+2	; 0x02
    228a:	3b 81       	ldd	r19, Y+3	; 0x03
    228c:	22 30       	cpi	r18, 0x02	; 2
    228e:	31 05       	cpc	r19, r1
    2290:	11 f1       	breq	.+68     	; 0x22d6 <TIMER0_voidSetCompMatchOutputMode+0x70>
    2292:	8a 81       	ldd	r24, Y+2	; 0x02
    2294:	9b 81       	ldd	r25, Y+3	; 0x03
    2296:	00 97       	sbiw	r24, 0x00	; 0
    2298:	61 f5       	brne	.+88     	; 0x22f2 <TIMER0_voidSetCompMatchOutputMode+0x8c>
	{
	case NORMAL_OPERATION_MODE : CLR_BIT(TCCR0,TCCR0_COM00); CLR_BIT(TCCR0,TCCR0_COM01); break;
    229a:	a3 e5       	ldi	r26, 0x53	; 83
    229c:	b0 e0       	ldi	r27, 0x00	; 0
    229e:	e3 e5       	ldi	r30, 0x53	; 83
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	80 81       	ld	r24, Z
    22a4:	8f 7e       	andi	r24, 0xEF	; 239
    22a6:	8c 93       	st	X, r24
    22a8:	a3 e5       	ldi	r26, 0x53	; 83
    22aa:	b0 e0       	ldi	r27, 0x00	; 0
    22ac:	e3 e5       	ldi	r30, 0x53	; 83
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	80 81       	ld	r24, Z
    22b2:	8f 7d       	andi	r24, 0xDF	; 223
    22b4:	8c 93       	st	X, r24
    22b6:	1d c0       	rjmp	.+58     	; 0x22f2 <TIMER0_voidSetCompMatchOutputMode+0x8c>
	case NON_INVERTED_MODE: CLR_BIT(TCCR0,TCCR0_COM00); SET_BIT(TCCR0,TCCR0_COM01); break;
    22b8:	a3 e5       	ldi	r26, 0x53	; 83
    22ba:	b0 e0       	ldi	r27, 0x00	; 0
    22bc:	e3 e5       	ldi	r30, 0x53	; 83
    22be:	f0 e0       	ldi	r31, 0x00	; 0
    22c0:	80 81       	ld	r24, Z
    22c2:	8f 7e       	andi	r24, 0xEF	; 239
    22c4:	8c 93       	st	X, r24
    22c6:	a3 e5       	ldi	r26, 0x53	; 83
    22c8:	b0 e0       	ldi	r27, 0x00	; 0
    22ca:	e3 e5       	ldi	r30, 0x53	; 83
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	80 81       	ld	r24, Z
    22d0:	80 62       	ori	r24, 0x20	; 32
    22d2:	8c 93       	st	X, r24
    22d4:	0e c0       	rjmp	.+28     	; 0x22f2 <TIMER0_voidSetCompMatchOutputMode+0x8c>
	case INVERTED_MODE : SET_BIT(TCCR0,TCCR0_COM00); SET_BIT(TCCR0,TCCR0_COM01); break;
    22d6:	a3 e5       	ldi	r26, 0x53	; 83
    22d8:	b0 e0       	ldi	r27, 0x00	; 0
    22da:	e3 e5       	ldi	r30, 0x53	; 83
    22dc:	f0 e0       	ldi	r31, 0x00	; 0
    22de:	80 81       	ld	r24, Z
    22e0:	80 61       	ori	r24, 0x10	; 16
    22e2:	8c 93       	st	X, r24
    22e4:	a3 e5       	ldi	r26, 0x53	; 83
    22e6:	b0 e0       	ldi	r27, 0x00	; 0
    22e8:	e3 e5       	ldi	r30, 0x53	; 83
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	80 81       	ld	r24, Z
    22ee:	80 62       	ori	r24, 0x20	; 32
    22f0:	8c 93       	st	X, r24
	default : break;
	}

}
    22f2:	0f 90       	pop	r0
    22f4:	0f 90       	pop	r0
    22f6:	0f 90       	pop	r0
    22f8:	cf 91       	pop	r28
    22fa:	df 91       	pop	r29
    22fc:	08 95       	ret

000022fe <TIMER0_voidSetCompMatchValue>:

void TIMER0_voidSetCompMatchValue(u8 Copy_u8Value)
{
    22fe:	df 93       	push	r29
    2300:	cf 93       	push	r28
    2302:	0f 92       	push	r0
    2304:	cd b7       	in	r28, 0x3d	; 61
    2306:	de b7       	in	r29, 0x3e	; 62
    2308:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8Value;
    230a:	ec e5       	ldi	r30, 0x5C	; 92
    230c:	f0 e0       	ldi	r31, 0x00	; 0
    230e:	89 81       	ldd	r24, Y+1	; 0x01
    2310:	80 83       	st	Z, r24
}
    2312:	0f 90       	pop	r0
    2314:	cf 91       	pop	r28
    2316:	df 91       	pop	r29
    2318:	08 95       	ret

0000231a <TIMER0_voidSetTimerValue>:

void TIMER0_voidSetTimerValue(u8 Copy_u8Value)
{
    231a:	df 93       	push	r29
    231c:	cf 93       	push	r28
    231e:	0f 92       	push	r0
    2320:	cd b7       	in	r28, 0x3d	; 61
    2322:	de b7       	in	r29, 0x3e	; 62
    2324:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Value;
    2326:	e2 e5       	ldi	r30, 0x52	; 82
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	89 81       	ldd	r24, Y+1	; 0x01
    232c:	80 83       	st	Z, r24
}
    232e:	0f 90       	pop	r0
    2330:	cf 91       	pop	r28
    2332:	df 91       	pop	r29
    2334:	08 95       	ret

00002336 <TIMER0_u8ReadTimerValue>:

u8 TIMER0_u8ReadTimerValue(void)
{
    2336:	df 93       	push	r29
    2338:	cf 93       	push	r28
    233a:	cd b7       	in	r28, 0x3d	; 61
    233c:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
    233e:	e2 e5       	ldi	r30, 0x52	; 82
    2340:	f0 e0       	ldi	r31, 0x00	; 0
    2342:	80 81       	ld	r24, Z
}
    2344:	cf 91       	pop	r28
    2346:	df 91       	pop	r29
    2348:	08 95       	ret

0000234a <TIMER0_voidCompMatchInterruptEnable>:

void TIMER0_voidCompMatchInterruptEnable(void)
{
    234a:	df 93       	push	r29
    234c:	cf 93       	push	r28
    234e:	cd b7       	in	r28, 0x3d	; 61
    2350:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_OCIE1);
    2352:	a9 e5       	ldi	r26, 0x59	; 89
    2354:	b0 e0       	ldi	r27, 0x00	; 0
    2356:	e9 e5       	ldi	r30, 0x59	; 89
    2358:	f0 e0       	ldi	r31, 0x00	; 0
    235a:	80 81       	ld	r24, Z
    235c:	82 60       	ori	r24, 0x02	; 2
    235e:	8c 93       	st	X, r24
}
    2360:	cf 91       	pop	r28
    2362:	df 91       	pop	r29
    2364:	08 95       	ret

00002366 <TIMER0_voidCompMatchInterruptDisable>:

void TIMER0_voidCompMatchInterruptDisable(void)
{
    2366:	df 93       	push	r29
    2368:	cf 93       	push	r28
    236a:	cd b7       	in	r28, 0x3d	; 61
    236c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_OCIE1);
    236e:	a9 e5       	ldi	r26, 0x59	; 89
    2370:	b0 e0       	ldi	r27, 0x00	; 0
    2372:	e9 e5       	ldi	r30, 0x59	; 89
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	80 81       	ld	r24, Z
    2378:	8d 7f       	andi	r24, 0xFD	; 253
    237a:	8c 93       	st	X, r24
}
    237c:	cf 91       	pop	r28
    237e:	df 91       	pop	r29
    2380:	08 95       	ret

00002382 <TIMER0_voidOVFInterruptEnable>:

void TIMER0_voidOVFInterruptEnable(void)
{
    2382:	df 93       	push	r29
    2384:	cf 93       	push	r28
    2386:	cd b7       	in	r28, 0x3d	; 61
    2388:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TOIE0);
    238a:	a9 e5       	ldi	r26, 0x59	; 89
    238c:	b0 e0       	ldi	r27, 0x00	; 0
    238e:	e9 e5       	ldi	r30, 0x59	; 89
    2390:	f0 e0       	ldi	r31, 0x00	; 0
    2392:	80 81       	ld	r24, Z
    2394:	81 60       	ori	r24, 0x01	; 1
    2396:	8c 93       	st	X, r24
}
    2398:	cf 91       	pop	r28
    239a:	df 91       	pop	r29
    239c:	08 95       	ret

0000239e <TIMER0_voidOVFInterruptDisable>:

void TIMER0_voidOVFInterruptDisable(void)
{
    239e:	df 93       	push	r29
    23a0:	cf 93       	push	r28
    23a2:	cd b7       	in	r28, 0x3d	; 61
    23a4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TOIE0);
    23a6:	a9 e5       	ldi	r26, 0x59	; 89
    23a8:	b0 e0       	ldi	r27, 0x00	; 0
    23aa:	e9 e5       	ldi	r30, 0x59	; 89
    23ac:	f0 e0       	ldi	r31, 0x00	; 0
    23ae:	80 81       	ld	r24, Z
    23b0:	8e 7f       	andi	r24, 0xFE	; 254
    23b2:	8c 93       	st	X, r24
}
    23b4:	cf 91       	pop	r28
    23b6:	df 91       	pop	r29
    23b8:	08 95       	ret

000023ba <TIMER0_voidSetDutyCycle>:

void TIMER0_voidSetDutyCycle(u8 Copy_u8DutyCycle)
{
    23ba:	df 93       	push	r29
    23bc:	cf 93       	push	r28
    23be:	00 d0       	rcall	.+0      	; 0x23c0 <TIMER0_voidSetDutyCycle+0x6>
    23c0:	cd b7       	in	r28, 0x3d	; 61
    23c2:	de b7       	in	r29, 0x3e	; 62
    23c4:	8a 83       	std	Y+2, r24	; 0x02
	if(Copy_u8DutyCycle <= 100)
    23c6:	8a 81       	ldd	r24, Y+2	; 0x02
    23c8:	85 36       	cpi	r24, 0x65	; 101
    23ca:	20 f5       	brcc	.+72     	; 0x2414 <TIMER0_voidSetDutyCycle+0x5a>
	{
		u8 Local_u8TimeOn = ((u16)Copy_u8DutyCycle * (TIMER0_MAX_COUNT))/100 ;
    23cc:	8a 81       	ldd	r24, Y+2	; 0x02
    23ce:	48 2f       	mov	r20, r24
    23d0:	50 e0       	ldi	r21, 0x00	; 0
    23d2:	ca 01       	movw	r24, r20
    23d4:	9c 01       	movw	r18, r24
    23d6:	22 0f       	add	r18, r18
    23d8:	33 1f       	adc	r19, r19
    23da:	c9 01       	movw	r24, r18
    23dc:	96 95       	lsr	r25
    23de:	98 2f       	mov	r25, r24
    23e0:	88 27       	eor	r24, r24
    23e2:	97 95       	ror	r25
    23e4:	87 95       	ror	r24
    23e6:	82 1b       	sub	r24, r18
    23e8:	93 0b       	sbc	r25, r19
    23ea:	84 0f       	add	r24, r20
    23ec:	95 1f       	adc	r25, r21
    23ee:	24 e6       	ldi	r18, 0x64	; 100
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	b9 01       	movw	r22, r18
    23f4:	0e 94 05 23 	call	0x460a	; 0x460a <__udivmodhi4>
    23f8:	cb 01       	movw	r24, r22
    23fa:	89 83       	std	Y+1, r24	; 0x01

		if(Local_u8TimeOn >1)
    23fc:	89 81       	ldd	r24, Y+1	; 0x01
    23fe:	82 30       	cpi	r24, 0x02	; 2
    2400:	30 f0       	brcs	.+12     	; 0x240e <TIMER0_voidSetDutyCycle+0x54>
		{
			OCR0 = TIMER0_MAX_COUNT-Local_u8TimeOn;
    2402:	ec e5       	ldi	r30, 0x5C	; 92
    2404:	f0 e0       	ldi	r31, 0x00	; 0
    2406:	89 81       	ldd	r24, Y+1	; 0x01
    2408:	80 95       	com	r24
    240a:	80 83       	st	Z, r24
    240c:	03 c0       	rjmp	.+6      	; 0x2414 <TIMER0_voidSetDutyCycle+0x5a>
		}
		else
		{
			OCR0 = 0;
    240e:	ec e5       	ldi	r30, 0x5C	; 92
    2410:	f0 e0       	ldi	r31, 0x00	; 0
    2412:	10 82       	st	Z, r1
	}
	else
	{
		/*return Error*/
	}
}
    2414:	0f 90       	pop	r0
    2416:	0f 90       	pop	r0
    2418:	cf 91       	pop	r28
    241a:	df 91       	pop	r29
    241c:	08 95       	ret

0000241e <TIMER0_u8SetCallBack>:

u8 TIMER0_u8SetCallBack(void (*Copy_pvCallBackFunc)(void), u8 Copy_u8IntNumber)
{
    241e:	df 93       	push	r29
    2420:	cf 93       	push	r28
    2422:	00 d0       	rcall	.+0      	; 0x2424 <TIMER0_u8SetCallBack+0x6>
    2424:	00 d0       	rcall	.+0      	; 0x2426 <TIMER0_u8SetCallBack+0x8>
    2426:	cd b7       	in	r28, 0x3d	; 61
    2428:	de b7       	in	r29, 0x3e	; 62
    242a:	9b 83       	std	Y+3, r25	; 0x03
    242c:	8a 83       	std	Y+2, r24	; 0x02
    242e:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorStatus=OK;
    2430:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pvCallBackFunc!=NULL)
    2432:	8a 81       	ldd	r24, Y+2	; 0x02
    2434:	9b 81       	ldd	r25, Y+3	; 0x03
    2436:	00 97       	sbiw	r24, 0x00	; 0
    2438:	69 f0       	breq	.+26     	; 0x2454 <TIMER0_u8SetCallBack+0x36>
	{
		TIMER0_pvCallBackFunc[Copy_u8IntNumber]= Copy_pvCallBackFunc;
    243a:	8c 81       	ldd	r24, Y+4	; 0x04
    243c:	88 2f       	mov	r24, r24
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	88 0f       	add	r24, r24
    2442:	99 1f       	adc	r25, r25
    2444:	fc 01       	movw	r30, r24
    2446:	e5 56       	subi	r30, 0x65	; 101
    2448:	ff 4f       	sbci	r31, 0xFF	; 255
    244a:	8a 81       	ldd	r24, Y+2	; 0x02
    244c:	9b 81       	ldd	r25, Y+3	; 0x03
    244e:	91 83       	std	Z+1, r25	; 0x01
    2450:	80 83       	st	Z, r24
    2452:	02 c0       	rjmp	.+4      	; 0x2458 <TIMER0_u8SetCallBack+0x3a>
	}
	else
	{
		Local_u8ErrorStatus=NULL_POINTER;
    2454:	82 e0       	ldi	r24, 0x02	; 2
    2456:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorStatus;
    2458:	89 81       	ldd	r24, Y+1	; 0x01

}
    245a:	0f 90       	pop	r0
    245c:	0f 90       	pop	r0
    245e:	0f 90       	pop	r0
    2460:	0f 90       	pop	r0
    2462:	cf 91       	pop	r28
    2464:	df 91       	pop	r29
    2466:	08 95       	ret

00002468 <__vector_10>:

void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
    2468:	1f 92       	push	r1
    246a:	0f 92       	push	r0
    246c:	0f b6       	in	r0, 0x3f	; 63
    246e:	0f 92       	push	r0
    2470:	11 24       	eor	r1, r1
    2472:	2f 93       	push	r18
    2474:	3f 93       	push	r19
    2476:	4f 93       	push	r20
    2478:	5f 93       	push	r21
    247a:	6f 93       	push	r22
    247c:	7f 93       	push	r23
    247e:	8f 93       	push	r24
    2480:	9f 93       	push	r25
    2482:	af 93       	push	r26
    2484:	bf 93       	push	r27
    2486:	ef 93       	push	r30
    2488:	ff 93       	push	r31
    248a:	df 93       	push	r29
    248c:	cf 93       	push	r28
    248e:	cd b7       	in	r28, 0x3d	; 61
    2490:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvCallBackFunc[TIMER0_COMP] != NULL)
    2492:	80 91 9d 00 	lds	r24, 0x009D
    2496:	90 91 9e 00 	lds	r25, 0x009E
    249a:	00 97       	sbiw	r24, 0x00	; 0
    249c:	29 f0       	breq	.+10     	; 0x24a8 <__vector_10+0x40>
	{
		TIMER0_pvCallBackFunc[TIMER0_COMP]();
    249e:	e0 91 9d 00 	lds	r30, 0x009D
    24a2:	f0 91 9e 00 	lds	r31, 0x009E
    24a6:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    24a8:	cf 91       	pop	r28
    24aa:	df 91       	pop	r29
    24ac:	ff 91       	pop	r31
    24ae:	ef 91       	pop	r30
    24b0:	bf 91       	pop	r27
    24b2:	af 91       	pop	r26
    24b4:	9f 91       	pop	r25
    24b6:	8f 91       	pop	r24
    24b8:	7f 91       	pop	r23
    24ba:	6f 91       	pop	r22
    24bc:	5f 91       	pop	r21
    24be:	4f 91       	pop	r20
    24c0:	3f 91       	pop	r19
    24c2:	2f 91       	pop	r18
    24c4:	0f 90       	pop	r0
    24c6:	0f be       	out	0x3f, r0	; 63
    24c8:	0f 90       	pop	r0
    24ca:	1f 90       	pop	r1
    24cc:	18 95       	reti

000024ce <__vector_11>:

void __vector_11 (void) __attribute__((signal));
void __vector_11 (void)
{
    24ce:	1f 92       	push	r1
    24d0:	0f 92       	push	r0
    24d2:	0f b6       	in	r0, 0x3f	; 63
    24d4:	0f 92       	push	r0
    24d6:	11 24       	eor	r1, r1
    24d8:	2f 93       	push	r18
    24da:	3f 93       	push	r19
    24dc:	4f 93       	push	r20
    24de:	5f 93       	push	r21
    24e0:	6f 93       	push	r22
    24e2:	7f 93       	push	r23
    24e4:	8f 93       	push	r24
    24e6:	9f 93       	push	r25
    24e8:	af 93       	push	r26
    24ea:	bf 93       	push	r27
    24ec:	ef 93       	push	r30
    24ee:	ff 93       	push	r31
    24f0:	df 93       	push	r29
    24f2:	cf 93       	push	r28
    24f4:	cd b7       	in	r28, 0x3d	; 61
    24f6:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvCallBackFunc[TIMER0_OVF] != NULL)
    24f8:	80 91 9b 00 	lds	r24, 0x009B
    24fc:	90 91 9c 00 	lds	r25, 0x009C
    2500:	00 97       	sbiw	r24, 0x00	; 0
    2502:	29 f0       	breq	.+10     	; 0x250e <__vector_11+0x40>
	{
		TIMER0_pvCallBackFunc[TIMER0_OVF]();
    2504:	e0 91 9b 00 	lds	r30, 0x009B
    2508:	f0 91 9c 00 	lds	r31, 0x009C
    250c:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    250e:	cf 91       	pop	r28
    2510:	df 91       	pop	r29
    2512:	ff 91       	pop	r31
    2514:	ef 91       	pop	r30
    2516:	bf 91       	pop	r27
    2518:	af 91       	pop	r26
    251a:	9f 91       	pop	r25
    251c:	8f 91       	pop	r24
    251e:	7f 91       	pop	r23
    2520:	6f 91       	pop	r22
    2522:	5f 91       	pop	r21
    2524:	4f 91       	pop	r20
    2526:	3f 91       	pop	r19
    2528:	2f 91       	pop	r18
    252a:	0f 90       	pop	r0
    252c:	0f be       	out	0x3f, r0	; 63
    252e:	0f 90       	pop	r0
    2530:	1f 90       	pop	r1
    2532:	18 95       	reti

00002534 <TIMER1_voidInit>:


static void(*TIMER1_pvCallBackFunc[4])(void)={NULL};

void  TIMER1_voidInit(u8 Copy_u8Mode,u8 Copy_u8Prescaler)
{
    2534:	df 93       	push	r29
    2536:	cf 93       	push	r28
    2538:	00 d0       	rcall	.+0      	; 0x253a <TIMER1_voidInit+0x6>
    253a:	00 d0       	rcall	.+0      	; 0x253c <TIMER1_voidInit+0x8>
    253c:	cd b7       	in	r28, 0x3d	; 61
    253e:	de b7       	in	r29, 0x3e	; 62
    2540:	89 83       	std	Y+1, r24	; 0x01
    2542:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Mode)
    2544:	89 81       	ldd	r24, Y+1	; 0x01
    2546:	28 2f       	mov	r18, r24
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	3c 83       	std	Y+4, r19	; 0x04
    254c:	2b 83       	std	Y+3, r18	; 0x03
    254e:	8b 81       	ldd	r24, Y+3	; 0x03
    2550:	9c 81       	ldd	r25, Y+4	; 0x04
    2552:	87 30       	cpi	r24, 0x07	; 7
    2554:	91 05       	cpc	r25, r1
    2556:	09 f4       	brne	.+2      	; 0x255a <TIMER1_voidInit+0x26>
    2558:	24 c1       	rjmp	.+584    	; 0x27a2 <TIMER1_voidInit+0x26e>
    255a:	2b 81       	ldd	r18, Y+3	; 0x03
    255c:	3c 81       	ldd	r19, Y+4	; 0x04
    255e:	28 30       	cpi	r18, 0x08	; 8
    2560:	31 05       	cpc	r19, r1
    2562:	4c f5       	brge	.+82     	; 0x25b6 <TIMER1_voidInit+0x82>
    2564:	8b 81       	ldd	r24, Y+3	; 0x03
    2566:	9c 81       	ldd	r25, Y+4	; 0x04
    2568:	83 30       	cpi	r24, 0x03	; 3
    256a:	91 05       	cpc	r25, r1
    256c:	09 f4       	brne	.+2      	; 0x2570 <TIMER1_voidInit+0x3c>
    256e:	a5 c0       	rjmp	.+330    	; 0x26ba <TIMER1_voidInit+0x186>
    2570:	2b 81       	ldd	r18, Y+3	; 0x03
    2572:	3c 81       	ldd	r19, Y+4	; 0x04
    2574:	24 30       	cpi	r18, 0x04	; 4
    2576:	31 05       	cpc	r19, r1
    2578:	8c f4       	brge	.+34     	; 0x259c <TIMER1_voidInit+0x68>
    257a:	8b 81       	ldd	r24, Y+3	; 0x03
    257c:	9c 81       	ldd	r25, Y+4	; 0x04
    257e:	81 30       	cpi	r24, 0x01	; 1
    2580:	91 05       	cpc	r25, r1
    2582:	09 f4       	brne	.+2      	; 0x2586 <TIMER1_voidInit+0x52>
    2584:	60 c0       	rjmp	.+192    	; 0x2646 <TIMER1_voidInit+0x112>
    2586:	2b 81       	ldd	r18, Y+3	; 0x03
    2588:	3c 81       	ldd	r19, Y+4	; 0x04
    258a:	22 30       	cpi	r18, 0x02	; 2
    258c:	31 05       	cpc	r19, r1
    258e:	0c f0       	brlt	.+2      	; 0x2592 <TIMER1_voidInit+0x5e>
    2590:	77 c0       	rjmp	.+238    	; 0x2680 <TIMER1_voidInit+0x14c>
    2592:	8b 81       	ldd	r24, Y+3	; 0x03
    2594:	9c 81       	ldd	r25, Y+4	; 0x04
    2596:	00 97       	sbiw	r24, 0x00	; 0
    2598:	c9 f1       	breq	.+114    	; 0x260c <TIMER1_voidInit+0xd8>
    259a:	ea c1       	rjmp	.+980    	; 0x2970 <TIMER1_voidInit+0x43c>
    259c:	2b 81       	ldd	r18, Y+3	; 0x03
    259e:	3c 81       	ldd	r19, Y+4	; 0x04
    25a0:	25 30       	cpi	r18, 0x05	; 5
    25a2:	31 05       	cpc	r19, r1
    25a4:	09 f4       	brne	.+2      	; 0x25a8 <TIMER1_voidInit+0x74>
    25a6:	c3 c0       	rjmp	.+390    	; 0x272e <TIMER1_voidInit+0x1fa>
    25a8:	8b 81       	ldd	r24, Y+3	; 0x03
    25aa:	9c 81       	ldd	r25, Y+4	; 0x04
    25ac:	86 30       	cpi	r24, 0x06	; 6
    25ae:	91 05       	cpc	r25, r1
    25b0:	0c f0       	brlt	.+2      	; 0x25b4 <TIMER1_voidInit+0x80>
    25b2:	da c0       	rjmp	.+436    	; 0x2768 <TIMER1_voidInit+0x234>
    25b4:	9f c0       	rjmp	.+318    	; 0x26f4 <TIMER1_voidInit+0x1c0>
    25b6:	2b 81       	ldd	r18, Y+3	; 0x03
    25b8:	3c 81       	ldd	r19, Y+4	; 0x04
    25ba:	2b 30       	cpi	r18, 0x0B	; 11
    25bc:	31 05       	cpc	r19, r1
    25be:	09 f4       	brne	.+2      	; 0x25c2 <TIMER1_voidInit+0x8e>
    25c0:	64 c1       	rjmp	.+712    	; 0x288a <TIMER1_voidInit+0x356>
    25c2:	8b 81       	ldd	r24, Y+3	; 0x03
    25c4:	9c 81       	ldd	r25, Y+4	; 0x04
    25c6:	8c 30       	cpi	r24, 0x0C	; 12
    25c8:	91 05       	cpc	r25, r1
    25ca:	6c f4       	brge	.+26     	; 0x25e6 <TIMER1_voidInit+0xb2>
    25cc:	2b 81       	ldd	r18, Y+3	; 0x03
    25ce:	3c 81       	ldd	r19, Y+4	; 0x04
    25d0:	29 30       	cpi	r18, 0x09	; 9
    25d2:	31 05       	cpc	r19, r1
    25d4:	09 f4       	brne	.+2      	; 0x25d8 <TIMER1_voidInit+0xa4>
    25d6:	1f c1       	rjmp	.+574    	; 0x2816 <TIMER1_voidInit+0x2e2>
    25d8:	8b 81       	ldd	r24, Y+3	; 0x03
    25da:	9c 81       	ldd	r25, Y+4	; 0x04
    25dc:	8a 30       	cpi	r24, 0x0A	; 10
    25de:	91 05       	cpc	r25, r1
    25e0:	0c f0       	brlt	.+2      	; 0x25e4 <TIMER1_voidInit+0xb0>
    25e2:	36 c1       	rjmp	.+620    	; 0x2850 <TIMER1_voidInit+0x31c>
    25e4:	fb c0       	rjmp	.+502    	; 0x27dc <TIMER1_voidInit+0x2a8>
    25e6:	2b 81       	ldd	r18, Y+3	; 0x03
    25e8:	3c 81       	ldd	r19, Y+4	; 0x04
    25ea:	2e 30       	cpi	r18, 0x0E	; 14
    25ec:	31 05       	cpc	r19, r1
    25ee:	09 f4       	brne	.+2      	; 0x25f2 <TIMER1_voidInit+0xbe>
    25f0:	86 c1       	rjmp	.+780    	; 0x28fe <TIMER1_voidInit+0x3ca>
    25f2:	8b 81       	ldd	r24, Y+3	; 0x03
    25f4:	9c 81       	ldd	r25, Y+4	; 0x04
    25f6:	8f 30       	cpi	r24, 0x0F	; 15
    25f8:	91 05       	cpc	r25, r1
    25fa:	09 f4       	brne	.+2      	; 0x25fe <TIMER1_voidInit+0xca>
    25fc:	9d c1       	rjmp	.+826    	; 0x2938 <TIMER1_voidInit+0x404>
    25fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2600:	3c 81       	ldd	r19, Y+4	; 0x04
    2602:	2c 30       	cpi	r18, 0x0C	; 12
    2604:	31 05       	cpc	r19, r1
    2606:	09 f4       	brne	.+2      	; 0x260a <TIMER1_voidInit+0xd6>
    2608:	5d c1       	rjmp	.+698    	; 0x28c4 <TIMER1_voidInit+0x390>
    260a:	b2 c1       	rjmp	.+868    	; 0x2970 <TIMER1_voidInit+0x43c>
	{
	case TIMER1_NORMAL_MODE:
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    260c:	af e4       	ldi	r26, 0x4F	; 79
    260e:	b0 e0       	ldi	r27, 0x00	; 0
    2610:	ef e4       	ldi	r30, 0x4F	; 79
    2612:	f0 e0       	ldi	r31, 0x00	; 0
    2614:	80 81       	ld	r24, Z
    2616:	8e 7f       	andi	r24, 0xFE	; 254
    2618:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    261a:	af e4       	ldi	r26, 0x4F	; 79
    261c:	b0 e0       	ldi	r27, 0x00	; 0
    261e:	ef e4       	ldi	r30, 0x4F	; 79
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	80 81       	ld	r24, Z
    2624:	8d 7f       	andi	r24, 0xFD	; 253
    2626:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    2628:	ae e4       	ldi	r26, 0x4E	; 78
    262a:	b0 e0       	ldi	r27, 0x00	; 0
    262c:	ee e4       	ldi	r30, 0x4E	; 78
    262e:	f0 e0       	ldi	r31, 0x00	; 0
    2630:	80 81       	ld	r24, Z
    2632:	87 7f       	andi	r24, 0xF7	; 247
    2634:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    2636:	ae e4       	ldi	r26, 0x4E	; 78
    2638:	b0 e0       	ldi	r27, 0x00	; 0
    263a:	ee e4       	ldi	r30, 0x4E	; 78
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	80 81       	ld	r24, Z
    2640:	8f 7e       	andi	r24, 0xEF	; 239
    2642:	8c 93       	st	X, r24
    2644:	95 c1       	rjmp	.+810    	; 0x2970 <TIMER1_voidInit+0x43c>
		break;
	case TIMER1_PHASE_CORRECT_PWM_8_BIT_MODE:
		SET_BIT(TCCR1A,TCCR1A_WGM10);
    2646:	af e4       	ldi	r26, 0x4F	; 79
    2648:	b0 e0       	ldi	r27, 0x00	; 0
    264a:	ef e4       	ldi	r30, 0x4F	; 79
    264c:	f0 e0       	ldi	r31, 0x00	; 0
    264e:	80 81       	ld	r24, Z
    2650:	81 60       	ori	r24, 0x01	; 1
    2652:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    2654:	af e4       	ldi	r26, 0x4F	; 79
    2656:	b0 e0       	ldi	r27, 0x00	; 0
    2658:	ef e4       	ldi	r30, 0x4F	; 79
    265a:	f0 e0       	ldi	r31, 0x00	; 0
    265c:	80 81       	ld	r24, Z
    265e:	8d 7f       	andi	r24, 0xFD	; 253
    2660:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    2662:	ae e4       	ldi	r26, 0x4E	; 78
    2664:	b0 e0       	ldi	r27, 0x00	; 0
    2666:	ee e4       	ldi	r30, 0x4E	; 78
    2668:	f0 e0       	ldi	r31, 0x00	; 0
    266a:	80 81       	ld	r24, Z
    266c:	87 7f       	andi	r24, 0xF7	; 247
    266e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    2670:	ae e4       	ldi	r26, 0x4E	; 78
    2672:	b0 e0       	ldi	r27, 0x00	; 0
    2674:	ee e4       	ldi	r30, 0x4E	; 78
    2676:	f0 e0       	ldi	r31, 0x00	; 0
    2678:	80 81       	ld	r24, Z
    267a:	8f 7e       	andi	r24, 0xEF	; 239
    267c:	8c 93       	st	X, r24
    267e:	78 c1       	rjmp	.+752    	; 0x2970 <TIMER1_voidInit+0x43c>
		break;
	case TIMER1_PHASE_CORRECT_PWM_9_BIT_MODE:
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    2680:	af e4       	ldi	r26, 0x4F	; 79
    2682:	b0 e0       	ldi	r27, 0x00	; 0
    2684:	ef e4       	ldi	r30, 0x4F	; 79
    2686:	f0 e0       	ldi	r31, 0x00	; 0
    2688:	80 81       	ld	r24, Z
    268a:	8e 7f       	andi	r24, 0xFE	; 254
    268c:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    268e:	af e4       	ldi	r26, 0x4F	; 79
    2690:	b0 e0       	ldi	r27, 0x00	; 0
    2692:	ef e4       	ldi	r30, 0x4F	; 79
    2694:	f0 e0       	ldi	r31, 0x00	; 0
    2696:	80 81       	ld	r24, Z
    2698:	82 60       	ori	r24, 0x02	; 2
    269a:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    269c:	ae e4       	ldi	r26, 0x4E	; 78
    269e:	b0 e0       	ldi	r27, 0x00	; 0
    26a0:	ee e4       	ldi	r30, 0x4E	; 78
    26a2:	f0 e0       	ldi	r31, 0x00	; 0
    26a4:	80 81       	ld	r24, Z
    26a6:	87 7f       	andi	r24, 0xF7	; 247
    26a8:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    26aa:	ae e4       	ldi	r26, 0x4E	; 78
    26ac:	b0 e0       	ldi	r27, 0x00	; 0
    26ae:	ee e4       	ldi	r30, 0x4E	; 78
    26b0:	f0 e0       	ldi	r31, 0x00	; 0
    26b2:	80 81       	ld	r24, Z
    26b4:	8f 7e       	andi	r24, 0xEF	; 239
    26b6:	8c 93       	st	X, r24
    26b8:	5b c1       	rjmp	.+694    	; 0x2970 <TIMER1_voidInit+0x43c>
		break;
	case TIMER1_PHASE_CORRECT_PWM_10_BIT_MODE:
		SET_BIT(TCCR1A,TCCR1A_WGM10);
    26ba:	af e4       	ldi	r26, 0x4F	; 79
    26bc:	b0 e0       	ldi	r27, 0x00	; 0
    26be:	ef e4       	ldi	r30, 0x4F	; 79
    26c0:	f0 e0       	ldi	r31, 0x00	; 0
    26c2:	80 81       	ld	r24, Z
    26c4:	81 60       	ori	r24, 0x01	; 1
    26c6:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    26c8:	af e4       	ldi	r26, 0x4F	; 79
    26ca:	b0 e0       	ldi	r27, 0x00	; 0
    26cc:	ef e4       	ldi	r30, 0x4F	; 79
    26ce:	f0 e0       	ldi	r31, 0x00	; 0
    26d0:	80 81       	ld	r24, Z
    26d2:	82 60       	ori	r24, 0x02	; 2
    26d4:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    26d6:	ae e4       	ldi	r26, 0x4E	; 78
    26d8:	b0 e0       	ldi	r27, 0x00	; 0
    26da:	ee e4       	ldi	r30, 0x4E	; 78
    26dc:	f0 e0       	ldi	r31, 0x00	; 0
    26de:	80 81       	ld	r24, Z
    26e0:	87 7f       	andi	r24, 0xF7	; 247
    26e2:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    26e4:	ae e4       	ldi	r26, 0x4E	; 78
    26e6:	b0 e0       	ldi	r27, 0x00	; 0
    26e8:	ee e4       	ldi	r30, 0x4E	; 78
    26ea:	f0 e0       	ldi	r31, 0x00	; 0
    26ec:	80 81       	ld	r24, Z
    26ee:	8f 7e       	andi	r24, 0xEF	; 239
    26f0:	8c 93       	st	X, r24
    26f2:	3e c1       	rjmp	.+636    	; 0x2970 <TIMER1_voidInit+0x43c>
		break;
	case TIMER1_CTC_OCR1A_MODE:
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    26f4:	af e4       	ldi	r26, 0x4F	; 79
    26f6:	b0 e0       	ldi	r27, 0x00	; 0
    26f8:	ef e4       	ldi	r30, 0x4F	; 79
    26fa:	f0 e0       	ldi	r31, 0x00	; 0
    26fc:	80 81       	ld	r24, Z
    26fe:	8e 7f       	andi	r24, 0xFE	; 254
    2700:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    2702:	af e4       	ldi	r26, 0x4F	; 79
    2704:	b0 e0       	ldi	r27, 0x00	; 0
    2706:	ef e4       	ldi	r30, 0x4F	; 79
    2708:	f0 e0       	ldi	r31, 0x00	; 0
    270a:	80 81       	ld	r24, Z
    270c:	8d 7f       	andi	r24, 0xFD	; 253
    270e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    2710:	ae e4       	ldi	r26, 0x4E	; 78
    2712:	b0 e0       	ldi	r27, 0x00	; 0
    2714:	ee e4       	ldi	r30, 0x4E	; 78
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	80 81       	ld	r24, Z
    271a:	88 60       	ori	r24, 0x08	; 8
    271c:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    271e:	ae e4       	ldi	r26, 0x4E	; 78
    2720:	b0 e0       	ldi	r27, 0x00	; 0
    2722:	ee e4       	ldi	r30, 0x4E	; 78
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	80 81       	ld	r24, Z
    2728:	8f 7e       	andi	r24, 0xEF	; 239
    272a:	8c 93       	st	X, r24
    272c:	21 c1       	rjmp	.+578    	; 0x2970 <TIMER1_voidInit+0x43c>
		break;
	case TIMER1_FAST_PWM_8_BIT_MODE:
		SET_BIT(TCCR1A,TCCR1A_WGM10);
    272e:	af e4       	ldi	r26, 0x4F	; 79
    2730:	b0 e0       	ldi	r27, 0x00	; 0
    2732:	ef e4       	ldi	r30, 0x4F	; 79
    2734:	f0 e0       	ldi	r31, 0x00	; 0
    2736:	80 81       	ld	r24, Z
    2738:	81 60       	ori	r24, 0x01	; 1
    273a:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    273c:	af e4       	ldi	r26, 0x4F	; 79
    273e:	b0 e0       	ldi	r27, 0x00	; 0
    2740:	ef e4       	ldi	r30, 0x4F	; 79
    2742:	f0 e0       	ldi	r31, 0x00	; 0
    2744:	80 81       	ld	r24, Z
    2746:	8d 7f       	andi	r24, 0xFD	; 253
    2748:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    274a:	ae e4       	ldi	r26, 0x4E	; 78
    274c:	b0 e0       	ldi	r27, 0x00	; 0
    274e:	ee e4       	ldi	r30, 0x4E	; 78
    2750:	f0 e0       	ldi	r31, 0x00	; 0
    2752:	80 81       	ld	r24, Z
    2754:	88 60       	ori	r24, 0x08	; 8
    2756:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    2758:	ae e4       	ldi	r26, 0x4E	; 78
    275a:	b0 e0       	ldi	r27, 0x00	; 0
    275c:	ee e4       	ldi	r30, 0x4E	; 78
    275e:	f0 e0       	ldi	r31, 0x00	; 0
    2760:	80 81       	ld	r24, Z
    2762:	8f 7e       	andi	r24, 0xEF	; 239
    2764:	8c 93       	st	X, r24
    2766:	04 c1       	rjmp	.+520    	; 0x2970 <TIMER1_voidInit+0x43c>
		break;
	case TIMER1_FAST_PWM_9_BIT_MODE:
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    2768:	af e4       	ldi	r26, 0x4F	; 79
    276a:	b0 e0       	ldi	r27, 0x00	; 0
    276c:	ef e4       	ldi	r30, 0x4F	; 79
    276e:	f0 e0       	ldi	r31, 0x00	; 0
    2770:	80 81       	ld	r24, Z
    2772:	8e 7f       	andi	r24, 0xFE	; 254
    2774:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    2776:	af e4       	ldi	r26, 0x4F	; 79
    2778:	b0 e0       	ldi	r27, 0x00	; 0
    277a:	ef e4       	ldi	r30, 0x4F	; 79
    277c:	f0 e0       	ldi	r31, 0x00	; 0
    277e:	80 81       	ld	r24, Z
    2780:	82 60       	ori	r24, 0x02	; 2
    2782:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    2784:	ae e4       	ldi	r26, 0x4E	; 78
    2786:	b0 e0       	ldi	r27, 0x00	; 0
    2788:	ee e4       	ldi	r30, 0x4E	; 78
    278a:	f0 e0       	ldi	r31, 0x00	; 0
    278c:	80 81       	ld	r24, Z
    278e:	88 60       	ori	r24, 0x08	; 8
    2790:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    2792:	ae e4       	ldi	r26, 0x4E	; 78
    2794:	b0 e0       	ldi	r27, 0x00	; 0
    2796:	ee e4       	ldi	r30, 0x4E	; 78
    2798:	f0 e0       	ldi	r31, 0x00	; 0
    279a:	80 81       	ld	r24, Z
    279c:	8f 7e       	andi	r24, 0xEF	; 239
    279e:	8c 93       	st	X, r24
    27a0:	e7 c0       	rjmp	.+462    	; 0x2970 <TIMER1_voidInit+0x43c>
		break;
	case TIMER1_FAST_PWM_10_BIT_MODE:
		SET_BIT(TCCR1A,TCCR1A_WGM10);
    27a2:	af e4       	ldi	r26, 0x4F	; 79
    27a4:	b0 e0       	ldi	r27, 0x00	; 0
    27a6:	ef e4       	ldi	r30, 0x4F	; 79
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	80 81       	ld	r24, Z
    27ac:	81 60       	ori	r24, 0x01	; 1
    27ae:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    27b0:	af e4       	ldi	r26, 0x4F	; 79
    27b2:	b0 e0       	ldi	r27, 0x00	; 0
    27b4:	ef e4       	ldi	r30, 0x4F	; 79
    27b6:	f0 e0       	ldi	r31, 0x00	; 0
    27b8:	80 81       	ld	r24, Z
    27ba:	82 60       	ori	r24, 0x02	; 2
    27bc:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    27be:	ae e4       	ldi	r26, 0x4E	; 78
    27c0:	b0 e0       	ldi	r27, 0x00	; 0
    27c2:	ee e4       	ldi	r30, 0x4E	; 78
    27c4:	f0 e0       	ldi	r31, 0x00	; 0
    27c6:	80 81       	ld	r24, Z
    27c8:	88 60       	ori	r24, 0x08	; 8
    27ca:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    27cc:	ae e4       	ldi	r26, 0x4E	; 78
    27ce:	b0 e0       	ldi	r27, 0x00	; 0
    27d0:	ee e4       	ldi	r30, 0x4E	; 78
    27d2:	f0 e0       	ldi	r31, 0x00	; 0
    27d4:	80 81       	ld	r24, Z
    27d6:	8f 7e       	andi	r24, 0xEF	; 239
    27d8:	8c 93       	st	X, r24
    27da:	ca c0       	rjmp	.+404    	; 0x2970 <TIMER1_voidInit+0x43c>
		break;
	case TIMER1_PWM_PHASE_FREQ_CORRECT_ICR1_MODE:
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    27dc:	af e4       	ldi	r26, 0x4F	; 79
    27de:	b0 e0       	ldi	r27, 0x00	; 0
    27e0:	ef e4       	ldi	r30, 0x4F	; 79
    27e2:	f0 e0       	ldi	r31, 0x00	; 0
    27e4:	80 81       	ld	r24, Z
    27e6:	8e 7f       	andi	r24, 0xFE	; 254
    27e8:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    27ea:	af e4       	ldi	r26, 0x4F	; 79
    27ec:	b0 e0       	ldi	r27, 0x00	; 0
    27ee:	ef e4       	ldi	r30, 0x4F	; 79
    27f0:	f0 e0       	ldi	r31, 0x00	; 0
    27f2:	80 81       	ld	r24, Z
    27f4:	8d 7f       	andi	r24, 0xFD	; 253
    27f6:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    27f8:	ae e4       	ldi	r26, 0x4E	; 78
    27fa:	b0 e0       	ldi	r27, 0x00	; 0
    27fc:	ee e4       	ldi	r30, 0x4E	; 78
    27fe:	f0 e0       	ldi	r31, 0x00	; 0
    2800:	80 81       	ld	r24, Z
    2802:	87 7f       	andi	r24, 0xF7	; 247
    2804:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    2806:	ae e4       	ldi	r26, 0x4E	; 78
    2808:	b0 e0       	ldi	r27, 0x00	; 0
    280a:	ee e4       	ldi	r30, 0x4E	; 78
    280c:	f0 e0       	ldi	r31, 0x00	; 0
    280e:	80 81       	ld	r24, Z
    2810:	80 61       	ori	r24, 0x10	; 16
    2812:	8c 93       	st	X, r24
    2814:	ad c0       	rjmp	.+346    	; 0x2970 <TIMER1_voidInit+0x43c>
		break;
	case TIMER1_PWM_PHASE_FREQ_CORRECT_OCR1A_NODE:
		SET_BIT(TCCR1A,TCCR1A_WGM10);
    2816:	af e4       	ldi	r26, 0x4F	; 79
    2818:	b0 e0       	ldi	r27, 0x00	; 0
    281a:	ef e4       	ldi	r30, 0x4F	; 79
    281c:	f0 e0       	ldi	r31, 0x00	; 0
    281e:	80 81       	ld	r24, Z
    2820:	81 60       	ori	r24, 0x01	; 1
    2822:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    2824:	af e4       	ldi	r26, 0x4F	; 79
    2826:	b0 e0       	ldi	r27, 0x00	; 0
    2828:	ef e4       	ldi	r30, 0x4F	; 79
    282a:	f0 e0       	ldi	r31, 0x00	; 0
    282c:	80 81       	ld	r24, Z
    282e:	8d 7f       	andi	r24, 0xFD	; 253
    2830:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    2832:	ae e4       	ldi	r26, 0x4E	; 78
    2834:	b0 e0       	ldi	r27, 0x00	; 0
    2836:	ee e4       	ldi	r30, 0x4E	; 78
    2838:	f0 e0       	ldi	r31, 0x00	; 0
    283a:	80 81       	ld	r24, Z
    283c:	87 7f       	andi	r24, 0xF7	; 247
    283e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    2840:	ae e4       	ldi	r26, 0x4E	; 78
    2842:	b0 e0       	ldi	r27, 0x00	; 0
    2844:	ee e4       	ldi	r30, 0x4E	; 78
    2846:	f0 e0       	ldi	r31, 0x00	; 0
    2848:	80 81       	ld	r24, Z
    284a:	80 61       	ori	r24, 0x10	; 16
    284c:	8c 93       	st	X, r24
    284e:	90 c0       	rjmp	.+288    	; 0x2970 <TIMER1_voidInit+0x43c>
		break;
	case TIMER1_PHASE_CORRECT_PWM_ICR1_MODE:
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    2850:	af e4       	ldi	r26, 0x4F	; 79
    2852:	b0 e0       	ldi	r27, 0x00	; 0
    2854:	ef e4       	ldi	r30, 0x4F	; 79
    2856:	f0 e0       	ldi	r31, 0x00	; 0
    2858:	80 81       	ld	r24, Z
    285a:	8e 7f       	andi	r24, 0xFE	; 254
    285c:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    285e:	af e4       	ldi	r26, 0x4F	; 79
    2860:	b0 e0       	ldi	r27, 0x00	; 0
    2862:	ef e4       	ldi	r30, 0x4F	; 79
    2864:	f0 e0       	ldi	r31, 0x00	; 0
    2866:	80 81       	ld	r24, Z
    2868:	82 60       	ori	r24, 0x02	; 2
    286a:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    286c:	ae e4       	ldi	r26, 0x4E	; 78
    286e:	b0 e0       	ldi	r27, 0x00	; 0
    2870:	ee e4       	ldi	r30, 0x4E	; 78
    2872:	f0 e0       	ldi	r31, 0x00	; 0
    2874:	80 81       	ld	r24, Z
    2876:	87 7f       	andi	r24, 0xF7	; 247
    2878:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    287a:	ae e4       	ldi	r26, 0x4E	; 78
    287c:	b0 e0       	ldi	r27, 0x00	; 0
    287e:	ee e4       	ldi	r30, 0x4E	; 78
    2880:	f0 e0       	ldi	r31, 0x00	; 0
    2882:	80 81       	ld	r24, Z
    2884:	80 61       	ori	r24, 0x10	; 16
    2886:	8c 93       	st	X, r24
    2888:	73 c0       	rjmp	.+230    	; 0x2970 <TIMER1_voidInit+0x43c>
		break;
	case TIMER1_PHASE_CORRECT_PWM_OCR1A_MODE:
		SET_BIT(TCCR1A,TCCR1A_WGM10);
    288a:	af e4       	ldi	r26, 0x4F	; 79
    288c:	b0 e0       	ldi	r27, 0x00	; 0
    288e:	ef e4       	ldi	r30, 0x4F	; 79
    2890:	f0 e0       	ldi	r31, 0x00	; 0
    2892:	80 81       	ld	r24, Z
    2894:	81 60       	ori	r24, 0x01	; 1
    2896:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    2898:	af e4       	ldi	r26, 0x4F	; 79
    289a:	b0 e0       	ldi	r27, 0x00	; 0
    289c:	ef e4       	ldi	r30, 0x4F	; 79
    289e:	f0 e0       	ldi	r31, 0x00	; 0
    28a0:	80 81       	ld	r24, Z
    28a2:	82 60       	ori	r24, 0x02	; 2
    28a4:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    28a6:	ae e4       	ldi	r26, 0x4E	; 78
    28a8:	b0 e0       	ldi	r27, 0x00	; 0
    28aa:	ee e4       	ldi	r30, 0x4E	; 78
    28ac:	f0 e0       	ldi	r31, 0x00	; 0
    28ae:	80 81       	ld	r24, Z
    28b0:	87 7f       	andi	r24, 0xF7	; 247
    28b2:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    28b4:	ae e4       	ldi	r26, 0x4E	; 78
    28b6:	b0 e0       	ldi	r27, 0x00	; 0
    28b8:	ee e4       	ldi	r30, 0x4E	; 78
    28ba:	f0 e0       	ldi	r31, 0x00	; 0
    28bc:	80 81       	ld	r24, Z
    28be:	80 61       	ori	r24, 0x10	; 16
    28c0:	8c 93       	st	X, r24
    28c2:	56 c0       	rjmp	.+172    	; 0x2970 <TIMER1_voidInit+0x43c>
		break;
	case TIMER1_CTC_ICR1_MODE:
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    28c4:	af e4       	ldi	r26, 0x4F	; 79
    28c6:	b0 e0       	ldi	r27, 0x00	; 0
    28c8:	ef e4       	ldi	r30, 0x4F	; 79
    28ca:	f0 e0       	ldi	r31, 0x00	; 0
    28cc:	80 81       	ld	r24, Z
    28ce:	8e 7f       	andi	r24, 0xFE	; 254
    28d0:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    28d2:	af e4       	ldi	r26, 0x4F	; 79
    28d4:	b0 e0       	ldi	r27, 0x00	; 0
    28d6:	ef e4       	ldi	r30, 0x4F	; 79
    28d8:	f0 e0       	ldi	r31, 0x00	; 0
    28da:	80 81       	ld	r24, Z
    28dc:	8d 7f       	andi	r24, 0xFD	; 253
    28de:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    28e0:	ae e4       	ldi	r26, 0x4E	; 78
    28e2:	b0 e0       	ldi	r27, 0x00	; 0
    28e4:	ee e4       	ldi	r30, 0x4E	; 78
    28e6:	f0 e0       	ldi	r31, 0x00	; 0
    28e8:	80 81       	ld	r24, Z
    28ea:	88 60       	ori	r24, 0x08	; 8
    28ec:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    28ee:	ae e4       	ldi	r26, 0x4E	; 78
    28f0:	b0 e0       	ldi	r27, 0x00	; 0
    28f2:	ee e4       	ldi	r30, 0x4E	; 78
    28f4:	f0 e0       	ldi	r31, 0x00	; 0
    28f6:	80 81       	ld	r24, Z
    28f8:	80 61       	ori	r24, 0x10	; 16
    28fa:	8c 93       	st	X, r24
    28fc:	39 c0       	rjmp	.+114    	; 0x2970 <TIMER1_voidInit+0x43c>
		break;
	case TIMER1_FAST_PWM_ICR1_MODE:
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    28fe:	af e4       	ldi	r26, 0x4F	; 79
    2900:	b0 e0       	ldi	r27, 0x00	; 0
    2902:	ef e4       	ldi	r30, 0x4F	; 79
    2904:	f0 e0       	ldi	r31, 0x00	; 0
    2906:	80 81       	ld	r24, Z
    2908:	8e 7f       	andi	r24, 0xFE	; 254
    290a:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    290c:	af e4       	ldi	r26, 0x4F	; 79
    290e:	b0 e0       	ldi	r27, 0x00	; 0
    2910:	ef e4       	ldi	r30, 0x4F	; 79
    2912:	f0 e0       	ldi	r31, 0x00	; 0
    2914:	80 81       	ld	r24, Z
    2916:	82 60       	ori	r24, 0x02	; 2
    2918:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    291a:	ae e4       	ldi	r26, 0x4E	; 78
    291c:	b0 e0       	ldi	r27, 0x00	; 0
    291e:	ee e4       	ldi	r30, 0x4E	; 78
    2920:	f0 e0       	ldi	r31, 0x00	; 0
    2922:	80 81       	ld	r24, Z
    2924:	88 60       	ori	r24, 0x08	; 8
    2926:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    2928:	ae e4       	ldi	r26, 0x4E	; 78
    292a:	b0 e0       	ldi	r27, 0x00	; 0
    292c:	ee e4       	ldi	r30, 0x4E	; 78
    292e:	f0 e0       	ldi	r31, 0x00	; 0
    2930:	80 81       	ld	r24, Z
    2932:	80 61       	ori	r24, 0x10	; 16
    2934:	8c 93       	st	X, r24
    2936:	1c c0       	rjmp	.+56     	; 0x2970 <TIMER1_voidInit+0x43c>
		break;
	case TIMER1_FAST_PWM_OCR1A_MODE:
		SET_BIT(TCCR1A,TCCR1A_WGM10);
    2938:	af e4       	ldi	r26, 0x4F	; 79
    293a:	b0 e0       	ldi	r27, 0x00	; 0
    293c:	ef e4       	ldi	r30, 0x4F	; 79
    293e:	f0 e0       	ldi	r31, 0x00	; 0
    2940:	80 81       	ld	r24, Z
    2942:	81 60       	ori	r24, 0x01	; 1
    2944:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    2946:	af e4       	ldi	r26, 0x4F	; 79
    2948:	b0 e0       	ldi	r27, 0x00	; 0
    294a:	ef e4       	ldi	r30, 0x4F	; 79
    294c:	f0 e0       	ldi	r31, 0x00	; 0
    294e:	80 81       	ld	r24, Z
    2950:	82 60       	ori	r24, 0x02	; 2
    2952:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    2954:	ae e4       	ldi	r26, 0x4E	; 78
    2956:	b0 e0       	ldi	r27, 0x00	; 0
    2958:	ee e4       	ldi	r30, 0x4E	; 78
    295a:	f0 e0       	ldi	r31, 0x00	; 0
    295c:	80 81       	ld	r24, Z
    295e:	88 60       	ori	r24, 0x08	; 8
    2960:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    2962:	ae e4       	ldi	r26, 0x4E	; 78
    2964:	b0 e0       	ldi	r27, 0x00	; 0
    2966:	ee e4       	ldi	r30, 0x4E	; 78
    2968:	f0 e0       	ldi	r31, 0x00	; 0
    296a:	80 81       	ld	r24, Z
    296c:	80 61       	ori	r24, 0x10	; 16
    296e:	8c 93       	st	X, r24
		break;
	default:	 break;
	}

	/*Set Prescaler division factor*/
	TCCR1B &=PRESCALER_MASK;
    2970:	ae e4       	ldi	r26, 0x4E	; 78
    2972:	b0 e0       	ldi	r27, 0x00	; 0
    2974:	ee e4       	ldi	r30, 0x4E	; 78
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	80 81       	ld	r24, Z
    297a:	88 7f       	andi	r24, 0xF8	; 248
    297c:	8c 93       	st	X, r24
	TCCR1B |=Copy_u8Prescaler;
    297e:	ae e4       	ldi	r26, 0x4E	; 78
    2980:	b0 e0       	ldi	r27, 0x00	; 0
    2982:	ee e4       	ldi	r30, 0x4E	; 78
    2984:	f0 e0       	ldi	r31, 0x00	; 0
    2986:	90 81       	ld	r25, Z
    2988:	8a 81       	ldd	r24, Y+2	; 0x02
    298a:	89 2b       	or	r24, r25
    298c:	8c 93       	st	X, r24
}
    298e:	0f 90       	pop	r0
    2990:	0f 90       	pop	r0
    2992:	0f 90       	pop	r0
    2994:	0f 90       	pop	r0
    2996:	cf 91       	pop	r28
    2998:	df 91       	pop	r29
    299a:	08 95       	ret

0000299c <TIMER1_voidSetCompareOutputMode>:
 * 		  2- Copy_u8Channel : a- Compare Output Mode for Channel A COM1A1:0
 * 		  					  b- Compare Output Mode for Channel B COM1B1:0
 * Output: void
 * 	*/
void TIMER1_voidSetCompareOutputMode(u8 Copy_u8CompOutputMode, u8 Copy_u8Channel)
{
    299c:	df 93       	push	r29
    299e:	cf 93       	push	r28
    29a0:	cd b7       	in	r28, 0x3d	; 61
    29a2:	de b7       	in	r29, 0x3e	; 62
    29a4:	2a 97       	sbiw	r28, 0x0a	; 10
    29a6:	0f b6       	in	r0, 0x3f	; 63
    29a8:	f8 94       	cli
    29aa:	de bf       	out	0x3e, r29	; 62
    29ac:	0f be       	out	0x3f, r0	; 63
    29ae:	cd bf       	out	0x3d, r28	; 61
    29b0:	89 83       	std	Y+1, r24	; 0x01
    29b2:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8CompOutputMode)
    29b4:	89 81       	ldd	r24, Y+1	; 0x01
    29b6:	28 2f       	mov	r18, r24
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	3a 87       	std	Y+10, r19	; 0x0a
    29bc:	29 87       	std	Y+9, r18	; 0x09
    29be:	89 85       	ldd	r24, Y+9	; 0x09
    29c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29c2:	81 30       	cpi	r24, 0x01	; 1
    29c4:	91 05       	cpc	r25, r1
    29c6:	c1 f1       	breq	.+112    	; 0x2a38 <TIMER1_voidSetCompareOutputMode+0x9c>
    29c8:	29 85       	ldd	r18, Y+9	; 0x09
    29ca:	3a 85       	ldd	r19, Y+10	; 0x0a
    29cc:	22 30       	cpi	r18, 0x02	; 2
    29ce:	31 05       	cpc	r19, r1
    29d0:	09 f4       	brne	.+2      	; 0x29d4 <TIMER1_voidSetCompareOutputMode+0x38>
    29d2:	5f c0       	rjmp	.+190    	; 0x2a92 <TIMER1_voidSetCompareOutputMode+0xf6>
    29d4:	89 85       	ldd	r24, Y+9	; 0x09
    29d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d8:	00 97       	sbiw	r24, 0x00	; 0
    29da:	09 f0       	breq	.+2      	; 0x29de <TIMER1_voidSetCompareOutputMode+0x42>
    29dc:	86 c0       	rjmp	.+268    	; 0x2aea <TIMER1_voidSetCompareOutputMode+0x14e>
	{
	case NORMAL_OPERATION_MODE:
		switch(Copy_u8Channel)
    29de:	8a 81       	ldd	r24, Y+2	; 0x02
    29e0:	28 2f       	mov	r18, r24
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	38 87       	std	Y+8, r19	; 0x08
    29e6:	2f 83       	std	Y+7, r18	; 0x07
    29e8:	8f 81       	ldd	r24, Y+7	; 0x07
    29ea:	98 85       	ldd	r25, Y+8	; 0x08
    29ec:	00 97       	sbiw	r24, 0x00	; 0
    29ee:	31 f0       	breq	.+12     	; 0x29fc <TIMER1_voidSetCompareOutputMode+0x60>
    29f0:	2f 81       	ldd	r18, Y+7	; 0x07
    29f2:	38 85       	ldd	r19, Y+8	; 0x08
    29f4:	21 30       	cpi	r18, 0x01	; 1
    29f6:	31 05       	cpc	r19, r1
    29f8:	81 f0       	breq	.+32     	; 0x2a1a <TIMER1_voidSetCompareOutputMode+0x7e>
    29fa:	77 c0       	rjmp	.+238    	; 0x2aea <TIMER1_voidSetCompareOutputMode+0x14e>
		{
		case TIMER1_OCR1A:
			CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    29fc:	af e4       	ldi	r26, 0x4F	; 79
    29fe:	b0 e0       	ldi	r27, 0x00	; 0
    2a00:	ef e4       	ldi	r30, 0x4F	; 79
    2a02:	f0 e0       	ldi	r31, 0x00	; 0
    2a04:	80 81       	ld	r24, Z
    2a06:	8f 7b       	andi	r24, 0xBF	; 191
    2a08:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    2a0a:	af e4       	ldi	r26, 0x4F	; 79
    2a0c:	b0 e0       	ldi	r27, 0x00	; 0
    2a0e:	ef e4       	ldi	r30, 0x4F	; 79
    2a10:	f0 e0       	ldi	r31, 0x00	; 0
    2a12:	80 81       	ld	r24, Z
    2a14:	8f 77       	andi	r24, 0x7F	; 127
    2a16:	8c 93       	st	X, r24
    2a18:	68 c0       	rjmp	.+208    	; 0x2aea <TIMER1_voidSetCompareOutputMode+0x14e>
			break;
		case TIMER1_OCR1B:
			CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    2a1a:	af e4       	ldi	r26, 0x4F	; 79
    2a1c:	b0 e0       	ldi	r27, 0x00	; 0
    2a1e:	ef e4       	ldi	r30, 0x4F	; 79
    2a20:	f0 e0       	ldi	r31, 0x00	; 0
    2a22:	80 81       	ld	r24, Z
    2a24:	8f 7e       	andi	r24, 0xEF	; 239
    2a26:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    2a28:	af e4       	ldi	r26, 0x4F	; 79
    2a2a:	b0 e0       	ldi	r27, 0x00	; 0
    2a2c:	ef e4       	ldi	r30, 0x4F	; 79
    2a2e:	f0 e0       	ldi	r31, 0x00	; 0
    2a30:	80 81       	ld	r24, Z
    2a32:	8f 7d       	andi	r24, 0xDF	; 223
    2a34:	8c 93       	st	X, r24
    2a36:	59 c0       	rjmp	.+178    	; 0x2aea <TIMER1_voidSetCompareOutputMode+0x14e>
		default: break;
		}
		break;

		case NON_INVERTED_MODE:
			switch(Copy_u8Channel)
    2a38:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3a:	28 2f       	mov	r18, r24
    2a3c:	30 e0       	ldi	r19, 0x00	; 0
    2a3e:	3e 83       	std	Y+6, r19	; 0x06
    2a40:	2d 83       	std	Y+5, r18	; 0x05
    2a42:	8d 81       	ldd	r24, Y+5	; 0x05
    2a44:	9e 81       	ldd	r25, Y+6	; 0x06
    2a46:	00 97       	sbiw	r24, 0x00	; 0
    2a48:	31 f0       	breq	.+12     	; 0x2a56 <TIMER1_voidSetCompareOutputMode+0xba>
    2a4a:	2d 81       	ldd	r18, Y+5	; 0x05
    2a4c:	3e 81       	ldd	r19, Y+6	; 0x06
    2a4e:	21 30       	cpi	r18, 0x01	; 1
    2a50:	31 05       	cpc	r19, r1
    2a52:	81 f0       	breq	.+32     	; 0x2a74 <TIMER1_voidSetCompareOutputMode+0xd8>
    2a54:	4a c0       	rjmp	.+148    	; 0x2aea <TIMER1_voidSetCompareOutputMode+0x14e>
			{
			case TIMER1_OCR1A:
				CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    2a56:	af e4       	ldi	r26, 0x4F	; 79
    2a58:	b0 e0       	ldi	r27, 0x00	; 0
    2a5a:	ef e4       	ldi	r30, 0x4F	; 79
    2a5c:	f0 e0       	ldi	r31, 0x00	; 0
    2a5e:	80 81       	ld	r24, Z
    2a60:	8f 7b       	andi	r24, 0xBF	; 191
    2a62:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,TCCR1A_COM1A1);
    2a64:	af e4       	ldi	r26, 0x4F	; 79
    2a66:	b0 e0       	ldi	r27, 0x00	; 0
    2a68:	ef e4       	ldi	r30, 0x4F	; 79
    2a6a:	f0 e0       	ldi	r31, 0x00	; 0
    2a6c:	80 81       	ld	r24, Z
    2a6e:	80 68       	ori	r24, 0x80	; 128
    2a70:	8c 93       	st	X, r24
    2a72:	3b c0       	rjmp	.+118    	; 0x2aea <TIMER1_voidSetCompareOutputMode+0x14e>
				break;
			case TIMER1_OCR1B:
				CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    2a74:	af e4       	ldi	r26, 0x4F	; 79
    2a76:	b0 e0       	ldi	r27, 0x00	; 0
    2a78:	ef e4       	ldi	r30, 0x4F	; 79
    2a7a:	f0 e0       	ldi	r31, 0x00	; 0
    2a7c:	80 81       	ld	r24, Z
    2a7e:	8f 7e       	andi	r24, 0xEF	; 239
    2a80:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,TCCR1A_COM1B1);
    2a82:	af e4       	ldi	r26, 0x4F	; 79
    2a84:	b0 e0       	ldi	r27, 0x00	; 0
    2a86:	ef e4       	ldi	r30, 0x4F	; 79
    2a88:	f0 e0       	ldi	r31, 0x00	; 0
    2a8a:	80 81       	ld	r24, Z
    2a8c:	80 62       	ori	r24, 0x20	; 32
    2a8e:	8c 93       	st	X, r24
    2a90:	2c c0       	rjmp	.+88     	; 0x2aea <TIMER1_voidSetCompareOutputMode+0x14e>
			default : break;
			}
			break;

			case INVERTED_MODE:
				switch(Copy_u8Channel)
    2a92:	8a 81       	ldd	r24, Y+2	; 0x02
    2a94:	28 2f       	mov	r18, r24
    2a96:	30 e0       	ldi	r19, 0x00	; 0
    2a98:	3c 83       	std	Y+4, r19	; 0x04
    2a9a:	2b 83       	std	Y+3, r18	; 0x03
    2a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a9e:	9c 81       	ldd	r25, Y+4	; 0x04
    2aa0:	00 97       	sbiw	r24, 0x00	; 0
    2aa2:	31 f0       	breq	.+12     	; 0x2ab0 <TIMER1_voidSetCompareOutputMode+0x114>
    2aa4:	2b 81       	ldd	r18, Y+3	; 0x03
    2aa6:	3c 81       	ldd	r19, Y+4	; 0x04
    2aa8:	21 30       	cpi	r18, 0x01	; 1
    2aaa:	31 05       	cpc	r19, r1
    2aac:	81 f0       	breq	.+32     	; 0x2ace <TIMER1_voidSetCompareOutputMode+0x132>
    2aae:	1d c0       	rjmp	.+58     	; 0x2aea <TIMER1_voidSetCompareOutputMode+0x14e>
				{
				case TIMER1_OCR1A:
					SET_BIT(TCCR1A,TCCR1A_COM1A0);
    2ab0:	af e4       	ldi	r26, 0x4F	; 79
    2ab2:	b0 e0       	ldi	r27, 0x00	; 0
    2ab4:	ef e4       	ldi	r30, 0x4F	; 79
    2ab6:	f0 e0       	ldi	r31, 0x00	; 0
    2ab8:	80 81       	ld	r24, Z
    2aba:	80 64       	ori	r24, 0x40	; 64
    2abc:	8c 93       	st	X, r24
					SET_BIT(TCCR1A,TCCR1A_COM1A1);
    2abe:	af e4       	ldi	r26, 0x4F	; 79
    2ac0:	b0 e0       	ldi	r27, 0x00	; 0
    2ac2:	ef e4       	ldi	r30, 0x4F	; 79
    2ac4:	f0 e0       	ldi	r31, 0x00	; 0
    2ac6:	80 81       	ld	r24, Z
    2ac8:	80 68       	ori	r24, 0x80	; 128
    2aca:	8c 93       	st	X, r24
    2acc:	0e c0       	rjmp	.+28     	; 0x2aea <TIMER1_voidSetCompareOutputMode+0x14e>
					break;
				case TIMER1_OCR1B:
					SET_BIT(TCCR1A,TCCR1A_COM1B0);
    2ace:	af e4       	ldi	r26, 0x4F	; 79
    2ad0:	b0 e0       	ldi	r27, 0x00	; 0
    2ad2:	ef e4       	ldi	r30, 0x4F	; 79
    2ad4:	f0 e0       	ldi	r31, 0x00	; 0
    2ad6:	80 81       	ld	r24, Z
    2ad8:	80 61       	ori	r24, 0x10	; 16
    2ada:	8c 93       	st	X, r24
					SET_BIT(TCCR1A,TCCR1A_COM1B1);
    2adc:	af e4       	ldi	r26, 0x4F	; 79
    2ade:	b0 e0       	ldi	r27, 0x00	; 0
    2ae0:	ef e4       	ldi	r30, 0x4F	; 79
    2ae2:	f0 e0       	ldi	r31, 0x00	; 0
    2ae4:	80 81       	ld	r24, Z
    2ae6:	80 62       	ori	r24, 0x20	; 32
    2ae8:	8c 93       	st	X, r24
				}
				break;

				default : break;
	}
}
    2aea:	2a 96       	adiw	r28, 0x0a	; 10
    2aec:	0f b6       	in	r0, 0x3f	; 63
    2aee:	f8 94       	cli
    2af0:	de bf       	out	0x3e, r29	; 62
    2af2:	0f be       	out	0x3f, r0	; 63
    2af4:	cd bf       	out	0x3d, r28	; 61
    2af6:	cf 91       	pop	r28
    2af8:	df 91       	pop	r29
    2afa:	08 95       	ret

00002afc <TIMER1_voidSetChannelACompMatchValue>:


void TIMER1_voidSetChannelACompMatchValue(u16 Copy_u16Value)
{
    2afc:	df 93       	push	r29
    2afe:	cf 93       	push	r28
    2b00:	00 d0       	rcall	.+0      	; 0x2b02 <TIMER1_voidSetChannelACompMatchValue+0x6>
    2b02:	cd b7       	in	r28, 0x3d	; 61
    2b04:	de b7       	in	r29, 0x3e	; 62
    2b06:	9a 83       	std	Y+2, r25	; 0x02
    2b08:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=Copy_u16Value;
    2b0a:	ea e4       	ldi	r30, 0x4A	; 74
    2b0c:	f0 e0       	ldi	r31, 0x00	; 0
    2b0e:	89 81       	ldd	r24, Y+1	; 0x01
    2b10:	9a 81       	ldd	r25, Y+2	; 0x02
    2b12:	91 83       	std	Z+1, r25	; 0x01
    2b14:	80 83       	st	Z, r24
}
    2b16:	0f 90       	pop	r0
    2b18:	0f 90       	pop	r0
    2b1a:	cf 91       	pop	r28
    2b1c:	df 91       	pop	r29
    2b1e:	08 95       	ret

00002b20 <TIMER1_voidSetChannelBCompMatchValue>:

void TIMER1_voidSetChannelBCompMatchValue(u16 Copy_u16Value)
{
    2b20:	df 93       	push	r29
    2b22:	cf 93       	push	r28
    2b24:	00 d0       	rcall	.+0      	; 0x2b26 <TIMER1_voidSetChannelBCompMatchValue+0x6>
    2b26:	cd b7       	in	r28, 0x3d	; 61
    2b28:	de b7       	in	r29, 0x3e	; 62
    2b2a:	9a 83       	std	Y+2, r25	; 0x02
    2b2c:	89 83       	std	Y+1, r24	; 0x01
	OCR1B=Copy_u16Value;
    2b2e:	e8 e4       	ldi	r30, 0x48	; 72
    2b30:	f0 e0       	ldi	r31, 0x00	; 0
    2b32:	89 81       	ldd	r24, Y+1	; 0x01
    2b34:	9a 81       	ldd	r25, Y+2	; 0x02
    2b36:	91 83       	std	Z+1, r25	; 0x01
    2b38:	80 83       	st	Z, r24
}
    2b3a:	0f 90       	pop	r0
    2b3c:	0f 90       	pop	r0
    2b3e:	cf 91       	pop	r28
    2b40:	df 91       	pop	r29
    2b42:	08 95       	ret

00002b44 <TIMER1_voidSetTimerValue>:

void TIMER1_voidSetTimerValue(u16 Copy_u16Value)
{
    2b44:	df 93       	push	r29
    2b46:	cf 93       	push	r28
    2b48:	00 d0       	rcall	.+0      	; 0x2b4a <TIMER1_voidSetTimerValue+0x6>
    2b4a:	cd b7       	in	r28, 0x3d	; 61
    2b4c:	de b7       	in	r29, 0x3e	; 62
    2b4e:	9a 83       	std	Y+2, r25	; 0x02
    2b50:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=Copy_u16Value;
    2b52:	ec e4       	ldi	r30, 0x4C	; 76
    2b54:	f0 e0       	ldi	r31, 0x00	; 0
    2b56:	89 81       	ldd	r24, Y+1	; 0x01
    2b58:	9a 81       	ldd	r25, Y+2	; 0x02
    2b5a:	91 83       	std	Z+1, r25	; 0x01
    2b5c:	80 83       	st	Z, r24
}
    2b5e:	0f 90       	pop	r0
    2b60:	0f 90       	pop	r0
    2b62:	cf 91       	pop	r28
    2b64:	df 91       	pop	r29
    2b66:	08 95       	ret

00002b68 <TIMER1_u16ReadTimerValue>:

u16 TIMER1_u16ReadTimerValue(void)
{
    2b68:	df 93       	push	r29
    2b6a:	cf 93       	push	r28
    2b6c:	cd b7       	in	r28, 0x3d	; 61
    2b6e:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    2b70:	ec e4       	ldi	r30, 0x4C	; 76
    2b72:	f0 e0       	ldi	r31, 0x00	; 0
    2b74:	80 81       	ld	r24, Z
    2b76:	91 81       	ldd	r25, Z+1	; 0x01
}
    2b78:	cf 91       	pop	r28
    2b7a:	df 91       	pop	r29
    2b7c:	08 95       	ret

00002b7e <PWM1_voidInit>:

void PWM1_voidInit(void)
{
    2b7e:	df 93       	push	r29
    2b80:	cf 93       	push	r28
    2b82:	cd b7       	in	r28, 0x3d	; 61
    2b84:	de b7       	in	r29, 0x3e	; 62
	TIMER1_voidInit(TIMER1_FAST_PWM_ICR1_MODE,DIVIDE_BY_8);
    2b86:	8e e0       	ldi	r24, 0x0E	; 14
    2b88:	62 e0       	ldi	r22, 0x02	; 2
    2b8a:	0e 94 9a 12 	call	0x2534	; 0x2534 <TIMER1_voidInit>
	TIMER1_voidSetCompareOutputMode(NON_INVERTED_MODE,TIMER1_OCR1A);
    2b8e:	81 e0       	ldi	r24, 0x01	; 1
    2b90:	60 e0       	ldi	r22, 0x00	; 0
    2b92:	0e 94 ce 14 	call	0x299c	; 0x299c <TIMER1_voidSetCompareOutputMode>
}
    2b96:	cf 91       	pop	r28
    2b98:	df 91       	pop	r29
    2b9a:	08 95       	ret

00002b9c <PWM1_voidDutyCycle>:

void PWM1_voidDutyCycle(u16 Copy_u16Duty)
{
    2b9c:	ef 92       	push	r14
    2b9e:	ff 92       	push	r15
    2ba0:	0f 93       	push	r16
    2ba2:	1f 93       	push	r17
    2ba4:	df 93       	push	r29
    2ba6:	cf 93       	push	r28
    2ba8:	00 d0       	rcall	.+0      	; 0x2baa <PWM1_voidDutyCycle+0xe>
    2baa:	00 d0       	rcall	.+0      	; 0x2bac <PWM1_voidDutyCycle+0x10>
    2bac:	cd b7       	in	r28, 0x3d	; 61
    2bae:	de b7       	in	r29, 0x3e	; 62
    2bb0:	9c 83       	std	Y+4, r25	; 0x04
    2bb2:	8b 83       	std	Y+3, r24	; 0x03
	if (Copy_u16Duty <= 100)
    2bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb6:	9c 81       	ldd	r25, Y+4	; 0x04
    2bb8:	85 36       	cpi	r24, 0x65	; 101
    2bba:	91 05       	cpc	r25, r1
    2bbc:	80 f5       	brcc	.+96     	; 0x2c1e <PWM1_voidDutyCycle+0x82>
	{
		u16 Local_u16TimeOn = ((u32)Copy_u16Duty * (ICR1 +1)) /100;
    2bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc0:	9c 81       	ldd	r25, Y+4	; 0x04
    2bc2:	7c 01       	movw	r14, r24
    2bc4:	00 e0       	ldi	r16, 0x00	; 0
    2bc6:	10 e0       	ldi	r17, 0x00	; 0
    2bc8:	e6 e4       	ldi	r30, 0x46	; 70
    2bca:	f0 e0       	ldi	r31, 0x00	; 0
    2bcc:	80 81       	ld	r24, Z
    2bce:	91 81       	ldd	r25, Z+1	; 0x01
    2bd0:	01 96       	adiw	r24, 0x01	; 1
    2bd2:	9c 01       	movw	r18, r24
    2bd4:	40 e0       	ldi	r20, 0x00	; 0
    2bd6:	50 e0       	ldi	r21, 0x00	; 0
    2bd8:	c8 01       	movw	r24, r16
    2bda:	b7 01       	movw	r22, r14
    2bdc:	0e 94 e6 22 	call	0x45cc	; 0x45cc <__mulsi3>
    2be0:	dc 01       	movw	r26, r24
    2be2:	cb 01       	movw	r24, r22
    2be4:	24 e6       	ldi	r18, 0x64	; 100
    2be6:	30 e0       	ldi	r19, 0x00	; 0
    2be8:	40 e0       	ldi	r20, 0x00	; 0
    2bea:	50 e0       	ldi	r21, 0x00	; 0
    2bec:	bc 01       	movw	r22, r24
    2bee:	cd 01       	movw	r24, r26
    2bf0:	0e 94 19 23 	call	0x4632	; 0x4632 <__udivmodsi4>
    2bf4:	da 01       	movw	r26, r20
    2bf6:	c9 01       	movw	r24, r18
    2bf8:	9a 83       	std	Y+2, r25	; 0x02
    2bfa:	89 83       	std	Y+1, r24	; 0x01
		if(Local_u16TimeOn > 1)
    2bfc:	89 81       	ldd	r24, Y+1	; 0x01
    2bfe:	9a 81       	ldd	r25, Y+2	; 0x02
    2c00:	82 30       	cpi	r24, 0x02	; 2
    2c02:	91 05       	cpc	r25, r1
    2c04:	40 f0       	brcs	.+16     	; 0x2c16 <PWM1_voidDutyCycle+0x7a>
		{
			OCR1A = Local_u16TimeOn-1;
    2c06:	ea e4       	ldi	r30, 0x4A	; 74
    2c08:	f0 e0       	ldi	r31, 0x00	; 0
    2c0a:	89 81       	ldd	r24, Y+1	; 0x01
    2c0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c0e:	01 97       	sbiw	r24, 0x01	; 1
    2c10:	91 83       	std	Z+1, r25	; 0x01
    2c12:	80 83       	st	Z, r24
    2c14:	04 c0       	rjmp	.+8      	; 0x2c1e <PWM1_voidDutyCycle+0x82>
		}
		else
		{
			OCR1A = 0;
    2c16:	ea e4       	ldi	r30, 0x4A	; 74
    2c18:	f0 e0       	ldi	r31, 0x00	; 0
    2c1a:	11 82       	std	Z+1, r1	; 0x01
    2c1c:	10 82       	st	Z, r1
	}
	else
	{
		/*Return error*/
	}
}
    2c1e:	0f 90       	pop	r0
    2c20:	0f 90       	pop	r0
    2c22:	0f 90       	pop	r0
    2c24:	0f 90       	pop	r0
    2c26:	cf 91       	pop	r28
    2c28:	df 91       	pop	r29
    2c2a:	1f 91       	pop	r17
    2c2c:	0f 91       	pop	r16
    2c2e:	ff 90       	pop	r15
    2c30:	ef 90       	pop	r14
    2c32:	08 95       	ret

00002c34 <ICU_voidInit>:

void ICU_voidInit(void)
{
    2c34:	df 93       	push	r29
    2c36:	cf 93       	push	r28
    2c38:	cd b7       	in	r28, 0x3d	; 61
    2c3a:	de b7       	in	r29, 0x3e	; 62
	/*set trigger source to rising edge initially*/
	SET_BIT(TCCR1B,TCCR1B_ICES1);
    2c3c:	ae e4       	ldi	r26, 0x4E	; 78
    2c3e:	b0 e0       	ldi	r27, 0x00	; 0
    2c40:	ee e4       	ldi	r30, 0x4E	; 78
    2c42:	f0 e0       	ldi	r31, 0x00	; 0
    2c44:	80 81       	ld	r24, Z
    2c46:	80 64       	ori	r24, 0x40	; 64
    2c48:	8c 93       	st	X, r24

	/*Enable input capture interrupt*/
	SET_BIT(TIMSK,TIMSK_TICIE1);
    2c4a:	a9 e5       	ldi	r26, 0x59	; 89
    2c4c:	b0 e0       	ldi	r27, 0x00	; 0
    2c4e:	e9 e5       	ldi	r30, 0x59	; 89
    2c50:	f0 e0       	ldi	r31, 0x00	; 0
    2c52:	80 81       	ld	r24, Z
    2c54:	80 62       	ori	r24, 0x20	; 32
    2c56:	8c 93       	st	X, r24
}
    2c58:	cf 91       	pop	r28
    2c5a:	df 91       	pop	r29
    2c5c:	08 95       	ret

00002c5e <ICU_u8SetTriggerEdge>:

u8 ICU_u8SetTriggerEdge(u8 Copy_u8Edge)
{
    2c5e:	df 93       	push	r29
    2c60:	cf 93       	push	r28
    2c62:	00 d0       	rcall	.+0      	; 0x2c64 <ICU_u8SetTriggerEdge+0x6>
    2c64:	cd b7       	in	r28, 0x3d	; 61
    2c66:	de b7       	in	r29, 0x3e	; 62
    2c68:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus=OK;
    2c6a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Edge==ICU_RISING_EDGE)
    2c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c6e:	81 30       	cpi	r24, 0x01	; 1
    2c70:	41 f4       	brne	.+16     	; 0x2c82 <ICU_u8SetTriggerEdge+0x24>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    2c72:	ae e4       	ldi	r26, 0x4E	; 78
    2c74:	b0 e0       	ldi	r27, 0x00	; 0
    2c76:	ee e4       	ldi	r30, 0x4E	; 78
    2c78:	f0 e0       	ldi	r31, 0x00	; 0
    2c7a:	80 81       	ld	r24, Z
    2c7c:	80 64       	ori	r24, 0x40	; 64
    2c7e:	8c 93       	st	X, r24
    2c80:	0d c0       	rjmp	.+26     	; 0x2c9c <ICU_u8SetTriggerEdge+0x3e>
	}
	else if(Copy_u8Edge==ICU_FALLING_EDGE)
    2c82:	8a 81       	ldd	r24, Y+2	; 0x02
    2c84:	88 23       	and	r24, r24
    2c86:	41 f4       	brne	.+16     	; 0x2c98 <ICU_u8SetTriggerEdge+0x3a>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    2c88:	ae e4       	ldi	r26, 0x4E	; 78
    2c8a:	b0 e0       	ldi	r27, 0x00	; 0
    2c8c:	ee e4       	ldi	r30, 0x4E	; 78
    2c8e:	f0 e0       	ldi	r31, 0x00	; 0
    2c90:	80 81       	ld	r24, Z
    2c92:	8f 7b       	andi	r24, 0xBF	; 191
    2c94:	8c 93       	st	X, r24
    2c96:	02 c0       	rjmp	.+4      	; 0x2c9c <ICU_u8SetTriggerEdge+0x3e>
	}
	else
	{
		Local_u8ErrorStatus=NOK;
    2c98:	81 e0       	ldi	r24, 0x01	; 1
    2c9a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorStatus;
    2c9c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c9e:	0f 90       	pop	r0
    2ca0:	0f 90       	pop	r0
    2ca2:	cf 91       	pop	r28
    2ca4:	df 91       	pop	r29
    2ca6:	08 95       	ret

00002ca8 <ICU_voidEnableInterrupt>:

void ICU_voidEnableInterrupt(void)
{
    2ca8:	df 93       	push	r29
    2caa:	cf 93       	push	r28
    2cac:	cd b7       	in	r28, 0x3d	; 61
    2cae:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TICIE1);
    2cb0:	a9 e5       	ldi	r26, 0x59	; 89
    2cb2:	b0 e0       	ldi	r27, 0x00	; 0
    2cb4:	e9 e5       	ldi	r30, 0x59	; 89
    2cb6:	f0 e0       	ldi	r31, 0x00	; 0
    2cb8:	80 81       	ld	r24, Z
    2cba:	80 62       	ori	r24, 0x20	; 32
    2cbc:	8c 93       	st	X, r24
}
    2cbe:	cf 91       	pop	r28
    2cc0:	df 91       	pop	r29
    2cc2:	08 95       	ret

00002cc4 <ICU_voidDisableInterrupt>:

void ICU_voidDisableInterrupt(void)
{
    2cc4:	df 93       	push	r29
    2cc6:	cf 93       	push	r28
    2cc8:	cd b7       	in	r28, 0x3d	; 61
    2cca:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    2ccc:	a9 e5       	ldi	r26, 0x59	; 89
    2cce:	b0 e0       	ldi	r27, 0x00	; 0
    2cd0:	e9 e5       	ldi	r30, 0x59	; 89
    2cd2:	f0 e0       	ldi	r31, 0x00	; 0
    2cd4:	80 81       	ld	r24, Z
    2cd6:	8f 7d       	andi	r24, 0xDF	; 223
    2cd8:	8c 93       	st	X, r24
}
    2cda:	cf 91       	pop	r28
    2cdc:	df 91       	pop	r29
    2cde:	08 95       	ret

00002ce0 <ICU_u16ReadInputCaptureRegister>:

u16 ICU_u16ReadInputCaptureRegister(void)
{
    2ce0:	df 93       	push	r29
    2ce2:	cf 93       	push	r28
    2ce4:	cd b7       	in	r28, 0x3d	; 61
    2ce6:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    2ce8:	e6 e4       	ldi	r30, 0x46	; 70
    2cea:	f0 e0       	ldi	r31, 0x00	; 0
    2cec:	80 81       	ld	r24, Z
    2cee:	91 81       	ldd	r25, Z+1	; 0x01
}
    2cf0:	cf 91       	pop	r28
    2cf2:	df 91       	pop	r29
    2cf4:	08 95       	ret

00002cf6 <ICU_voidSetInputCaptureRegister>:

void ICU_voidSetInputCaptureRegister(u16 Copy_u16Value)
{
    2cf6:	df 93       	push	r29
    2cf8:	cf 93       	push	r28
    2cfa:	00 d0       	rcall	.+0      	; 0x2cfc <ICU_voidSetInputCaptureRegister+0x6>
    2cfc:	cd b7       	in	r28, 0x3d	; 61
    2cfe:	de b7       	in	r29, 0x3e	; 62
    2d00:	9a 83       	std	Y+2, r25	; 0x02
    2d02:	89 83       	std	Y+1, r24	; 0x01
	ICR1=Copy_u16Value;
    2d04:	e6 e4       	ldi	r30, 0x46	; 70
    2d06:	f0 e0       	ldi	r31, 0x00	; 0
    2d08:	89 81       	ldd	r24, Y+1	; 0x01
    2d0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d0c:	91 83       	std	Z+1, r25	; 0x01
    2d0e:	80 83       	st	Z, r24
}
    2d10:	0f 90       	pop	r0
    2d12:	0f 90       	pop	r0
    2d14:	cf 91       	pop	r28
    2d16:	df 91       	pop	r29
    2d18:	08 95       	ret

00002d1a <TIMER1_voidOVFInterrruptEnable>:

void TIMER1_voidOVFInterrruptEnable(void)
{
    2d1a:	df 93       	push	r29
    2d1c:	cf 93       	push	r28
    2d1e:	cd b7       	in	r28, 0x3d	; 61
    2d20:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TOIE1);
    2d22:	a9 e5       	ldi	r26, 0x59	; 89
    2d24:	b0 e0       	ldi	r27, 0x00	; 0
    2d26:	e9 e5       	ldi	r30, 0x59	; 89
    2d28:	f0 e0       	ldi	r31, 0x00	; 0
    2d2a:	80 81       	ld	r24, Z
    2d2c:	84 60       	ori	r24, 0x04	; 4
    2d2e:	8c 93       	st	X, r24
}
    2d30:	cf 91       	pop	r28
    2d32:	df 91       	pop	r29
    2d34:	08 95       	ret

00002d36 <TIMER1_voidOVFInterrruptDisable>:

void TIMER1_voidOVFInterrruptDisable(void)
{
    2d36:	df 93       	push	r29
    2d38:	cf 93       	push	r28
    2d3a:	cd b7       	in	r28, 0x3d	; 61
    2d3c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TOIE1);
    2d3e:	a9 e5       	ldi	r26, 0x59	; 89
    2d40:	b0 e0       	ldi	r27, 0x00	; 0
    2d42:	e9 e5       	ldi	r30, 0x59	; 89
    2d44:	f0 e0       	ldi	r31, 0x00	; 0
    2d46:	80 81       	ld	r24, Z
    2d48:	8b 7f       	andi	r24, 0xFB	; 251
    2d4a:	8c 93       	st	X, r24
}
    2d4c:	cf 91       	pop	r28
    2d4e:	df 91       	pop	r29
    2d50:	08 95       	ret

00002d52 <TIMER1_u8SetCallBack>:

u8 TIMER1_u8SetCallBack(void (*Copy_pvCallBackFunc)(void), u8 Copy_u8IntNumber)
{
    2d52:	df 93       	push	r29
    2d54:	cf 93       	push	r28
    2d56:	00 d0       	rcall	.+0      	; 0x2d58 <TIMER1_u8SetCallBack+0x6>
    2d58:	00 d0       	rcall	.+0      	; 0x2d5a <TIMER1_u8SetCallBack+0x8>
    2d5a:	cd b7       	in	r28, 0x3d	; 61
    2d5c:	de b7       	in	r29, 0x3e	; 62
    2d5e:	9b 83       	std	Y+3, r25	; 0x03
    2d60:	8a 83       	std	Y+2, r24	; 0x02
    2d62:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorStatus=OK;
    2d64:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pvCallBackFunc!=NULL)
    2d66:	8a 81       	ldd	r24, Y+2	; 0x02
    2d68:	9b 81       	ldd	r25, Y+3	; 0x03
    2d6a:	00 97       	sbiw	r24, 0x00	; 0
    2d6c:	69 f0       	breq	.+26     	; 0x2d88 <TIMER1_u8SetCallBack+0x36>
	{
		TIMER1_pvCallBackFunc[Copy_u8IntNumber]= Copy_pvCallBackFunc;
    2d6e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d70:	88 2f       	mov	r24, r24
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	88 0f       	add	r24, r24
    2d76:	99 1f       	adc	r25, r25
    2d78:	fc 01       	movw	r30, r24
    2d7a:	e1 56       	subi	r30, 0x61	; 97
    2d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d80:	9b 81       	ldd	r25, Y+3	; 0x03
    2d82:	91 83       	std	Z+1, r25	; 0x01
    2d84:	80 83       	st	Z, r24
    2d86:	02 c0       	rjmp	.+4      	; 0x2d8c <TIMER1_u8SetCallBack+0x3a>
	}
	else
	{
		Local_u8ErrorStatus=NULL_POINTER;
    2d88:	82 e0       	ldi	r24, 0x02	; 2
    2d8a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorStatus;
    2d8c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d8e:	0f 90       	pop	r0
    2d90:	0f 90       	pop	r0
    2d92:	0f 90       	pop	r0
    2d94:	0f 90       	pop	r0
    2d96:	cf 91       	pop	r28
    2d98:	df 91       	pop	r29
    2d9a:	08 95       	ret

00002d9c <__vector_6>:


void __vector_6 (void) __attribute__((signal));
void __vector_6 (void)
{
    2d9c:	1f 92       	push	r1
    2d9e:	0f 92       	push	r0
    2da0:	0f b6       	in	r0, 0x3f	; 63
    2da2:	0f 92       	push	r0
    2da4:	11 24       	eor	r1, r1
    2da6:	2f 93       	push	r18
    2da8:	3f 93       	push	r19
    2daa:	4f 93       	push	r20
    2dac:	5f 93       	push	r21
    2dae:	6f 93       	push	r22
    2db0:	7f 93       	push	r23
    2db2:	8f 93       	push	r24
    2db4:	9f 93       	push	r25
    2db6:	af 93       	push	r26
    2db8:	bf 93       	push	r27
    2dba:	ef 93       	push	r30
    2dbc:	ff 93       	push	r31
    2dbe:	df 93       	push	r29
    2dc0:	cf 93       	push	r28
    2dc2:	cd b7       	in	r28, 0x3d	; 61
    2dc4:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_pvCallBackFunc[TIMER1_ICU] != NULL)
    2dc6:	80 91 9f 00 	lds	r24, 0x009F
    2dca:	90 91 a0 00 	lds	r25, 0x00A0
    2dce:	00 97       	sbiw	r24, 0x00	; 0
    2dd0:	29 f0       	breq	.+10     	; 0x2ddc <__vector_6+0x40>
	{
		TIMER1_pvCallBackFunc[TIMER1_ICU]();
    2dd2:	e0 91 9f 00 	lds	r30, 0x009F
    2dd6:	f0 91 a0 00 	lds	r31, 0x00A0
    2dda:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    2ddc:	cf 91       	pop	r28
    2dde:	df 91       	pop	r29
    2de0:	ff 91       	pop	r31
    2de2:	ef 91       	pop	r30
    2de4:	bf 91       	pop	r27
    2de6:	af 91       	pop	r26
    2de8:	9f 91       	pop	r25
    2dea:	8f 91       	pop	r24
    2dec:	7f 91       	pop	r23
    2dee:	6f 91       	pop	r22
    2df0:	5f 91       	pop	r21
    2df2:	4f 91       	pop	r20
    2df4:	3f 91       	pop	r19
    2df6:	2f 91       	pop	r18
    2df8:	0f 90       	pop	r0
    2dfa:	0f be       	out	0x3f, r0	; 63
    2dfc:	0f 90       	pop	r0
    2dfe:	1f 90       	pop	r1
    2e00:	18 95       	reti

00002e02 <__vector_7>:

void __vector_7 (void) __attribute__((signal));
void __vector_7 (void)
{
    2e02:	1f 92       	push	r1
    2e04:	0f 92       	push	r0
    2e06:	0f b6       	in	r0, 0x3f	; 63
    2e08:	0f 92       	push	r0
    2e0a:	11 24       	eor	r1, r1
    2e0c:	2f 93       	push	r18
    2e0e:	3f 93       	push	r19
    2e10:	4f 93       	push	r20
    2e12:	5f 93       	push	r21
    2e14:	6f 93       	push	r22
    2e16:	7f 93       	push	r23
    2e18:	8f 93       	push	r24
    2e1a:	9f 93       	push	r25
    2e1c:	af 93       	push	r26
    2e1e:	bf 93       	push	r27
    2e20:	ef 93       	push	r30
    2e22:	ff 93       	push	r31
    2e24:	df 93       	push	r29
    2e26:	cf 93       	push	r28
    2e28:	cd b7       	in	r28, 0x3d	; 61
    2e2a:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_pvCallBackFunc[TIMER1_COMPA] != NULL)
    2e2c:	80 91 a1 00 	lds	r24, 0x00A1
    2e30:	90 91 a2 00 	lds	r25, 0x00A2
    2e34:	00 97       	sbiw	r24, 0x00	; 0
    2e36:	29 f0       	breq	.+10     	; 0x2e42 <__vector_7+0x40>
	{
		TIMER1_pvCallBackFunc[TIMER1_COMPA]();
    2e38:	e0 91 a1 00 	lds	r30, 0x00A1
    2e3c:	f0 91 a2 00 	lds	r31, 0x00A2
    2e40:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    2e42:	cf 91       	pop	r28
    2e44:	df 91       	pop	r29
    2e46:	ff 91       	pop	r31
    2e48:	ef 91       	pop	r30
    2e4a:	bf 91       	pop	r27
    2e4c:	af 91       	pop	r26
    2e4e:	9f 91       	pop	r25
    2e50:	8f 91       	pop	r24
    2e52:	7f 91       	pop	r23
    2e54:	6f 91       	pop	r22
    2e56:	5f 91       	pop	r21
    2e58:	4f 91       	pop	r20
    2e5a:	3f 91       	pop	r19
    2e5c:	2f 91       	pop	r18
    2e5e:	0f 90       	pop	r0
    2e60:	0f be       	out	0x3f, r0	; 63
    2e62:	0f 90       	pop	r0
    2e64:	1f 90       	pop	r1
    2e66:	18 95       	reti

00002e68 <__vector_8>:

void __vector_8 (void) __attribute__((signal));
void __vector_8 (void)
{
    2e68:	1f 92       	push	r1
    2e6a:	0f 92       	push	r0
    2e6c:	0f b6       	in	r0, 0x3f	; 63
    2e6e:	0f 92       	push	r0
    2e70:	11 24       	eor	r1, r1
    2e72:	2f 93       	push	r18
    2e74:	3f 93       	push	r19
    2e76:	4f 93       	push	r20
    2e78:	5f 93       	push	r21
    2e7a:	6f 93       	push	r22
    2e7c:	7f 93       	push	r23
    2e7e:	8f 93       	push	r24
    2e80:	9f 93       	push	r25
    2e82:	af 93       	push	r26
    2e84:	bf 93       	push	r27
    2e86:	ef 93       	push	r30
    2e88:	ff 93       	push	r31
    2e8a:	df 93       	push	r29
    2e8c:	cf 93       	push	r28
    2e8e:	cd b7       	in	r28, 0x3d	; 61
    2e90:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_pvCallBackFunc[TIMER1_COMPB] != NULL)
    2e92:	80 91 a3 00 	lds	r24, 0x00A3
    2e96:	90 91 a4 00 	lds	r25, 0x00A4
    2e9a:	00 97       	sbiw	r24, 0x00	; 0
    2e9c:	29 f0       	breq	.+10     	; 0x2ea8 <__vector_8+0x40>
	{
		TIMER1_pvCallBackFunc[TIMER1_COMPB]();
    2e9e:	e0 91 a3 00 	lds	r30, 0x00A3
    2ea2:	f0 91 a4 00 	lds	r31, 0x00A4
    2ea6:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    2ea8:	cf 91       	pop	r28
    2eaa:	df 91       	pop	r29
    2eac:	ff 91       	pop	r31
    2eae:	ef 91       	pop	r30
    2eb0:	bf 91       	pop	r27
    2eb2:	af 91       	pop	r26
    2eb4:	9f 91       	pop	r25
    2eb6:	8f 91       	pop	r24
    2eb8:	7f 91       	pop	r23
    2eba:	6f 91       	pop	r22
    2ebc:	5f 91       	pop	r21
    2ebe:	4f 91       	pop	r20
    2ec0:	3f 91       	pop	r19
    2ec2:	2f 91       	pop	r18
    2ec4:	0f 90       	pop	r0
    2ec6:	0f be       	out	0x3f, r0	; 63
    2ec8:	0f 90       	pop	r0
    2eca:	1f 90       	pop	r1
    2ecc:	18 95       	reti

00002ece <__vector_9>:

void __vector_9 (void) __attribute__((signal));
void __vector_9 (void)
{
    2ece:	1f 92       	push	r1
    2ed0:	0f 92       	push	r0
    2ed2:	0f b6       	in	r0, 0x3f	; 63
    2ed4:	0f 92       	push	r0
    2ed6:	11 24       	eor	r1, r1
    2ed8:	2f 93       	push	r18
    2eda:	3f 93       	push	r19
    2edc:	4f 93       	push	r20
    2ede:	5f 93       	push	r21
    2ee0:	6f 93       	push	r22
    2ee2:	7f 93       	push	r23
    2ee4:	8f 93       	push	r24
    2ee6:	9f 93       	push	r25
    2ee8:	af 93       	push	r26
    2eea:	bf 93       	push	r27
    2eec:	ef 93       	push	r30
    2eee:	ff 93       	push	r31
    2ef0:	df 93       	push	r29
    2ef2:	cf 93       	push	r28
    2ef4:	cd b7       	in	r28, 0x3d	; 61
    2ef6:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_pvCallBackFunc[TIMER1_OVF] != NULL)
    2ef8:	80 91 a5 00 	lds	r24, 0x00A5
    2efc:	90 91 a6 00 	lds	r25, 0x00A6
    2f00:	00 97       	sbiw	r24, 0x00	; 0
    2f02:	29 f0       	breq	.+10     	; 0x2f0e <__vector_9+0x40>
	{
		TIMER1_pvCallBackFunc[TIMER1_OVF]();
    2f04:	e0 91 a5 00 	lds	r30, 0x00A5
    2f08:	f0 91 a6 00 	lds	r31, 0x00A6
    2f0c:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    2f0e:	cf 91       	pop	r28
    2f10:	df 91       	pop	r29
    2f12:	ff 91       	pop	r31
    2f14:	ef 91       	pop	r30
    2f16:	bf 91       	pop	r27
    2f18:	af 91       	pop	r26
    2f1a:	9f 91       	pop	r25
    2f1c:	8f 91       	pop	r24
    2f1e:	7f 91       	pop	r23
    2f20:	6f 91       	pop	r22
    2f22:	5f 91       	pop	r21
    2f24:	4f 91       	pop	r20
    2f26:	3f 91       	pop	r19
    2f28:	2f 91       	pop	r18
    2f2a:	0f 90       	pop	r0
    2f2c:	0f be       	out	0x3f, r0	; 63
    2f2e:	0f 90       	pop	r0
    2f30:	1f 90       	pop	r1
    2f32:	18 95       	reti

00002f34 <TIMER2_voidInit>:


static void(*TIMER2_pvCallBackFunc[2])(void)={NULL};

void TIMER2_voidInit(u8 Copy_u8Mode, u8 Copy_u8Prescaler)
{
    2f34:	df 93       	push	r29
    2f36:	cf 93       	push	r28
    2f38:	00 d0       	rcall	.+0      	; 0x2f3a <TIMER2_voidInit+0x6>
    2f3a:	00 d0       	rcall	.+0      	; 0x2f3c <TIMER2_voidInit+0x8>
    2f3c:	cd b7       	in	r28, 0x3d	; 61
    2f3e:	de b7       	in	r29, 0x3e	; 62
    2f40:	89 83       	std	Y+1, r24	; 0x01
    2f42:	6a 83       	std	Y+2, r22	; 0x02
	/*Select Waveform generation mode*/
	switch(Copy_u8Mode)
    2f44:	89 81       	ldd	r24, Y+1	; 0x01
    2f46:	28 2f       	mov	r18, r24
    2f48:	30 e0       	ldi	r19, 0x00	; 0
    2f4a:	3c 83       	std	Y+4, r19	; 0x04
    2f4c:	2b 83       	std	Y+3, r18	; 0x03
    2f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f50:	9c 81       	ldd	r25, Y+4	; 0x04
    2f52:	81 30       	cpi	r24, 0x01	; 1
    2f54:	91 05       	cpc	r25, r1
    2f56:	21 f1       	breq	.+72     	; 0x2fa0 <TIMER2_voidInit+0x6c>
    2f58:	2b 81       	ldd	r18, Y+3	; 0x03
    2f5a:	3c 81       	ldd	r19, Y+4	; 0x04
    2f5c:	22 30       	cpi	r18, 0x02	; 2
    2f5e:	31 05       	cpc	r19, r1
    2f60:	2c f4       	brge	.+10     	; 0x2f6c <TIMER2_voidInit+0x38>
    2f62:	8b 81       	ldd	r24, Y+3	; 0x03
    2f64:	9c 81       	ldd	r25, Y+4	; 0x04
    2f66:	00 97       	sbiw	r24, 0x00	; 0
    2f68:	61 f0       	breq	.+24     	; 0x2f82 <TIMER2_voidInit+0x4e>
    2f6a:	46 c0       	rjmp	.+140    	; 0x2ff8 <TIMER2_voidInit+0xc4>
    2f6c:	2b 81       	ldd	r18, Y+3	; 0x03
    2f6e:	3c 81       	ldd	r19, Y+4	; 0x04
    2f70:	22 30       	cpi	r18, 0x02	; 2
    2f72:	31 05       	cpc	r19, r1
    2f74:	21 f1       	breq	.+72     	; 0x2fbe <TIMER2_voidInit+0x8a>
    2f76:	8b 81       	ldd	r24, Y+3	; 0x03
    2f78:	9c 81       	ldd	r25, Y+4	; 0x04
    2f7a:	83 30       	cpi	r24, 0x03	; 3
    2f7c:	91 05       	cpc	r25, r1
    2f7e:	71 f1       	breq	.+92     	; 0x2fdc <TIMER2_voidInit+0xa8>
    2f80:	3b c0       	rjmp	.+118    	; 0x2ff8 <TIMER2_voidInit+0xc4>
	{
	case TIMER2_NORMAL_MODE: CLR_BIT(TCCR2,TCCR2_WGM20); CLR_BIT(TCCR2,TCCR2_WGM21); break;
    2f82:	a5 e4       	ldi	r26, 0x45	; 69
    2f84:	b0 e0       	ldi	r27, 0x00	; 0
    2f86:	e5 e4       	ldi	r30, 0x45	; 69
    2f88:	f0 e0       	ldi	r31, 0x00	; 0
    2f8a:	80 81       	ld	r24, Z
    2f8c:	8f 7b       	andi	r24, 0xBF	; 191
    2f8e:	8c 93       	st	X, r24
    2f90:	a5 e4       	ldi	r26, 0x45	; 69
    2f92:	b0 e0       	ldi	r27, 0x00	; 0
    2f94:	e5 e4       	ldi	r30, 0x45	; 69
    2f96:	f0 e0       	ldi	r31, 0x00	; 0
    2f98:	80 81       	ld	r24, Z
    2f9a:	87 7f       	andi	r24, 0xF7	; 247
    2f9c:	8c 93       	st	X, r24
    2f9e:	2c c0       	rjmp	.+88     	; 0x2ff8 <TIMER2_voidInit+0xc4>
	case TIMER2_PHASE_CORRECT_PWM :SET_BIT(TCCR2,TCCR2_WGM20); CLR_BIT(TCCR2,TCCR2_WGM21); break;
    2fa0:	a5 e4       	ldi	r26, 0x45	; 69
    2fa2:	b0 e0       	ldi	r27, 0x00	; 0
    2fa4:	e5 e4       	ldi	r30, 0x45	; 69
    2fa6:	f0 e0       	ldi	r31, 0x00	; 0
    2fa8:	80 81       	ld	r24, Z
    2faa:	80 64       	ori	r24, 0x40	; 64
    2fac:	8c 93       	st	X, r24
    2fae:	a5 e4       	ldi	r26, 0x45	; 69
    2fb0:	b0 e0       	ldi	r27, 0x00	; 0
    2fb2:	e5 e4       	ldi	r30, 0x45	; 69
    2fb4:	f0 e0       	ldi	r31, 0x00	; 0
    2fb6:	80 81       	ld	r24, Z
    2fb8:	87 7f       	andi	r24, 0xF7	; 247
    2fba:	8c 93       	st	X, r24
    2fbc:	1d c0       	rjmp	.+58     	; 0x2ff8 <TIMER2_voidInit+0xc4>
	case TIMER2_CTC: CLR_BIT(TCCR2,TCCR2_WGM20); SET_BIT(TCCR2,TCCR2_WGM21); break;
    2fbe:	a5 e4       	ldi	r26, 0x45	; 69
    2fc0:	b0 e0       	ldi	r27, 0x00	; 0
    2fc2:	e5 e4       	ldi	r30, 0x45	; 69
    2fc4:	f0 e0       	ldi	r31, 0x00	; 0
    2fc6:	80 81       	ld	r24, Z
    2fc8:	8f 7b       	andi	r24, 0xBF	; 191
    2fca:	8c 93       	st	X, r24
    2fcc:	a5 e4       	ldi	r26, 0x45	; 69
    2fce:	b0 e0       	ldi	r27, 0x00	; 0
    2fd0:	e5 e4       	ldi	r30, 0x45	; 69
    2fd2:	f0 e0       	ldi	r31, 0x00	; 0
    2fd4:	80 81       	ld	r24, Z
    2fd6:	88 60       	ori	r24, 0x08	; 8
    2fd8:	8c 93       	st	X, r24
    2fda:	0e c0       	rjmp	.+28     	; 0x2ff8 <TIMER2_voidInit+0xc4>
	case TIMER2_FAST_PWM: SET_BIT(TCCR2,TCCR2_WGM20); SET_BIT(TCCR2,TCCR2_WGM21); break;
    2fdc:	a5 e4       	ldi	r26, 0x45	; 69
    2fde:	b0 e0       	ldi	r27, 0x00	; 0
    2fe0:	e5 e4       	ldi	r30, 0x45	; 69
    2fe2:	f0 e0       	ldi	r31, 0x00	; 0
    2fe4:	80 81       	ld	r24, Z
    2fe6:	80 64       	ori	r24, 0x40	; 64
    2fe8:	8c 93       	st	X, r24
    2fea:	a5 e4       	ldi	r26, 0x45	; 69
    2fec:	b0 e0       	ldi	r27, 0x00	; 0
    2fee:	e5 e4       	ldi	r30, 0x45	; 69
    2ff0:	f0 e0       	ldi	r31, 0x00	; 0
    2ff2:	80 81       	ld	r24, Z
    2ff4:	88 60       	ori	r24, 0x08	; 8
    2ff6:	8c 93       	st	X, r24
	default: break;
	}


	/*Set Prescaler division factor*/
	TCCR2 &=PRESCALER_MASK;
    2ff8:	a5 e4       	ldi	r26, 0x45	; 69
    2ffa:	b0 e0       	ldi	r27, 0x00	; 0
    2ffc:	e5 e4       	ldi	r30, 0x45	; 69
    2ffe:	f0 e0       	ldi	r31, 0x00	; 0
    3000:	80 81       	ld	r24, Z
    3002:	88 7f       	andi	r24, 0xF8	; 248
    3004:	8c 93       	st	X, r24
	TCCR2 |=Copy_u8Prescaler;
    3006:	a5 e4       	ldi	r26, 0x45	; 69
    3008:	b0 e0       	ldi	r27, 0x00	; 0
    300a:	e5 e4       	ldi	r30, 0x45	; 69
    300c:	f0 e0       	ldi	r31, 0x00	; 0
    300e:	90 81       	ld	r25, Z
    3010:	8a 81       	ldd	r24, Y+2	; 0x02
    3012:	89 2b       	or	r24, r25
    3014:	8c 93       	st	X, r24

}
    3016:	0f 90       	pop	r0
    3018:	0f 90       	pop	r0
    301a:	0f 90       	pop	r0
    301c:	0f 90       	pop	r0
    301e:	cf 91       	pop	r28
    3020:	df 91       	pop	r29
    3022:	08 95       	ret

00003024 <TIMER2_voidSetCompMatchOutputMode>:

void TIMER2_voidSetCompMatchOutputMode(u8 Copy_u8CompOutputMode)
{
    3024:	df 93       	push	r29
    3026:	cf 93       	push	r28
    3028:	00 d0       	rcall	.+0      	; 0x302a <TIMER2_voidSetCompMatchOutputMode+0x6>
    302a:	0f 92       	push	r0
    302c:	cd b7       	in	r28, 0x3d	; 61
    302e:	de b7       	in	r29, 0x3e	; 62
    3030:	89 83       	std	Y+1, r24	; 0x01
	/*Select Compare match Output mode*/
	switch(Copy_u8CompOutputMode)
    3032:	89 81       	ldd	r24, Y+1	; 0x01
    3034:	28 2f       	mov	r18, r24
    3036:	30 e0       	ldi	r19, 0x00	; 0
    3038:	3b 83       	std	Y+3, r19	; 0x03
    303a:	2a 83       	std	Y+2, r18	; 0x02
    303c:	8a 81       	ldd	r24, Y+2	; 0x02
    303e:	9b 81       	ldd	r25, Y+3	; 0x03
    3040:	81 30       	cpi	r24, 0x01	; 1
    3042:	91 05       	cpc	r25, r1
    3044:	c1 f0       	breq	.+48     	; 0x3076 <TIMER2_voidSetCompMatchOutputMode+0x52>
    3046:	2a 81       	ldd	r18, Y+2	; 0x02
    3048:	3b 81       	ldd	r19, Y+3	; 0x03
    304a:	22 30       	cpi	r18, 0x02	; 2
    304c:	31 05       	cpc	r19, r1
    304e:	11 f1       	breq	.+68     	; 0x3094 <TIMER2_voidSetCompMatchOutputMode+0x70>
    3050:	8a 81       	ldd	r24, Y+2	; 0x02
    3052:	9b 81       	ldd	r25, Y+3	; 0x03
    3054:	00 97       	sbiw	r24, 0x00	; 0
    3056:	61 f5       	brne	.+88     	; 0x30b0 <TIMER2_voidSetCompMatchOutputMode+0x8c>
	{
	case NORMAL_OPERATION_MODE : CLR_BIT(TCCR2,TCCR2_COM20); CLR_BIT(TCCR2,TCCR2_COM21); break;
    3058:	a5 e4       	ldi	r26, 0x45	; 69
    305a:	b0 e0       	ldi	r27, 0x00	; 0
    305c:	e5 e4       	ldi	r30, 0x45	; 69
    305e:	f0 e0       	ldi	r31, 0x00	; 0
    3060:	80 81       	ld	r24, Z
    3062:	8f 7e       	andi	r24, 0xEF	; 239
    3064:	8c 93       	st	X, r24
    3066:	a5 e4       	ldi	r26, 0x45	; 69
    3068:	b0 e0       	ldi	r27, 0x00	; 0
    306a:	e5 e4       	ldi	r30, 0x45	; 69
    306c:	f0 e0       	ldi	r31, 0x00	; 0
    306e:	80 81       	ld	r24, Z
    3070:	8f 7d       	andi	r24, 0xDF	; 223
    3072:	8c 93       	st	X, r24
    3074:	1d c0       	rjmp	.+58     	; 0x30b0 <TIMER2_voidSetCompMatchOutputMode+0x8c>
	case NON_INVERTED_MODE: CLR_BIT(TCCR2,TCCR2_COM20); SET_BIT(TCCR2,TCCR2_COM21); break;
    3076:	a5 e4       	ldi	r26, 0x45	; 69
    3078:	b0 e0       	ldi	r27, 0x00	; 0
    307a:	e5 e4       	ldi	r30, 0x45	; 69
    307c:	f0 e0       	ldi	r31, 0x00	; 0
    307e:	80 81       	ld	r24, Z
    3080:	8f 7e       	andi	r24, 0xEF	; 239
    3082:	8c 93       	st	X, r24
    3084:	a5 e4       	ldi	r26, 0x45	; 69
    3086:	b0 e0       	ldi	r27, 0x00	; 0
    3088:	e5 e4       	ldi	r30, 0x45	; 69
    308a:	f0 e0       	ldi	r31, 0x00	; 0
    308c:	80 81       	ld	r24, Z
    308e:	80 62       	ori	r24, 0x20	; 32
    3090:	8c 93       	st	X, r24
    3092:	0e c0       	rjmp	.+28     	; 0x30b0 <TIMER2_voidSetCompMatchOutputMode+0x8c>
	case INVERTED_MODE : SET_BIT(TCCR2,TCCR2_COM20); SET_BIT(TCCR2,TCCR2_COM21); break;
    3094:	a5 e4       	ldi	r26, 0x45	; 69
    3096:	b0 e0       	ldi	r27, 0x00	; 0
    3098:	e5 e4       	ldi	r30, 0x45	; 69
    309a:	f0 e0       	ldi	r31, 0x00	; 0
    309c:	80 81       	ld	r24, Z
    309e:	80 61       	ori	r24, 0x10	; 16
    30a0:	8c 93       	st	X, r24
    30a2:	a5 e4       	ldi	r26, 0x45	; 69
    30a4:	b0 e0       	ldi	r27, 0x00	; 0
    30a6:	e5 e4       	ldi	r30, 0x45	; 69
    30a8:	f0 e0       	ldi	r31, 0x00	; 0
    30aa:	80 81       	ld	r24, Z
    30ac:	80 62       	ori	r24, 0x20	; 32
    30ae:	8c 93       	st	X, r24
	default : break;
	}

}
    30b0:	0f 90       	pop	r0
    30b2:	0f 90       	pop	r0
    30b4:	0f 90       	pop	r0
    30b6:	cf 91       	pop	r28
    30b8:	df 91       	pop	r29
    30ba:	08 95       	ret

000030bc <TIMER2_voidSetCompMatchValue>:

void TIMER2_voidSetCompMatchValue(u8 Copy_u8Value)
{
    30bc:	df 93       	push	r29
    30be:	cf 93       	push	r28
    30c0:	0f 92       	push	r0
    30c2:	cd b7       	in	r28, 0x3d	; 61
    30c4:	de b7       	in	r29, 0x3e	; 62
    30c6:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = Copy_u8Value;
    30c8:	e3 e4       	ldi	r30, 0x43	; 67
    30ca:	f0 e0       	ldi	r31, 0x00	; 0
    30cc:	89 81       	ldd	r24, Y+1	; 0x01
    30ce:	80 83       	st	Z, r24
}
    30d0:	0f 90       	pop	r0
    30d2:	cf 91       	pop	r28
    30d4:	df 91       	pop	r29
    30d6:	08 95       	ret

000030d8 <TIMER2_voidSetTimerValue>:

void TIMER2_voidSetTimerValue(u8 Copy_u8Value)
{
    30d8:	df 93       	push	r29
    30da:	cf 93       	push	r28
    30dc:	0f 92       	push	r0
    30de:	cd b7       	in	r28, 0x3d	; 61
    30e0:	de b7       	in	r29, 0x3e	; 62
    30e2:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = Copy_u8Value;
    30e4:	e4 e4       	ldi	r30, 0x44	; 68
    30e6:	f0 e0       	ldi	r31, 0x00	; 0
    30e8:	89 81       	ldd	r24, Y+1	; 0x01
    30ea:	80 83       	st	Z, r24
}
    30ec:	0f 90       	pop	r0
    30ee:	cf 91       	pop	r28
    30f0:	df 91       	pop	r29
    30f2:	08 95       	ret

000030f4 <TIMER2_u8ReadTimerValue>:

u8 TIMER2_u8ReadTimerValue(void)
{
    30f4:	df 93       	push	r29
    30f6:	cf 93       	push	r28
    30f8:	cd b7       	in	r28, 0x3d	; 61
    30fa:	de b7       	in	r29, 0x3e	; 62
	return TCNT2;
    30fc:	e4 e4       	ldi	r30, 0x44	; 68
    30fe:	f0 e0       	ldi	r31, 0x00	; 0
    3100:	80 81       	ld	r24, Z
}
    3102:	cf 91       	pop	r28
    3104:	df 91       	pop	r29
    3106:	08 95       	ret

00003108 <TIMER2_voidCompMatchInterruptEnable>:

void TIMER2_voidCompMatchInterruptEnable(void)
{
    3108:	df 93       	push	r29
    310a:	cf 93       	push	r28
    310c:	cd b7       	in	r28, 0x3d	; 61
    310e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_OCIE2);
    3110:	a9 e5       	ldi	r26, 0x59	; 89
    3112:	b0 e0       	ldi	r27, 0x00	; 0
    3114:	e9 e5       	ldi	r30, 0x59	; 89
    3116:	f0 e0       	ldi	r31, 0x00	; 0
    3118:	80 81       	ld	r24, Z
    311a:	80 68       	ori	r24, 0x80	; 128
    311c:	8c 93       	st	X, r24
}
    311e:	cf 91       	pop	r28
    3120:	df 91       	pop	r29
    3122:	08 95       	ret

00003124 <TIMER2_voidCompMatchInterruptDisable>:

void TIMER2_voidCompMatchInterruptDisable(void)
{
    3124:	df 93       	push	r29
    3126:	cf 93       	push	r28
    3128:	cd b7       	in	r28, 0x3d	; 61
    312a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_OCIE2);
    312c:	a9 e5       	ldi	r26, 0x59	; 89
    312e:	b0 e0       	ldi	r27, 0x00	; 0
    3130:	e9 e5       	ldi	r30, 0x59	; 89
    3132:	f0 e0       	ldi	r31, 0x00	; 0
    3134:	80 81       	ld	r24, Z
    3136:	8f 77       	andi	r24, 0x7F	; 127
    3138:	8c 93       	st	X, r24
}
    313a:	cf 91       	pop	r28
    313c:	df 91       	pop	r29
    313e:	08 95       	ret

00003140 <TIMER2_voidOVFInterruptEnable>:

void TIMER2_voidOVFInterruptEnable(void)
{
    3140:	df 93       	push	r29
    3142:	cf 93       	push	r28
    3144:	cd b7       	in	r28, 0x3d	; 61
    3146:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TOIE2);
    3148:	a9 e5       	ldi	r26, 0x59	; 89
    314a:	b0 e0       	ldi	r27, 0x00	; 0
    314c:	e9 e5       	ldi	r30, 0x59	; 89
    314e:	f0 e0       	ldi	r31, 0x00	; 0
    3150:	80 81       	ld	r24, Z
    3152:	80 64       	ori	r24, 0x40	; 64
    3154:	8c 93       	st	X, r24
}
    3156:	cf 91       	pop	r28
    3158:	df 91       	pop	r29
    315a:	08 95       	ret

0000315c <TIMER2_voidOVFInterruptDisable>:

void TIMER2_voidOVFInterruptDisable(void)
{
    315c:	df 93       	push	r29
    315e:	cf 93       	push	r28
    3160:	cd b7       	in	r28, 0x3d	; 61
    3162:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TOIE2);
    3164:	a9 e5       	ldi	r26, 0x59	; 89
    3166:	b0 e0       	ldi	r27, 0x00	; 0
    3168:	e9 e5       	ldi	r30, 0x59	; 89
    316a:	f0 e0       	ldi	r31, 0x00	; 0
    316c:	80 81       	ld	r24, Z
    316e:	8f 7b       	andi	r24, 0xBF	; 191
    3170:	8c 93       	st	X, r24
}
    3172:	cf 91       	pop	r28
    3174:	df 91       	pop	r29
    3176:	08 95       	ret

00003178 <TIMER2_voidSetDutyCycle>:

void TIMER2_voidSetDutyCycle(u8 Copy_u8DutyCycle)
{
    3178:	df 93       	push	r29
    317a:	cf 93       	push	r28
    317c:	00 d0       	rcall	.+0      	; 0x317e <TIMER2_voidSetDutyCycle+0x6>
    317e:	cd b7       	in	r28, 0x3d	; 61
    3180:	de b7       	in	r29, 0x3e	; 62
    3182:	8a 83       	std	Y+2, r24	; 0x02
	if(Copy_u8DutyCycle <= 100)
    3184:	8a 81       	ldd	r24, Y+2	; 0x02
    3186:	85 36       	cpi	r24, 0x65	; 101
    3188:	20 f5       	brcc	.+72     	; 0x31d2 <TIMER2_voidSetDutyCycle+0x5a>
	{
		u8 Local_u8TimeOn = ((u16)Copy_u8DutyCycle * (TIMER2_MAX_COUNT))/100 ;
    318a:	8a 81       	ldd	r24, Y+2	; 0x02
    318c:	48 2f       	mov	r20, r24
    318e:	50 e0       	ldi	r21, 0x00	; 0
    3190:	ca 01       	movw	r24, r20
    3192:	9c 01       	movw	r18, r24
    3194:	22 0f       	add	r18, r18
    3196:	33 1f       	adc	r19, r19
    3198:	c9 01       	movw	r24, r18
    319a:	96 95       	lsr	r25
    319c:	98 2f       	mov	r25, r24
    319e:	88 27       	eor	r24, r24
    31a0:	97 95       	ror	r25
    31a2:	87 95       	ror	r24
    31a4:	82 1b       	sub	r24, r18
    31a6:	93 0b       	sbc	r25, r19
    31a8:	84 0f       	add	r24, r20
    31aa:	95 1f       	adc	r25, r21
    31ac:	24 e6       	ldi	r18, 0x64	; 100
    31ae:	30 e0       	ldi	r19, 0x00	; 0
    31b0:	b9 01       	movw	r22, r18
    31b2:	0e 94 05 23 	call	0x460a	; 0x460a <__udivmodhi4>
    31b6:	cb 01       	movw	r24, r22
    31b8:	89 83       	std	Y+1, r24	; 0x01

		if(Local_u8TimeOn >1)
    31ba:	89 81       	ldd	r24, Y+1	; 0x01
    31bc:	82 30       	cpi	r24, 0x02	; 2
    31be:	30 f0       	brcs	.+12     	; 0x31cc <TIMER2_voidSetDutyCycle+0x54>
		{
			OCR2 = TIMER2_MAX_COUNT-Local_u8TimeOn;
    31c0:	e3 e4       	ldi	r30, 0x43	; 67
    31c2:	f0 e0       	ldi	r31, 0x00	; 0
    31c4:	89 81       	ldd	r24, Y+1	; 0x01
    31c6:	80 95       	com	r24
    31c8:	80 83       	st	Z, r24
    31ca:	03 c0       	rjmp	.+6      	; 0x31d2 <TIMER2_voidSetDutyCycle+0x5a>
		}
		else
		{
			OCR2 = 0;
    31cc:	e3 e4       	ldi	r30, 0x43	; 67
    31ce:	f0 e0       	ldi	r31, 0x00	; 0
    31d0:	10 82       	st	Z, r1
	}
	else
	{
		/*return Error*/
	}
}
    31d2:	0f 90       	pop	r0
    31d4:	0f 90       	pop	r0
    31d6:	cf 91       	pop	r28
    31d8:	df 91       	pop	r29
    31da:	08 95       	ret

000031dc <TIMER2_u8SetCallBack>:

u8 TIMER2_u8SetCallBack(void (*Copy_pvCallBackFunc)(void), u8 Copy_u8IntNumber)
{
    31dc:	df 93       	push	r29
    31de:	cf 93       	push	r28
    31e0:	00 d0       	rcall	.+0      	; 0x31e2 <TIMER2_u8SetCallBack+0x6>
    31e2:	00 d0       	rcall	.+0      	; 0x31e4 <TIMER2_u8SetCallBack+0x8>
    31e4:	cd b7       	in	r28, 0x3d	; 61
    31e6:	de b7       	in	r29, 0x3e	; 62
    31e8:	9b 83       	std	Y+3, r25	; 0x03
    31ea:	8a 83       	std	Y+2, r24	; 0x02
    31ec:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorStatus=OK;
    31ee:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pvCallBackFunc!=NULL)
    31f0:	8a 81       	ldd	r24, Y+2	; 0x02
    31f2:	9b 81       	ldd	r25, Y+3	; 0x03
    31f4:	00 97       	sbiw	r24, 0x00	; 0
    31f6:	69 f0       	breq	.+26     	; 0x3212 <TIMER2_u8SetCallBack+0x36>
	{
		TIMER2_pvCallBackFunc[Copy_u8IntNumber]= Copy_pvCallBackFunc;
    31f8:	8c 81       	ldd	r24, Y+4	; 0x04
    31fa:	88 2f       	mov	r24, r24
    31fc:	90 e0       	ldi	r25, 0x00	; 0
    31fe:	88 0f       	add	r24, r24
    3200:	99 1f       	adc	r25, r25
    3202:	fc 01       	movw	r30, r24
    3204:	e9 55       	subi	r30, 0x59	; 89
    3206:	ff 4f       	sbci	r31, 0xFF	; 255
    3208:	8a 81       	ldd	r24, Y+2	; 0x02
    320a:	9b 81       	ldd	r25, Y+3	; 0x03
    320c:	91 83       	std	Z+1, r25	; 0x01
    320e:	80 83       	st	Z, r24
    3210:	02 c0       	rjmp	.+4      	; 0x3216 <TIMER2_u8SetCallBack+0x3a>
	}
	else
	{
		Local_u8ErrorStatus=NULL_POINTER;
    3212:	82 e0       	ldi	r24, 0x02	; 2
    3214:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorStatus;
    3216:	89 81       	ldd	r24, Y+1	; 0x01

}
    3218:	0f 90       	pop	r0
    321a:	0f 90       	pop	r0
    321c:	0f 90       	pop	r0
    321e:	0f 90       	pop	r0
    3220:	cf 91       	pop	r28
    3222:	df 91       	pop	r29
    3224:	08 95       	ret

00003226 <__vector_4>:

void __vector_4 (void) __attribute__((signal));
void __vector_4 (void)
{
    3226:	1f 92       	push	r1
    3228:	0f 92       	push	r0
    322a:	0f b6       	in	r0, 0x3f	; 63
    322c:	0f 92       	push	r0
    322e:	11 24       	eor	r1, r1
    3230:	2f 93       	push	r18
    3232:	3f 93       	push	r19
    3234:	4f 93       	push	r20
    3236:	5f 93       	push	r21
    3238:	6f 93       	push	r22
    323a:	7f 93       	push	r23
    323c:	8f 93       	push	r24
    323e:	9f 93       	push	r25
    3240:	af 93       	push	r26
    3242:	bf 93       	push	r27
    3244:	ef 93       	push	r30
    3246:	ff 93       	push	r31
    3248:	df 93       	push	r29
    324a:	cf 93       	push	r28
    324c:	cd b7       	in	r28, 0x3d	; 61
    324e:	de b7       	in	r29, 0x3e	; 62
	if(TIMER2_pvCallBackFunc[TIMER2_COMP] != NULL)
    3250:	80 91 a9 00 	lds	r24, 0x00A9
    3254:	90 91 aa 00 	lds	r25, 0x00AA
    3258:	00 97       	sbiw	r24, 0x00	; 0
    325a:	29 f0       	breq	.+10     	; 0x3266 <__vector_4+0x40>
	{
		TIMER2_pvCallBackFunc[TIMER2_COMP]();
    325c:	e0 91 a9 00 	lds	r30, 0x00A9
    3260:	f0 91 aa 00 	lds	r31, 0x00AA
    3264:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    3266:	cf 91       	pop	r28
    3268:	df 91       	pop	r29
    326a:	ff 91       	pop	r31
    326c:	ef 91       	pop	r30
    326e:	bf 91       	pop	r27
    3270:	af 91       	pop	r26
    3272:	9f 91       	pop	r25
    3274:	8f 91       	pop	r24
    3276:	7f 91       	pop	r23
    3278:	6f 91       	pop	r22
    327a:	5f 91       	pop	r21
    327c:	4f 91       	pop	r20
    327e:	3f 91       	pop	r19
    3280:	2f 91       	pop	r18
    3282:	0f 90       	pop	r0
    3284:	0f be       	out	0x3f, r0	; 63
    3286:	0f 90       	pop	r0
    3288:	1f 90       	pop	r1
    328a:	18 95       	reti

0000328c <__vector_5>:

void __vector_5 (void) __attribute__((signal));
void __vector_5 (void)
{
    328c:	1f 92       	push	r1
    328e:	0f 92       	push	r0
    3290:	0f b6       	in	r0, 0x3f	; 63
    3292:	0f 92       	push	r0
    3294:	11 24       	eor	r1, r1
    3296:	2f 93       	push	r18
    3298:	3f 93       	push	r19
    329a:	4f 93       	push	r20
    329c:	5f 93       	push	r21
    329e:	6f 93       	push	r22
    32a0:	7f 93       	push	r23
    32a2:	8f 93       	push	r24
    32a4:	9f 93       	push	r25
    32a6:	af 93       	push	r26
    32a8:	bf 93       	push	r27
    32aa:	ef 93       	push	r30
    32ac:	ff 93       	push	r31
    32ae:	df 93       	push	r29
    32b0:	cf 93       	push	r28
    32b2:	cd b7       	in	r28, 0x3d	; 61
    32b4:	de b7       	in	r29, 0x3e	; 62
	if(TIMER2_pvCallBackFunc[TIMER2_OVF] != NULL)
    32b6:	80 91 a7 00 	lds	r24, 0x00A7
    32ba:	90 91 a8 00 	lds	r25, 0x00A8
    32be:	00 97       	sbiw	r24, 0x00	; 0
    32c0:	29 f0       	breq	.+10     	; 0x32cc <__vector_5+0x40>
	{
		TIMER2_pvCallBackFunc[TIMER2_OVF]();
    32c2:	e0 91 a7 00 	lds	r30, 0x00A7
    32c6:	f0 91 a8 00 	lds	r31, 0x00A8
    32ca:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    32cc:	cf 91       	pop	r28
    32ce:	df 91       	pop	r29
    32d0:	ff 91       	pop	r31
    32d2:	ef 91       	pop	r30
    32d4:	bf 91       	pop	r27
    32d6:	af 91       	pop	r26
    32d8:	9f 91       	pop	r25
    32da:	8f 91       	pop	r24
    32dc:	7f 91       	pop	r23
    32de:	6f 91       	pop	r22
    32e0:	5f 91       	pop	r21
    32e2:	4f 91       	pop	r20
    32e4:	3f 91       	pop	r19
    32e6:	2f 91       	pop	r18
    32e8:	0f 90       	pop	r0
    32ea:	0f be       	out	0x3f, r0	; 63
    32ec:	0f 90       	pop	r0
    32ee:	1f 90       	pop	r1
    32f0:	18 95       	reti

000032f2 <main>:
#include <util\delay.h>



void main(void)
{
    32f2:	0f 93       	push	r16
    32f4:	1f 93       	push	r17
    32f6:	df 93       	push	r29
    32f8:	cf 93       	push	r28
    32fa:	cd b7       	in	r28, 0x3d	; 61
    32fc:	de b7       	in	r29, 0x3e	; 62
    32fe:	c9 5c       	subi	r28, 0xC9	; 201
    3300:	d0 40       	sbci	r29, 0x00	; 0
    3302:	0f b6       	in	r0, 0x3f	; 63
    3304:	f8 94       	cli
    3306:	de bf       	out	0x3e, r29	; 62
    3308:	0f be       	out	0x3f, r0	; 63
    330a:	cd bf       	out	0x3d, r28	; 61
	PORT_voidInit();
    330c:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <PORT_voidInit>
	SPI_voidInit();
    3310:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <SPI_voidInit>
	SERVO_voidInit();
    3314:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <SERVO_voidInit>
	BUZZER_voidInit();
    3318:	0e 94 e6 07 	call	0xfcc	; 0xfcc <BUZZER_voidInit>

	GIE_voidEnable();
    331c:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <GIE_voidEnable>

	u8 Local_u8DataReceive;
	SSD_t SSD1={DIO_u8PORTA,DIO_u8PORTC,DIO_u8PIN7,SSD_u8ComCathode};
    3320:	fe 01       	movw	r30, r28
    3322:	ea 53       	subi	r30, 0x3A	; 58
    3324:	ff 4f       	sbci	r31, 0xFF	; 255
    3326:	10 82       	st	Z, r1
    3328:	fe 01       	movw	r30, r28
    332a:	ea 53       	subi	r30, 0x3A	; 58
    332c:	ff 4f       	sbci	r31, 0xFF	; 255
    332e:	82 e0       	ldi	r24, 0x02	; 2
    3330:	81 83       	std	Z+1, r24	; 0x01
    3332:	fe 01       	movw	r30, r28
    3334:	ea 53       	subi	r30, 0x3A	; 58
    3336:	ff 4f       	sbci	r31, 0xFF	; 255
    3338:	87 e0       	ldi	r24, 0x07	; 7
    333a:	82 83       	std	Z+2, r24	; 0x02
    333c:	fe 01       	movw	r30, r28
    333e:	ea 53       	subi	r30, 0x3A	; 58
    3340:	ff 4f       	sbci	r31, 0xFF	; 255
    3342:	13 82       	std	Z+3, r1	; 0x03

	while(1)
	{


		SPI_u8TransceiveSynch(&Local_u8DataReceive,5);
    3344:	ce 01       	movw	r24, r28
    3346:	8b 53       	subi	r24, 0x3B	; 59
    3348:	9f 4f       	sbci	r25, 0xFF	; 255
    334a:	65 e0       	ldi	r22, 0x05	; 5
    334c:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <SPI_u8TransceiveSynch>
    3350:	fe 01       	movw	r30, r28
    3352:	ef 53       	subi	r30, 0x3F	; 63
    3354:	ff 4f       	sbci	r31, 0xFF	; 255
    3356:	80 e0       	ldi	r24, 0x00	; 0
    3358:	90 e0       	ldi	r25, 0x00	; 0
    335a:	a0 e2       	ldi	r26, 0x20	; 32
    335c:	b1 e4       	ldi	r27, 0x41	; 65
    335e:	80 83       	st	Z, r24
    3360:	91 83       	std	Z+1, r25	; 0x01
    3362:	a2 83       	std	Z+2, r26	; 0x02
    3364:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3366:	8e 01       	movw	r16, r28
    3368:	03 54       	subi	r16, 0x43	; 67
    336a:	1f 4f       	sbci	r17, 0xFF	; 255
    336c:	fe 01       	movw	r30, r28
    336e:	ef 53       	subi	r30, 0x3F	; 63
    3370:	ff 4f       	sbci	r31, 0xFF	; 255
    3372:	60 81       	ld	r22, Z
    3374:	71 81       	ldd	r23, Z+1	; 0x01
    3376:	82 81       	ldd	r24, Z+2	; 0x02
    3378:	93 81       	ldd	r25, Z+3	; 0x03
    337a:	20 e0       	ldi	r18, 0x00	; 0
    337c:	30 e0       	ldi	r19, 0x00	; 0
    337e:	4a ef       	ldi	r20, 0xFA	; 250
    3380:	54 e4       	ldi	r21, 0x44	; 68
    3382:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3386:	dc 01       	movw	r26, r24
    3388:	cb 01       	movw	r24, r22
    338a:	f8 01       	movw	r30, r16
    338c:	80 83       	st	Z, r24
    338e:	91 83       	std	Z+1, r25	; 0x01
    3390:	a2 83       	std	Z+2, r26	; 0x02
    3392:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3394:	fe 01       	movw	r30, r28
    3396:	e3 54       	subi	r30, 0x43	; 67
    3398:	ff 4f       	sbci	r31, 0xFF	; 255
    339a:	60 81       	ld	r22, Z
    339c:	71 81       	ldd	r23, Z+1	; 0x01
    339e:	82 81       	ldd	r24, Z+2	; 0x02
    33a0:	93 81       	ldd	r25, Z+3	; 0x03
    33a2:	20 e0       	ldi	r18, 0x00	; 0
    33a4:	30 e0       	ldi	r19, 0x00	; 0
    33a6:	40 e8       	ldi	r20, 0x80	; 128
    33a8:	5f e3       	ldi	r21, 0x3F	; 63
    33aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33ae:	88 23       	and	r24, r24
    33b0:	44 f4       	brge	.+16     	; 0x33c2 <main+0xd0>
		__ticks = 1;
    33b2:	fe 01       	movw	r30, r28
    33b4:	e5 54       	subi	r30, 0x45	; 69
    33b6:	ff 4f       	sbci	r31, 0xFF	; 255
    33b8:	81 e0       	ldi	r24, 0x01	; 1
    33ba:	90 e0       	ldi	r25, 0x00	; 0
    33bc:	91 83       	std	Z+1, r25	; 0x01
    33be:	80 83       	st	Z, r24
    33c0:	64 c0       	rjmp	.+200    	; 0x348a <main+0x198>
	else if (__tmp > 65535)
    33c2:	fe 01       	movw	r30, r28
    33c4:	e3 54       	subi	r30, 0x43	; 67
    33c6:	ff 4f       	sbci	r31, 0xFF	; 255
    33c8:	60 81       	ld	r22, Z
    33ca:	71 81       	ldd	r23, Z+1	; 0x01
    33cc:	82 81       	ldd	r24, Z+2	; 0x02
    33ce:	93 81       	ldd	r25, Z+3	; 0x03
    33d0:	20 e0       	ldi	r18, 0x00	; 0
    33d2:	3f ef       	ldi	r19, 0xFF	; 255
    33d4:	4f e7       	ldi	r20, 0x7F	; 127
    33d6:	57 e4       	ldi	r21, 0x47	; 71
    33d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33dc:	18 16       	cp	r1, r24
    33de:	0c f0       	brlt	.+2      	; 0x33e2 <main+0xf0>
    33e0:	43 c0       	rjmp	.+134    	; 0x3468 <main+0x176>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33e2:	fe 01       	movw	r30, r28
    33e4:	ef 53       	subi	r30, 0x3F	; 63
    33e6:	ff 4f       	sbci	r31, 0xFF	; 255
    33e8:	60 81       	ld	r22, Z
    33ea:	71 81       	ldd	r23, Z+1	; 0x01
    33ec:	82 81       	ldd	r24, Z+2	; 0x02
    33ee:	93 81       	ldd	r25, Z+3	; 0x03
    33f0:	20 e0       	ldi	r18, 0x00	; 0
    33f2:	30 e0       	ldi	r19, 0x00	; 0
    33f4:	40 e2       	ldi	r20, 0x20	; 32
    33f6:	51 e4       	ldi	r21, 0x41	; 65
    33f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33fc:	dc 01       	movw	r26, r24
    33fe:	cb 01       	movw	r24, r22
    3400:	8e 01       	movw	r16, r28
    3402:	05 54       	subi	r16, 0x45	; 69
    3404:	1f 4f       	sbci	r17, 0xFF	; 255
    3406:	bc 01       	movw	r22, r24
    3408:	cd 01       	movw	r24, r26
    340a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    340e:	dc 01       	movw	r26, r24
    3410:	cb 01       	movw	r24, r22
    3412:	f8 01       	movw	r30, r16
    3414:	91 83       	std	Z+1, r25	; 0x01
    3416:	80 83       	st	Z, r24
    3418:	1f c0       	rjmp	.+62     	; 0x3458 <main+0x166>
    341a:	fe 01       	movw	r30, r28
    341c:	e7 54       	subi	r30, 0x47	; 71
    341e:	ff 4f       	sbci	r31, 0xFF	; 255
    3420:	88 ec       	ldi	r24, 0xC8	; 200
    3422:	90 e0       	ldi	r25, 0x00	; 0
    3424:	91 83       	std	Z+1, r25	; 0x01
    3426:	80 83       	st	Z, r24
    3428:	fe 01       	movw	r30, r28
    342a:	e7 54       	subi	r30, 0x47	; 71
    342c:	ff 4f       	sbci	r31, 0xFF	; 255
    342e:	80 81       	ld	r24, Z
    3430:	91 81       	ldd	r25, Z+1	; 0x01
    3432:	01 97       	sbiw	r24, 0x01	; 1
    3434:	f1 f7       	brne	.-4      	; 0x3432 <main+0x140>
    3436:	fe 01       	movw	r30, r28
    3438:	e7 54       	subi	r30, 0x47	; 71
    343a:	ff 4f       	sbci	r31, 0xFF	; 255
    343c:	91 83       	std	Z+1, r25	; 0x01
    343e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3440:	de 01       	movw	r26, r28
    3442:	a5 54       	subi	r26, 0x45	; 69
    3444:	bf 4f       	sbci	r27, 0xFF	; 255
    3446:	fe 01       	movw	r30, r28
    3448:	e5 54       	subi	r30, 0x45	; 69
    344a:	ff 4f       	sbci	r31, 0xFF	; 255
    344c:	80 81       	ld	r24, Z
    344e:	91 81       	ldd	r25, Z+1	; 0x01
    3450:	01 97       	sbiw	r24, 0x01	; 1
    3452:	11 96       	adiw	r26, 0x01	; 1
    3454:	9c 93       	st	X, r25
    3456:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3458:	fe 01       	movw	r30, r28
    345a:	e5 54       	subi	r30, 0x45	; 69
    345c:	ff 4f       	sbci	r31, 0xFF	; 255
    345e:	80 81       	ld	r24, Z
    3460:	91 81       	ldd	r25, Z+1	; 0x01
    3462:	00 97       	sbiw	r24, 0x00	; 0
    3464:	d1 f6       	brne	.-76     	; 0x341a <main+0x128>
    3466:	28 c0       	rjmp	.+80     	; 0x34b8 <main+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3468:	8e 01       	movw	r16, r28
    346a:	05 54       	subi	r16, 0x45	; 69
    346c:	1f 4f       	sbci	r17, 0xFF	; 255
    346e:	fe 01       	movw	r30, r28
    3470:	e3 54       	subi	r30, 0x43	; 67
    3472:	ff 4f       	sbci	r31, 0xFF	; 255
    3474:	60 81       	ld	r22, Z
    3476:	71 81       	ldd	r23, Z+1	; 0x01
    3478:	82 81       	ldd	r24, Z+2	; 0x02
    347a:	93 81       	ldd	r25, Z+3	; 0x03
    347c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3480:	dc 01       	movw	r26, r24
    3482:	cb 01       	movw	r24, r22
    3484:	f8 01       	movw	r30, r16
    3486:	91 83       	std	Z+1, r25	; 0x01
    3488:	80 83       	st	Z, r24
    348a:	de 01       	movw	r26, r28
    348c:	a9 54       	subi	r26, 0x49	; 73
    348e:	bf 4f       	sbci	r27, 0xFF	; 255
    3490:	fe 01       	movw	r30, r28
    3492:	e5 54       	subi	r30, 0x45	; 69
    3494:	ff 4f       	sbci	r31, 0xFF	; 255
    3496:	80 81       	ld	r24, Z
    3498:	91 81       	ldd	r25, Z+1	; 0x01
    349a:	11 96       	adiw	r26, 0x01	; 1
    349c:	9c 93       	st	X, r25
    349e:	8e 93       	st	-X, r24
    34a0:	fe 01       	movw	r30, r28
    34a2:	e9 54       	subi	r30, 0x49	; 73
    34a4:	ff 4f       	sbci	r31, 0xFF	; 255
    34a6:	80 81       	ld	r24, Z
    34a8:	91 81       	ldd	r25, Z+1	; 0x01
    34aa:	01 97       	sbiw	r24, 0x01	; 1
    34ac:	f1 f7       	brne	.-4      	; 0x34aa <main+0x1b8>
    34ae:	fe 01       	movw	r30, r28
    34b0:	e9 54       	subi	r30, 0x49	; 73
    34b2:	ff 4f       	sbci	r31, 0xFF	; 255
    34b4:	91 83       	std	Z+1, r25	; 0x01
    34b6:	80 83       	st	Z, r24
		_delay_ms(10);

		/*Wrong Pass diplay on SSD Number of Trails left*/
		if(Local_u8DataReceive == 3)
    34b8:	fe 01       	movw	r30, r28
    34ba:	eb 53       	subi	r30, 0x3B	; 59
    34bc:	ff 4f       	sbci	r31, 0xFF	; 255
    34be:	80 81       	ld	r24, Z
    34c0:	83 30       	cpi	r24, 0x03	; 3
    34c2:	61 f4       	brne	.+24     	; 0x34dc <main+0x1ea>
		{
			DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN7,DIO_u8PIN_LOW);
    34c4:	82 e0       	ldi	r24, 0x02	; 2
    34c6:	67 e0       	ldi	r22, 0x07	; 7
    34c8:	40 e0       	ldi	r20, 0x00	; 0
    34ca:	0e 94 2a 0b 	call	0x1654	; 0x1654 <DIO_u8SetPinValue>
			SSD_voidSetNumber(&SSD1,2);
    34ce:	ce 01       	movw	r24, r28
    34d0:	8a 53       	subi	r24, 0x3A	; 58
    34d2:	9f 4f       	sbci	r25, 0xFF	; 255
    34d4:	62 e0       	ldi	r22, 0x02	; 2
    34d6:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <SSD_voidSetNumber>
    34da:	29 c0       	rjmp	.+82     	; 0x352e <main+0x23c>
		}
		else if(Local_u8DataReceive == 2)
    34dc:	fe 01       	movw	r30, r28
    34de:	eb 53       	subi	r30, 0x3B	; 59
    34e0:	ff 4f       	sbci	r31, 0xFF	; 255
    34e2:	80 81       	ld	r24, Z
    34e4:	82 30       	cpi	r24, 0x02	; 2
    34e6:	61 f4       	brne	.+24     	; 0x3500 <main+0x20e>
		{
			DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN7,DIO_u8PIN_LOW);
    34e8:	82 e0       	ldi	r24, 0x02	; 2
    34ea:	67 e0       	ldi	r22, 0x07	; 7
    34ec:	40 e0       	ldi	r20, 0x00	; 0
    34ee:	0e 94 2a 0b 	call	0x1654	; 0x1654 <DIO_u8SetPinValue>
			SSD_voidSetNumber(&SSD1,1);
    34f2:	ce 01       	movw	r24, r28
    34f4:	8a 53       	subi	r24, 0x3A	; 58
    34f6:	9f 4f       	sbci	r25, 0xFF	; 255
    34f8:	61 e0       	ldi	r22, 0x01	; 1
    34fa:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <SSD_voidSetNumber>
    34fe:	17 c0       	rjmp	.+46     	; 0x352e <main+0x23c>
		}
		else if(Local_u8DataReceive == 1)
    3500:	fe 01       	movw	r30, r28
    3502:	eb 53       	subi	r30, 0x3B	; 59
    3504:	ff 4f       	sbci	r31, 0xFF	; 255
    3506:	80 81       	ld	r24, Z
    3508:	81 30       	cpi	r24, 0x01	; 1
    350a:	61 f4       	brne	.+24     	; 0x3524 <main+0x232>
		{
			DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN7,DIO_u8PIN_LOW);
    350c:	82 e0       	ldi	r24, 0x02	; 2
    350e:	67 e0       	ldi	r22, 0x07	; 7
    3510:	40 e0       	ldi	r20, 0x00	; 0
    3512:	0e 94 2a 0b 	call	0x1654	; 0x1654 <DIO_u8SetPinValue>
			SSD_voidSetNumber(&SSD1,0);
    3516:	ce 01       	movw	r24, r28
    3518:	8a 53       	subi	r24, 0x3A	; 58
    351a:	9f 4f       	sbci	r25, 0xFF	; 255
    351c:	60 e0       	ldi	r22, 0x00	; 0
    351e:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <SSD_voidSetNumber>
    3522:	05 c0       	rjmp	.+10     	; 0x352e <main+0x23c>
		}
		else
		{
			DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN7,DIO_u8PIN_HIGH);
    3524:	82 e0       	ldi	r24, 0x02	; 2
    3526:	67 e0       	ldi	r22, 0x07	; 7
    3528:	41 e0       	ldi	r20, 0x01	; 1
    352a:	0e 94 2a 0b 	call	0x1654	; 0x1654 <DIO_u8SetPinValue>
		}


		SPI_u8TransceiveSynch(&Local_u8DataReceive,5);
    352e:	ce 01       	movw	r24, r28
    3530:	8b 53       	subi	r24, 0x3B	; 59
    3532:	9f 4f       	sbci	r25, 0xFF	; 255
    3534:	65 e0       	ldi	r22, 0x05	; 5
    3536:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <SPI_u8TransceiveSynch>
    353a:	fe 01       	movw	r30, r28
    353c:	ed 54       	subi	r30, 0x4D	; 77
    353e:	ff 4f       	sbci	r31, 0xFF	; 255
    3540:	80 e0       	ldi	r24, 0x00	; 0
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	a0 e2       	ldi	r26, 0x20	; 32
    3546:	b1 e4       	ldi	r27, 0x41	; 65
    3548:	80 83       	st	Z, r24
    354a:	91 83       	std	Z+1, r25	; 0x01
    354c:	a2 83       	std	Z+2, r26	; 0x02
    354e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3550:	8e 01       	movw	r16, r28
    3552:	01 55       	subi	r16, 0x51	; 81
    3554:	1f 4f       	sbci	r17, 0xFF	; 255
    3556:	fe 01       	movw	r30, r28
    3558:	ed 54       	subi	r30, 0x4D	; 77
    355a:	ff 4f       	sbci	r31, 0xFF	; 255
    355c:	60 81       	ld	r22, Z
    355e:	71 81       	ldd	r23, Z+1	; 0x01
    3560:	82 81       	ldd	r24, Z+2	; 0x02
    3562:	93 81       	ldd	r25, Z+3	; 0x03
    3564:	20 e0       	ldi	r18, 0x00	; 0
    3566:	30 e0       	ldi	r19, 0x00	; 0
    3568:	4a ef       	ldi	r20, 0xFA	; 250
    356a:	54 e4       	ldi	r21, 0x44	; 68
    356c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3570:	dc 01       	movw	r26, r24
    3572:	cb 01       	movw	r24, r22
    3574:	f8 01       	movw	r30, r16
    3576:	80 83       	st	Z, r24
    3578:	91 83       	std	Z+1, r25	; 0x01
    357a:	a2 83       	std	Z+2, r26	; 0x02
    357c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    357e:	fe 01       	movw	r30, r28
    3580:	e1 55       	subi	r30, 0x51	; 81
    3582:	ff 4f       	sbci	r31, 0xFF	; 255
    3584:	60 81       	ld	r22, Z
    3586:	71 81       	ldd	r23, Z+1	; 0x01
    3588:	82 81       	ldd	r24, Z+2	; 0x02
    358a:	93 81       	ldd	r25, Z+3	; 0x03
    358c:	20 e0       	ldi	r18, 0x00	; 0
    358e:	30 e0       	ldi	r19, 0x00	; 0
    3590:	40 e8       	ldi	r20, 0x80	; 128
    3592:	5f e3       	ldi	r21, 0x3F	; 63
    3594:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3598:	88 23       	and	r24, r24
    359a:	44 f4       	brge	.+16     	; 0x35ac <main+0x2ba>
		__ticks = 1;
    359c:	fe 01       	movw	r30, r28
    359e:	e3 55       	subi	r30, 0x53	; 83
    35a0:	ff 4f       	sbci	r31, 0xFF	; 255
    35a2:	81 e0       	ldi	r24, 0x01	; 1
    35a4:	90 e0       	ldi	r25, 0x00	; 0
    35a6:	91 83       	std	Z+1, r25	; 0x01
    35a8:	80 83       	st	Z, r24
    35aa:	64 c0       	rjmp	.+200    	; 0x3674 <main+0x382>
	else if (__tmp > 65535)
    35ac:	fe 01       	movw	r30, r28
    35ae:	e1 55       	subi	r30, 0x51	; 81
    35b0:	ff 4f       	sbci	r31, 0xFF	; 255
    35b2:	60 81       	ld	r22, Z
    35b4:	71 81       	ldd	r23, Z+1	; 0x01
    35b6:	82 81       	ldd	r24, Z+2	; 0x02
    35b8:	93 81       	ldd	r25, Z+3	; 0x03
    35ba:	20 e0       	ldi	r18, 0x00	; 0
    35bc:	3f ef       	ldi	r19, 0xFF	; 255
    35be:	4f e7       	ldi	r20, 0x7F	; 127
    35c0:	57 e4       	ldi	r21, 0x47	; 71
    35c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35c6:	18 16       	cp	r1, r24
    35c8:	0c f0       	brlt	.+2      	; 0x35cc <main+0x2da>
    35ca:	43 c0       	rjmp	.+134    	; 0x3652 <main+0x360>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35cc:	fe 01       	movw	r30, r28
    35ce:	ed 54       	subi	r30, 0x4D	; 77
    35d0:	ff 4f       	sbci	r31, 0xFF	; 255
    35d2:	60 81       	ld	r22, Z
    35d4:	71 81       	ldd	r23, Z+1	; 0x01
    35d6:	82 81       	ldd	r24, Z+2	; 0x02
    35d8:	93 81       	ldd	r25, Z+3	; 0x03
    35da:	20 e0       	ldi	r18, 0x00	; 0
    35dc:	30 e0       	ldi	r19, 0x00	; 0
    35de:	40 e2       	ldi	r20, 0x20	; 32
    35e0:	51 e4       	ldi	r21, 0x41	; 65
    35e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35e6:	dc 01       	movw	r26, r24
    35e8:	cb 01       	movw	r24, r22
    35ea:	8e 01       	movw	r16, r28
    35ec:	03 55       	subi	r16, 0x53	; 83
    35ee:	1f 4f       	sbci	r17, 0xFF	; 255
    35f0:	bc 01       	movw	r22, r24
    35f2:	cd 01       	movw	r24, r26
    35f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f8:	dc 01       	movw	r26, r24
    35fa:	cb 01       	movw	r24, r22
    35fc:	f8 01       	movw	r30, r16
    35fe:	91 83       	std	Z+1, r25	; 0x01
    3600:	80 83       	st	Z, r24
    3602:	1f c0       	rjmp	.+62     	; 0x3642 <main+0x350>
    3604:	fe 01       	movw	r30, r28
    3606:	e5 55       	subi	r30, 0x55	; 85
    3608:	ff 4f       	sbci	r31, 0xFF	; 255
    360a:	88 ec       	ldi	r24, 0xC8	; 200
    360c:	90 e0       	ldi	r25, 0x00	; 0
    360e:	91 83       	std	Z+1, r25	; 0x01
    3610:	80 83       	st	Z, r24
    3612:	fe 01       	movw	r30, r28
    3614:	e5 55       	subi	r30, 0x55	; 85
    3616:	ff 4f       	sbci	r31, 0xFF	; 255
    3618:	80 81       	ld	r24, Z
    361a:	91 81       	ldd	r25, Z+1	; 0x01
    361c:	01 97       	sbiw	r24, 0x01	; 1
    361e:	f1 f7       	brne	.-4      	; 0x361c <main+0x32a>
    3620:	fe 01       	movw	r30, r28
    3622:	e5 55       	subi	r30, 0x55	; 85
    3624:	ff 4f       	sbci	r31, 0xFF	; 255
    3626:	91 83       	std	Z+1, r25	; 0x01
    3628:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    362a:	de 01       	movw	r26, r28
    362c:	a3 55       	subi	r26, 0x53	; 83
    362e:	bf 4f       	sbci	r27, 0xFF	; 255
    3630:	fe 01       	movw	r30, r28
    3632:	e3 55       	subi	r30, 0x53	; 83
    3634:	ff 4f       	sbci	r31, 0xFF	; 255
    3636:	80 81       	ld	r24, Z
    3638:	91 81       	ldd	r25, Z+1	; 0x01
    363a:	01 97       	sbiw	r24, 0x01	; 1
    363c:	11 96       	adiw	r26, 0x01	; 1
    363e:	9c 93       	st	X, r25
    3640:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3642:	fe 01       	movw	r30, r28
    3644:	e3 55       	subi	r30, 0x53	; 83
    3646:	ff 4f       	sbci	r31, 0xFF	; 255
    3648:	80 81       	ld	r24, Z
    364a:	91 81       	ldd	r25, Z+1	; 0x01
    364c:	00 97       	sbiw	r24, 0x00	; 0
    364e:	d1 f6       	brne	.-76     	; 0x3604 <main+0x312>
    3650:	28 c0       	rjmp	.+80     	; 0x36a2 <main+0x3b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3652:	8e 01       	movw	r16, r28
    3654:	03 55       	subi	r16, 0x53	; 83
    3656:	1f 4f       	sbci	r17, 0xFF	; 255
    3658:	fe 01       	movw	r30, r28
    365a:	e1 55       	subi	r30, 0x51	; 81
    365c:	ff 4f       	sbci	r31, 0xFF	; 255
    365e:	60 81       	ld	r22, Z
    3660:	71 81       	ldd	r23, Z+1	; 0x01
    3662:	82 81       	ldd	r24, Z+2	; 0x02
    3664:	93 81       	ldd	r25, Z+3	; 0x03
    3666:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    366a:	dc 01       	movw	r26, r24
    366c:	cb 01       	movw	r24, r22
    366e:	f8 01       	movw	r30, r16
    3670:	91 83       	std	Z+1, r25	; 0x01
    3672:	80 83       	st	Z, r24
    3674:	de 01       	movw	r26, r28
    3676:	a7 55       	subi	r26, 0x57	; 87
    3678:	bf 4f       	sbci	r27, 0xFF	; 255
    367a:	fe 01       	movw	r30, r28
    367c:	e3 55       	subi	r30, 0x53	; 83
    367e:	ff 4f       	sbci	r31, 0xFF	; 255
    3680:	80 81       	ld	r24, Z
    3682:	91 81       	ldd	r25, Z+1	; 0x01
    3684:	11 96       	adiw	r26, 0x01	; 1
    3686:	9c 93       	st	X, r25
    3688:	8e 93       	st	-X, r24
    368a:	fe 01       	movw	r30, r28
    368c:	e7 55       	subi	r30, 0x57	; 87
    368e:	ff 4f       	sbci	r31, 0xFF	; 255
    3690:	80 81       	ld	r24, Z
    3692:	91 81       	ldd	r25, Z+1	; 0x01
    3694:	01 97       	sbiw	r24, 0x01	; 1
    3696:	f1 f7       	brne	.-4      	; 0x3694 <main+0x3a2>
    3698:	fe 01       	movw	r30, r28
    369a:	e7 55       	subi	r30, 0x57	; 87
    369c:	ff 4f       	sbci	r31, 0xFF	; 255
    369e:	91 83       	std	Z+1, r25	; 0x01
    36a0:	80 83       	st	Z, r24
		_delay_ms(10);


		/*Open Door by Setting Servo 180 degree*/
		if(Local_u8DataReceive == 5)
    36a2:	fe 01       	movw	r30, r28
    36a4:	eb 53       	subi	r30, 0x3B	; 59
    36a6:	ff 4f       	sbci	r31, 0xFF	; 255
    36a8:	80 81       	ld	r24, Z
    36aa:	85 30       	cpi	r24, 0x05	; 5
    36ac:	19 f4       	brne	.+6      	; 0x36b4 <main+0x3c2>
		{
			SERVO_voidSetAngle(180);
    36ae:	84 eb       	ldi	r24, 0xB4	; 180
    36b0:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <SERVO_voidSetAngle>
		}


		SPI_u8TransceiveSynch(&Local_u8DataReceive,6);
    36b4:	ce 01       	movw	r24, r28
    36b6:	8b 53       	subi	r24, 0x3B	; 59
    36b8:	9f 4f       	sbci	r25, 0xFF	; 255
    36ba:	66 e0       	ldi	r22, 0x06	; 6
    36bc:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <SPI_u8TransceiveSynch>
    36c0:	fe 01       	movw	r30, r28
    36c2:	eb 55       	subi	r30, 0x5B	; 91
    36c4:	ff 4f       	sbci	r31, 0xFF	; 255
    36c6:	80 e0       	ldi	r24, 0x00	; 0
    36c8:	90 e0       	ldi	r25, 0x00	; 0
    36ca:	a0 e2       	ldi	r26, 0x20	; 32
    36cc:	b1 e4       	ldi	r27, 0x41	; 65
    36ce:	80 83       	st	Z, r24
    36d0:	91 83       	std	Z+1, r25	; 0x01
    36d2:	a2 83       	std	Z+2, r26	; 0x02
    36d4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36d6:	8e 01       	movw	r16, r28
    36d8:	0f 55       	subi	r16, 0x5F	; 95
    36da:	1f 4f       	sbci	r17, 0xFF	; 255
    36dc:	fe 01       	movw	r30, r28
    36de:	eb 55       	subi	r30, 0x5B	; 91
    36e0:	ff 4f       	sbci	r31, 0xFF	; 255
    36e2:	60 81       	ld	r22, Z
    36e4:	71 81       	ldd	r23, Z+1	; 0x01
    36e6:	82 81       	ldd	r24, Z+2	; 0x02
    36e8:	93 81       	ldd	r25, Z+3	; 0x03
    36ea:	20 e0       	ldi	r18, 0x00	; 0
    36ec:	30 e0       	ldi	r19, 0x00	; 0
    36ee:	4a ef       	ldi	r20, 0xFA	; 250
    36f0:	54 e4       	ldi	r21, 0x44	; 68
    36f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36f6:	dc 01       	movw	r26, r24
    36f8:	cb 01       	movw	r24, r22
    36fa:	f8 01       	movw	r30, r16
    36fc:	80 83       	st	Z, r24
    36fe:	91 83       	std	Z+1, r25	; 0x01
    3700:	a2 83       	std	Z+2, r26	; 0x02
    3702:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3704:	fe 01       	movw	r30, r28
    3706:	ef 55       	subi	r30, 0x5F	; 95
    3708:	ff 4f       	sbci	r31, 0xFF	; 255
    370a:	60 81       	ld	r22, Z
    370c:	71 81       	ldd	r23, Z+1	; 0x01
    370e:	82 81       	ldd	r24, Z+2	; 0x02
    3710:	93 81       	ldd	r25, Z+3	; 0x03
    3712:	20 e0       	ldi	r18, 0x00	; 0
    3714:	30 e0       	ldi	r19, 0x00	; 0
    3716:	40 e8       	ldi	r20, 0x80	; 128
    3718:	5f e3       	ldi	r21, 0x3F	; 63
    371a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    371e:	88 23       	and	r24, r24
    3720:	44 f4       	brge	.+16     	; 0x3732 <main+0x440>
		__ticks = 1;
    3722:	fe 01       	movw	r30, r28
    3724:	e1 56       	subi	r30, 0x61	; 97
    3726:	ff 4f       	sbci	r31, 0xFF	; 255
    3728:	81 e0       	ldi	r24, 0x01	; 1
    372a:	90 e0       	ldi	r25, 0x00	; 0
    372c:	91 83       	std	Z+1, r25	; 0x01
    372e:	80 83       	st	Z, r24
    3730:	64 c0       	rjmp	.+200    	; 0x37fa <main+0x508>
	else if (__tmp > 65535)
    3732:	fe 01       	movw	r30, r28
    3734:	ef 55       	subi	r30, 0x5F	; 95
    3736:	ff 4f       	sbci	r31, 0xFF	; 255
    3738:	60 81       	ld	r22, Z
    373a:	71 81       	ldd	r23, Z+1	; 0x01
    373c:	82 81       	ldd	r24, Z+2	; 0x02
    373e:	93 81       	ldd	r25, Z+3	; 0x03
    3740:	20 e0       	ldi	r18, 0x00	; 0
    3742:	3f ef       	ldi	r19, 0xFF	; 255
    3744:	4f e7       	ldi	r20, 0x7F	; 127
    3746:	57 e4       	ldi	r21, 0x47	; 71
    3748:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    374c:	18 16       	cp	r1, r24
    374e:	0c f0       	brlt	.+2      	; 0x3752 <main+0x460>
    3750:	43 c0       	rjmp	.+134    	; 0x37d8 <main+0x4e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3752:	fe 01       	movw	r30, r28
    3754:	eb 55       	subi	r30, 0x5B	; 91
    3756:	ff 4f       	sbci	r31, 0xFF	; 255
    3758:	60 81       	ld	r22, Z
    375a:	71 81       	ldd	r23, Z+1	; 0x01
    375c:	82 81       	ldd	r24, Z+2	; 0x02
    375e:	93 81       	ldd	r25, Z+3	; 0x03
    3760:	20 e0       	ldi	r18, 0x00	; 0
    3762:	30 e0       	ldi	r19, 0x00	; 0
    3764:	40 e2       	ldi	r20, 0x20	; 32
    3766:	51 e4       	ldi	r21, 0x41	; 65
    3768:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    376c:	dc 01       	movw	r26, r24
    376e:	cb 01       	movw	r24, r22
    3770:	8e 01       	movw	r16, r28
    3772:	01 56       	subi	r16, 0x61	; 97
    3774:	1f 4f       	sbci	r17, 0xFF	; 255
    3776:	bc 01       	movw	r22, r24
    3778:	cd 01       	movw	r24, r26
    377a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    377e:	dc 01       	movw	r26, r24
    3780:	cb 01       	movw	r24, r22
    3782:	f8 01       	movw	r30, r16
    3784:	91 83       	std	Z+1, r25	; 0x01
    3786:	80 83       	st	Z, r24
    3788:	1f c0       	rjmp	.+62     	; 0x37c8 <main+0x4d6>
    378a:	fe 01       	movw	r30, r28
    378c:	e3 56       	subi	r30, 0x63	; 99
    378e:	ff 4f       	sbci	r31, 0xFF	; 255
    3790:	88 ec       	ldi	r24, 0xC8	; 200
    3792:	90 e0       	ldi	r25, 0x00	; 0
    3794:	91 83       	std	Z+1, r25	; 0x01
    3796:	80 83       	st	Z, r24
    3798:	fe 01       	movw	r30, r28
    379a:	e3 56       	subi	r30, 0x63	; 99
    379c:	ff 4f       	sbci	r31, 0xFF	; 255
    379e:	80 81       	ld	r24, Z
    37a0:	91 81       	ldd	r25, Z+1	; 0x01
    37a2:	01 97       	sbiw	r24, 0x01	; 1
    37a4:	f1 f7       	brne	.-4      	; 0x37a2 <main+0x4b0>
    37a6:	fe 01       	movw	r30, r28
    37a8:	e3 56       	subi	r30, 0x63	; 99
    37aa:	ff 4f       	sbci	r31, 0xFF	; 255
    37ac:	91 83       	std	Z+1, r25	; 0x01
    37ae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37b0:	de 01       	movw	r26, r28
    37b2:	a1 56       	subi	r26, 0x61	; 97
    37b4:	bf 4f       	sbci	r27, 0xFF	; 255
    37b6:	fe 01       	movw	r30, r28
    37b8:	e1 56       	subi	r30, 0x61	; 97
    37ba:	ff 4f       	sbci	r31, 0xFF	; 255
    37bc:	80 81       	ld	r24, Z
    37be:	91 81       	ldd	r25, Z+1	; 0x01
    37c0:	01 97       	sbiw	r24, 0x01	; 1
    37c2:	11 96       	adiw	r26, 0x01	; 1
    37c4:	9c 93       	st	X, r25
    37c6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37c8:	fe 01       	movw	r30, r28
    37ca:	e1 56       	subi	r30, 0x61	; 97
    37cc:	ff 4f       	sbci	r31, 0xFF	; 255
    37ce:	80 81       	ld	r24, Z
    37d0:	91 81       	ldd	r25, Z+1	; 0x01
    37d2:	00 97       	sbiw	r24, 0x00	; 0
    37d4:	d1 f6       	brne	.-76     	; 0x378a <main+0x498>
    37d6:	28 c0       	rjmp	.+80     	; 0x3828 <main+0x536>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37d8:	8e 01       	movw	r16, r28
    37da:	01 56       	subi	r16, 0x61	; 97
    37dc:	1f 4f       	sbci	r17, 0xFF	; 255
    37de:	fe 01       	movw	r30, r28
    37e0:	ef 55       	subi	r30, 0x5F	; 95
    37e2:	ff 4f       	sbci	r31, 0xFF	; 255
    37e4:	60 81       	ld	r22, Z
    37e6:	71 81       	ldd	r23, Z+1	; 0x01
    37e8:	82 81       	ldd	r24, Z+2	; 0x02
    37ea:	93 81       	ldd	r25, Z+3	; 0x03
    37ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37f0:	dc 01       	movw	r26, r24
    37f2:	cb 01       	movw	r24, r22
    37f4:	f8 01       	movw	r30, r16
    37f6:	91 83       	std	Z+1, r25	; 0x01
    37f8:	80 83       	st	Z, r24
    37fa:	de 01       	movw	r26, r28
    37fc:	a5 56       	subi	r26, 0x65	; 101
    37fe:	bf 4f       	sbci	r27, 0xFF	; 255
    3800:	fe 01       	movw	r30, r28
    3802:	e1 56       	subi	r30, 0x61	; 97
    3804:	ff 4f       	sbci	r31, 0xFF	; 255
    3806:	80 81       	ld	r24, Z
    3808:	91 81       	ldd	r25, Z+1	; 0x01
    380a:	11 96       	adiw	r26, 0x01	; 1
    380c:	9c 93       	st	X, r25
    380e:	8e 93       	st	-X, r24
    3810:	fe 01       	movw	r30, r28
    3812:	e5 56       	subi	r30, 0x65	; 101
    3814:	ff 4f       	sbci	r31, 0xFF	; 255
    3816:	80 81       	ld	r24, Z
    3818:	91 81       	ldd	r25, Z+1	; 0x01
    381a:	01 97       	sbiw	r24, 0x01	; 1
    381c:	f1 f7       	brne	.-4      	; 0x381a <main+0x528>
    381e:	fe 01       	movw	r30, r28
    3820:	e5 56       	subi	r30, 0x65	; 101
    3822:	ff 4f       	sbci	r31, 0xFF	; 255
    3824:	91 83       	std	Z+1, r25	; 0x01
    3826:	80 83       	st	Z, r24
		_delay_ms(10);

		/*Fan Control*/
		if(Local_u8DataReceive == 9)
    3828:	fe 01       	movw	r30, r28
    382a:	eb 53       	subi	r30, 0x3B	; 59
    382c:	ff 4f       	sbci	r31, 0xFF	; 255
    382e:	80 81       	ld	r24, Z
    3830:	89 30       	cpi	r24, 0x09	; 9
    3832:	31 f4       	brne	.+12     	; 0x3840 <main+0x54e>
		{
			/*Motor ON*/
			DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN6,DIO_u8PIN_HIGH);
    3834:	82 e0       	ldi	r24, 0x02	; 2
    3836:	66 e0       	ldi	r22, 0x06	; 6
    3838:	41 e0       	ldi	r20, 0x01	; 1
    383a:	0e 94 2a 0b 	call	0x1654	; 0x1654 <DIO_u8SetPinValue>
    383e:	0b c0       	rjmp	.+22     	; 0x3856 <main+0x564>
		}

		//			SPI_u8TransceiveSynch(&Local_u8DataReceive,5);
		//			_delay_ms(10);

		else if(Local_u8DataReceive == 8)
    3840:	fe 01       	movw	r30, r28
    3842:	eb 53       	subi	r30, 0x3B	; 59
    3844:	ff 4f       	sbci	r31, 0xFF	; 255
    3846:	80 81       	ld	r24, Z
    3848:	88 30       	cpi	r24, 0x08	; 8
    384a:	29 f4       	brne	.+10     	; 0x3856 <main+0x564>
		{
			/*Motor OFF*/
			DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN6,DIO_u8PIN_LOW);
    384c:	82 e0       	ldi	r24, 0x02	; 2
    384e:	66 e0       	ldi	r22, 0x06	; 6
    3850:	40 e0       	ldi	r20, 0x00	; 0
    3852:	0e 94 2a 0b 	call	0x1654	; 0x1654 <DIO_u8SetPinValue>
		}

		SPI_u8TransceiveSynch(&Local_u8DataReceive,3);
    3856:	ce 01       	movw	r24, r28
    3858:	8b 53       	subi	r24, 0x3B	; 59
    385a:	9f 4f       	sbci	r25, 0xFF	; 255
    385c:	63 e0       	ldi	r22, 0x03	; 3
    385e:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <SPI_u8TransceiveSynch>
    3862:	fe 01       	movw	r30, r28
    3864:	e9 56       	subi	r30, 0x69	; 105
    3866:	ff 4f       	sbci	r31, 0xFF	; 255
    3868:	80 e0       	ldi	r24, 0x00	; 0
    386a:	90 e0       	ldi	r25, 0x00	; 0
    386c:	a0 e2       	ldi	r26, 0x20	; 32
    386e:	b1 e4       	ldi	r27, 0x41	; 65
    3870:	80 83       	st	Z, r24
    3872:	91 83       	std	Z+1, r25	; 0x01
    3874:	a2 83       	std	Z+2, r26	; 0x02
    3876:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3878:	8e 01       	movw	r16, r28
    387a:	0d 56       	subi	r16, 0x6D	; 109
    387c:	1f 4f       	sbci	r17, 0xFF	; 255
    387e:	fe 01       	movw	r30, r28
    3880:	e9 56       	subi	r30, 0x69	; 105
    3882:	ff 4f       	sbci	r31, 0xFF	; 255
    3884:	60 81       	ld	r22, Z
    3886:	71 81       	ldd	r23, Z+1	; 0x01
    3888:	82 81       	ldd	r24, Z+2	; 0x02
    388a:	93 81       	ldd	r25, Z+3	; 0x03
    388c:	20 e0       	ldi	r18, 0x00	; 0
    388e:	30 e0       	ldi	r19, 0x00	; 0
    3890:	4a ef       	ldi	r20, 0xFA	; 250
    3892:	54 e4       	ldi	r21, 0x44	; 68
    3894:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3898:	dc 01       	movw	r26, r24
    389a:	cb 01       	movw	r24, r22
    389c:	f8 01       	movw	r30, r16
    389e:	80 83       	st	Z, r24
    38a0:	91 83       	std	Z+1, r25	; 0x01
    38a2:	a2 83       	std	Z+2, r26	; 0x02
    38a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    38a6:	fe 01       	movw	r30, r28
    38a8:	ed 56       	subi	r30, 0x6D	; 109
    38aa:	ff 4f       	sbci	r31, 0xFF	; 255
    38ac:	60 81       	ld	r22, Z
    38ae:	71 81       	ldd	r23, Z+1	; 0x01
    38b0:	82 81       	ldd	r24, Z+2	; 0x02
    38b2:	93 81       	ldd	r25, Z+3	; 0x03
    38b4:	20 e0       	ldi	r18, 0x00	; 0
    38b6:	30 e0       	ldi	r19, 0x00	; 0
    38b8:	40 e8       	ldi	r20, 0x80	; 128
    38ba:	5f e3       	ldi	r21, 0x3F	; 63
    38bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38c0:	88 23       	and	r24, r24
    38c2:	44 f4       	brge	.+16     	; 0x38d4 <main+0x5e2>
		__ticks = 1;
    38c4:	fe 01       	movw	r30, r28
    38c6:	ef 56       	subi	r30, 0x6F	; 111
    38c8:	ff 4f       	sbci	r31, 0xFF	; 255
    38ca:	81 e0       	ldi	r24, 0x01	; 1
    38cc:	90 e0       	ldi	r25, 0x00	; 0
    38ce:	91 83       	std	Z+1, r25	; 0x01
    38d0:	80 83       	st	Z, r24
    38d2:	64 c0       	rjmp	.+200    	; 0x399c <main+0x6aa>
	else if (__tmp > 65535)
    38d4:	fe 01       	movw	r30, r28
    38d6:	ed 56       	subi	r30, 0x6D	; 109
    38d8:	ff 4f       	sbci	r31, 0xFF	; 255
    38da:	60 81       	ld	r22, Z
    38dc:	71 81       	ldd	r23, Z+1	; 0x01
    38de:	82 81       	ldd	r24, Z+2	; 0x02
    38e0:	93 81       	ldd	r25, Z+3	; 0x03
    38e2:	20 e0       	ldi	r18, 0x00	; 0
    38e4:	3f ef       	ldi	r19, 0xFF	; 255
    38e6:	4f e7       	ldi	r20, 0x7F	; 127
    38e8:	57 e4       	ldi	r21, 0x47	; 71
    38ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38ee:	18 16       	cp	r1, r24
    38f0:	0c f0       	brlt	.+2      	; 0x38f4 <main+0x602>
    38f2:	43 c0       	rjmp	.+134    	; 0x397a <main+0x688>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38f4:	fe 01       	movw	r30, r28
    38f6:	e9 56       	subi	r30, 0x69	; 105
    38f8:	ff 4f       	sbci	r31, 0xFF	; 255
    38fa:	60 81       	ld	r22, Z
    38fc:	71 81       	ldd	r23, Z+1	; 0x01
    38fe:	82 81       	ldd	r24, Z+2	; 0x02
    3900:	93 81       	ldd	r25, Z+3	; 0x03
    3902:	20 e0       	ldi	r18, 0x00	; 0
    3904:	30 e0       	ldi	r19, 0x00	; 0
    3906:	40 e2       	ldi	r20, 0x20	; 32
    3908:	51 e4       	ldi	r21, 0x41	; 65
    390a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    390e:	dc 01       	movw	r26, r24
    3910:	cb 01       	movw	r24, r22
    3912:	8e 01       	movw	r16, r28
    3914:	0f 56       	subi	r16, 0x6F	; 111
    3916:	1f 4f       	sbci	r17, 0xFF	; 255
    3918:	bc 01       	movw	r22, r24
    391a:	cd 01       	movw	r24, r26
    391c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3920:	dc 01       	movw	r26, r24
    3922:	cb 01       	movw	r24, r22
    3924:	f8 01       	movw	r30, r16
    3926:	91 83       	std	Z+1, r25	; 0x01
    3928:	80 83       	st	Z, r24
    392a:	1f c0       	rjmp	.+62     	; 0x396a <main+0x678>
    392c:	fe 01       	movw	r30, r28
    392e:	e1 57       	subi	r30, 0x71	; 113
    3930:	ff 4f       	sbci	r31, 0xFF	; 255
    3932:	88 ec       	ldi	r24, 0xC8	; 200
    3934:	90 e0       	ldi	r25, 0x00	; 0
    3936:	91 83       	std	Z+1, r25	; 0x01
    3938:	80 83       	st	Z, r24
    393a:	fe 01       	movw	r30, r28
    393c:	e1 57       	subi	r30, 0x71	; 113
    393e:	ff 4f       	sbci	r31, 0xFF	; 255
    3940:	80 81       	ld	r24, Z
    3942:	91 81       	ldd	r25, Z+1	; 0x01
    3944:	01 97       	sbiw	r24, 0x01	; 1
    3946:	f1 f7       	brne	.-4      	; 0x3944 <main+0x652>
    3948:	fe 01       	movw	r30, r28
    394a:	e1 57       	subi	r30, 0x71	; 113
    394c:	ff 4f       	sbci	r31, 0xFF	; 255
    394e:	91 83       	std	Z+1, r25	; 0x01
    3950:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3952:	de 01       	movw	r26, r28
    3954:	af 56       	subi	r26, 0x6F	; 111
    3956:	bf 4f       	sbci	r27, 0xFF	; 255
    3958:	fe 01       	movw	r30, r28
    395a:	ef 56       	subi	r30, 0x6F	; 111
    395c:	ff 4f       	sbci	r31, 0xFF	; 255
    395e:	80 81       	ld	r24, Z
    3960:	91 81       	ldd	r25, Z+1	; 0x01
    3962:	01 97       	sbiw	r24, 0x01	; 1
    3964:	11 96       	adiw	r26, 0x01	; 1
    3966:	9c 93       	st	X, r25
    3968:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    396a:	fe 01       	movw	r30, r28
    396c:	ef 56       	subi	r30, 0x6F	; 111
    396e:	ff 4f       	sbci	r31, 0xFF	; 255
    3970:	80 81       	ld	r24, Z
    3972:	91 81       	ldd	r25, Z+1	; 0x01
    3974:	00 97       	sbiw	r24, 0x00	; 0
    3976:	d1 f6       	brne	.-76     	; 0x392c <main+0x63a>
    3978:	28 c0       	rjmp	.+80     	; 0x39ca <main+0x6d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    397a:	8e 01       	movw	r16, r28
    397c:	0f 56       	subi	r16, 0x6F	; 111
    397e:	1f 4f       	sbci	r17, 0xFF	; 255
    3980:	fe 01       	movw	r30, r28
    3982:	ed 56       	subi	r30, 0x6D	; 109
    3984:	ff 4f       	sbci	r31, 0xFF	; 255
    3986:	60 81       	ld	r22, Z
    3988:	71 81       	ldd	r23, Z+1	; 0x01
    398a:	82 81       	ldd	r24, Z+2	; 0x02
    398c:	93 81       	ldd	r25, Z+3	; 0x03
    398e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3992:	dc 01       	movw	r26, r24
    3994:	cb 01       	movw	r24, r22
    3996:	f8 01       	movw	r30, r16
    3998:	91 83       	std	Z+1, r25	; 0x01
    399a:	80 83       	st	Z, r24
    399c:	de 01       	movw	r26, r28
    399e:	a3 57       	subi	r26, 0x73	; 115
    39a0:	bf 4f       	sbci	r27, 0xFF	; 255
    39a2:	fe 01       	movw	r30, r28
    39a4:	ef 56       	subi	r30, 0x6F	; 111
    39a6:	ff 4f       	sbci	r31, 0xFF	; 255
    39a8:	80 81       	ld	r24, Z
    39aa:	91 81       	ldd	r25, Z+1	; 0x01
    39ac:	11 96       	adiw	r26, 0x01	; 1
    39ae:	9c 93       	st	X, r25
    39b0:	8e 93       	st	-X, r24
    39b2:	fe 01       	movw	r30, r28
    39b4:	e3 57       	subi	r30, 0x73	; 115
    39b6:	ff 4f       	sbci	r31, 0xFF	; 255
    39b8:	80 81       	ld	r24, Z
    39ba:	91 81       	ldd	r25, Z+1	; 0x01
    39bc:	01 97       	sbiw	r24, 0x01	; 1
    39be:	f1 f7       	brne	.-4      	; 0x39bc <main+0x6ca>
    39c0:	fe 01       	movw	r30, r28
    39c2:	e3 57       	subi	r30, 0x73	; 115
    39c4:	ff 4f       	sbci	r31, 0xFF	; 255
    39c6:	91 83       	std	Z+1, r25	; 0x01
    39c8:	80 83       	st	Z, r24
		_delay_ms(10);
		/*Music Control*/
		if(Local_u8DataReceive == 10)
    39ca:	fe 01       	movw	r30, r28
    39cc:	eb 53       	subi	r30, 0x3B	; 59
    39ce:	ff 4f       	sbci	r31, 0xFF	; 255
    39d0:	80 81       	ld	r24, Z
    39d2:	8a 30       	cpi	r24, 0x0A	; 10
    39d4:	09 f0       	breq	.+2      	; 0x39d8 <main+0x6e6>
    39d6:	ed c5       	rjmp	.+3034   	; 0x45b2 <main+0x12c0>
		{
			BUZZER_voidSetSoundValue(10);
    39d8:	8a e0       	ldi	r24, 0x0A	; 10
    39da:	0e 94 17 08 	call	0x102e	; 0x102e <BUZZER_voidSetSoundValue>
    39de:	fe 01       	movw	r30, r28
    39e0:	e7 57       	subi	r30, 0x77	; 119
    39e2:	ff 4f       	sbci	r31, 0xFF	; 255
    39e4:	80 e0       	ldi	r24, 0x00	; 0
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	a8 e4       	ldi	r26, 0x48	; 72
    39ea:	b3 e4       	ldi	r27, 0x43	; 67
    39ec:	80 83       	st	Z, r24
    39ee:	91 83       	std	Z+1, r25	; 0x01
    39f0:	a2 83       	std	Z+2, r26	; 0x02
    39f2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39f4:	8e 01       	movw	r16, r28
    39f6:	0b 57       	subi	r16, 0x7B	; 123
    39f8:	1f 4f       	sbci	r17, 0xFF	; 255
    39fa:	fe 01       	movw	r30, r28
    39fc:	e7 57       	subi	r30, 0x77	; 119
    39fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3a00:	60 81       	ld	r22, Z
    3a02:	71 81       	ldd	r23, Z+1	; 0x01
    3a04:	82 81       	ldd	r24, Z+2	; 0x02
    3a06:	93 81       	ldd	r25, Z+3	; 0x03
    3a08:	20 e0       	ldi	r18, 0x00	; 0
    3a0a:	30 e0       	ldi	r19, 0x00	; 0
    3a0c:	4a ef       	ldi	r20, 0xFA	; 250
    3a0e:	54 e4       	ldi	r21, 0x44	; 68
    3a10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a14:	dc 01       	movw	r26, r24
    3a16:	cb 01       	movw	r24, r22
    3a18:	f8 01       	movw	r30, r16
    3a1a:	80 83       	st	Z, r24
    3a1c:	91 83       	std	Z+1, r25	; 0x01
    3a1e:	a2 83       	std	Z+2, r26	; 0x02
    3a20:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a22:	fe 01       	movw	r30, r28
    3a24:	eb 57       	subi	r30, 0x7B	; 123
    3a26:	ff 4f       	sbci	r31, 0xFF	; 255
    3a28:	60 81       	ld	r22, Z
    3a2a:	71 81       	ldd	r23, Z+1	; 0x01
    3a2c:	82 81       	ldd	r24, Z+2	; 0x02
    3a2e:	93 81       	ldd	r25, Z+3	; 0x03
    3a30:	20 e0       	ldi	r18, 0x00	; 0
    3a32:	30 e0       	ldi	r19, 0x00	; 0
    3a34:	40 e8       	ldi	r20, 0x80	; 128
    3a36:	5f e3       	ldi	r21, 0x3F	; 63
    3a38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a3c:	88 23       	and	r24, r24
    3a3e:	44 f4       	brge	.+16     	; 0x3a50 <main+0x75e>
		__ticks = 1;
    3a40:	fe 01       	movw	r30, r28
    3a42:	ed 57       	subi	r30, 0x7D	; 125
    3a44:	ff 4f       	sbci	r31, 0xFF	; 255
    3a46:	81 e0       	ldi	r24, 0x01	; 1
    3a48:	90 e0       	ldi	r25, 0x00	; 0
    3a4a:	91 83       	std	Z+1, r25	; 0x01
    3a4c:	80 83       	st	Z, r24
    3a4e:	64 c0       	rjmp	.+200    	; 0x3b18 <main+0x826>
	else if (__tmp > 65535)
    3a50:	fe 01       	movw	r30, r28
    3a52:	eb 57       	subi	r30, 0x7B	; 123
    3a54:	ff 4f       	sbci	r31, 0xFF	; 255
    3a56:	60 81       	ld	r22, Z
    3a58:	71 81       	ldd	r23, Z+1	; 0x01
    3a5a:	82 81       	ldd	r24, Z+2	; 0x02
    3a5c:	93 81       	ldd	r25, Z+3	; 0x03
    3a5e:	20 e0       	ldi	r18, 0x00	; 0
    3a60:	3f ef       	ldi	r19, 0xFF	; 255
    3a62:	4f e7       	ldi	r20, 0x7F	; 127
    3a64:	57 e4       	ldi	r21, 0x47	; 71
    3a66:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a6a:	18 16       	cp	r1, r24
    3a6c:	0c f0       	brlt	.+2      	; 0x3a70 <main+0x77e>
    3a6e:	43 c0       	rjmp	.+134    	; 0x3af6 <main+0x804>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a70:	fe 01       	movw	r30, r28
    3a72:	e7 57       	subi	r30, 0x77	; 119
    3a74:	ff 4f       	sbci	r31, 0xFF	; 255
    3a76:	60 81       	ld	r22, Z
    3a78:	71 81       	ldd	r23, Z+1	; 0x01
    3a7a:	82 81       	ldd	r24, Z+2	; 0x02
    3a7c:	93 81       	ldd	r25, Z+3	; 0x03
    3a7e:	20 e0       	ldi	r18, 0x00	; 0
    3a80:	30 e0       	ldi	r19, 0x00	; 0
    3a82:	40 e2       	ldi	r20, 0x20	; 32
    3a84:	51 e4       	ldi	r21, 0x41	; 65
    3a86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a8a:	dc 01       	movw	r26, r24
    3a8c:	cb 01       	movw	r24, r22
    3a8e:	8e 01       	movw	r16, r28
    3a90:	0d 57       	subi	r16, 0x7D	; 125
    3a92:	1f 4f       	sbci	r17, 0xFF	; 255
    3a94:	bc 01       	movw	r22, r24
    3a96:	cd 01       	movw	r24, r26
    3a98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a9c:	dc 01       	movw	r26, r24
    3a9e:	cb 01       	movw	r24, r22
    3aa0:	f8 01       	movw	r30, r16
    3aa2:	91 83       	std	Z+1, r25	; 0x01
    3aa4:	80 83       	st	Z, r24
    3aa6:	1f c0       	rjmp	.+62     	; 0x3ae6 <main+0x7f4>
    3aa8:	fe 01       	movw	r30, r28
    3aaa:	ef 57       	subi	r30, 0x7F	; 127
    3aac:	ff 4f       	sbci	r31, 0xFF	; 255
    3aae:	88 ec       	ldi	r24, 0xC8	; 200
    3ab0:	90 e0       	ldi	r25, 0x00	; 0
    3ab2:	91 83       	std	Z+1, r25	; 0x01
    3ab4:	80 83       	st	Z, r24
    3ab6:	fe 01       	movw	r30, r28
    3ab8:	ef 57       	subi	r30, 0x7F	; 127
    3aba:	ff 4f       	sbci	r31, 0xFF	; 255
    3abc:	80 81       	ld	r24, Z
    3abe:	91 81       	ldd	r25, Z+1	; 0x01
    3ac0:	01 97       	sbiw	r24, 0x01	; 1
    3ac2:	f1 f7       	brne	.-4      	; 0x3ac0 <main+0x7ce>
    3ac4:	fe 01       	movw	r30, r28
    3ac6:	ef 57       	subi	r30, 0x7F	; 127
    3ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aca:	91 83       	std	Z+1, r25	; 0x01
    3acc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ace:	de 01       	movw	r26, r28
    3ad0:	ad 57       	subi	r26, 0x7D	; 125
    3ad2:	bf 4f       	sbci	r27, 0xFF	; 255
    3ad4:	fe 01       	movw	r30, r28
    3ad6:	ed 57       	subi	r30, 0x7D	; 125
    3ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    3ada:	80 81       	ld	r24, Z
    3adc:	91 81       	ldd	r25, Z+1	; 0x01
    3ade:	01 97       	sbiw	r24, 0x01	; 1
    3ae0:	11 96       	adiw	r26, 0x01	; 1
    3ae2:	9c 93       	st	X, r25
    3ae4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ae6:	fe 01       	movw	r30, r28
    3ae8:	ed 57       	subi	r30, 0x7D	; 125
    3aea:	ff 4f       	sbci	r31, 0xFF	; 255
    3aec:	80 81       	ld	r24, Z
    3aee:	91 81       	ldd	r25, Z+1	; 0x01
    3af0:	00 97       	sbiw	r24, 0x00	; 0
    3af2:	d1 f6       	brne	.-76     	; 0x3aa8 <main+0x7b6>
    3af4:	27 c0       	rjmp	.+78     	; 0x3b44 <main+0x852>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3af6:	8e 01       	movw	r16, r28
    3af8:	0d 57       	subi	r16, 0x7D	; 125
    3afa:	1f 4f       	sbci	r17, 0xFF	; 255
    3afc:	fe 01       	movw	r30, r28
    3afe:	eb 57       	subi	r30, 0x7B	; 123
    3b00:	ff 4f       	sbci	r31, 0xFF	; 255
    3b02:	60 81       	ld	r22, Z
    3b04:	71 81       	ldd	r23, Z+1	; 0x01
    3b06:	82 81       	ldd	r24, Z+2	; 0x02
    3b08:	93 81       	ldd	r25, Z+3	; 0x03
    3b0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b0e:	dc 01       	movw	r26, r24
    3b10:	cb 01       	movw	r24, r22
    3b12:	f8 01       	movw	r30, r16
    3b14:	91 83       	std	Z+1, r25	; 0x01
    3b16:	80 83       	st	Z, r24
    3b18:	de 01       	movw	r26, r28
    3b1a:	a1 58       	subi	r26, 0x81	; 129
    3b1c:	bf 4f       	sbci	r27, 0xFF	; 255
    3b1e:	fe 01       	movw	r30, r28
    3b20:	ed 57       	subi	r30, 0x7D	; 125
    3b22:	ff 4f       	sbci	r31, 0xFF	; 255
    3b24:	80 81       	ld	r24, Z
    3b26:	91 81       	ldd	r25, Z+1	; 0x01
    3b28:	8d 93       	st	X+, r24
    3b2a:	9c 93       	st	X, r25
    3b2c:	fe 01       	movw	r30, r28
    3b2e:	e1 58       	subi	r30, 0x81	; 129
    3b30:	ff 4f       	sbci	r31, 0xFF	; 255
    3b32:	80 81       	ld	r24, Z
    3b34:	91 81       	ldd	r25, Z+1	; 0x01
    3b36:	01 97       	sbiw	r24, 0x01	; 1
    3b38:	f1 f7       	brne	.-4      	; 0x3b36 <main+0x844>
    3b3a:	fe 01       	movw	r30, r28
    3b3c:	e1 58       	subi	r30, 0x81	; 129
    3b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b40:	91 83       	std	Z+1, r25	; 0x01
    3b42:	80 83       	st	Z, r24
			_delay_ms(200);
			BUZZER_voidSetSoundValue(20);
    3b44:	84 e1       	ldi	r24, 0x14	; 20
    3b46:	0e 94 17 08 	call	0x102e	; 0x102e <BUZZER_voidSetSoundValue>
    3b4a:	fe 01       	movw	r30, r28
    3b4c:	e5 58       	subi	r30, 0x85	; 133
    3b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b50:	80 e0       	ldi	r24, 0x00	; 0
    3b52:	90 e0       	ldi	r25, 0x00	; 0
    3b54:	a8 e4       	ldi	r26, 0x48	; 72
    3b56:	b3 e4       	ldi	r27, 0x43	; 67
    3b58:	80 83       	st	Z, r24
    3b5a:	91 83       	std	Z+1, r25	; 0x01
    3b5c:	a2 83       	std	Z+2, r26	; 0x02
    3b5e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b60:	8e 01       	movw	r16, r28
    3b62:	09 58       	subi	r16, 0x89	; 137
    3b64:	1f 4f       	sbci	r17, 0xFF	; 255
    3b66:	fe 01       	movw	r30, r28
    3b68:	e5 58       	subi	r30, 0x85	; 133
    3b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b6c:	60 81       	ld	r22, Z
    3b6e:	71 81       	ldd	r23, Z+1	; 0x01
    3b70:	82 81       	ldd	r24, Z+2	; 0x02
    3b72:	93 81       	ldd	r25, Z+3	; 0x03
    3b74:	20 e0       	ldi	r18, 0x00	; 0
    3b76:	30 e0       	ldi	r19, 0x00	; 0
    3b78:	4a ef       	ldi	r20, 0xFA	; 250
    3b7a:	54 e4       	ldi	r21, 0x44	; 68
    3b7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b80:	dc 01       	movw	r26, r24
    3b82:	cb 01       	movw	r24, r22
    3b84:	f8 01       	movw	r30, r16
    3b86:	80 83       	st	Z, r24
    3b88:	91 83       	std	Z+1, r25	; 0x01
    3b8a:	a2 83       	std	Z+2, r26	; 0x02
    3b8c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b8e:	fe 01       	movw	r30, r28
    3b90:	e9 58       	subi	r30, 0x89	; 137
    3b92:	ff 4f       	sbci	r31, 0xFF	; 255
    3b94:	60 81       	ld	r22, Z
    3b96:	71 81       	ldd	r23, Z+1	; 0x01
    3b98:	82 81       	ldd	r24, Z+2	; 0x02
    3b9a:	93 81       	ldd	r25, Z+3	; 0x03
    3b9c:	20 e0       	ldi	r18, 0x00	; 0
    3b9e:	30 e0       	ldi	r19, 0x00	; 0
    3ba0:	40 e8       	ldi	r20, 0x80	; 128
    3ba2:	5f e3       	ldi	r21, 0x3F	; 63
    3ba4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ba8:	88 23       	and	r24, r24
    3baa:	44 f4       	brge	.+16     	; 0x3bbc <main+0x8ca>
		__ticks = 1;
    3bac:	fe 01       	movw	r30, r28
    3bae:	eb 58       	subi	r30, 0x8B	; 139
    3bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb2:	81 e0       	ldi	r24, 0x01	; 1
    3bb4:	90 e0       	ldi	r25, 0x00	; 0
    3bb6:	91 83       	std	Z+1, r25	; 0x01
    3bb8:	80 83       	st	Z, r24
    3bba:	64 c0       	rjmp	.+200    	; 0x3c84 <main+0x992>
	else if (__tmp > 65535)
    3bbc:	fe 01       	movw	r30, r28
    3bbe:	e9 58       	subi	r30, 0x89	; 137
    3bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc2:	60 81       	ld	r22, Z
    3bc4:	71 81       	ldd	r23, Z+1	; 0x01
    3bc6:	82 81       	ldd	r24, Z+2	; 0x02
    3bc8:	93 81       	ldd	r25, Z+3	; 0x03
    3bca:	20 e0       	ldi	r18, 0x00	; 0
    3bcc:	3f ef       	ldi	r19, 0xFF	; 255
    3bce:	4f e7       	ldi	r20, 0x7F	; 127
    3bd0:	57 e4       	ldi	r21, 0x47	; 71
    3bd2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3bd6:	18 16       	cp	r1, r24
    3bd8:	0c f0       	brlt	.+2      	; 0x3bdc <main+0x8ea>
    3bda:	43 c0       	rjmp	.+134    	; 0x3c62 <main+0x970>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bdc:	fe 01       	movw	r30, r28
    3bde:	e5 58       	subi	r30, 0x85	; 133
    3be0:	ff 4f       	sbci	r31, 0xFF	; 255
    3be2:	60 81       	ld	r22, Z
    3be4:	71 81       	ldd	r23, Z+1	; 0x01
    3be6:	82 81       	ldd	r24, Z+2	; 0x02
    3be8:	93 81       	ldd	r25, Z+3	; 0x03
    3bea:	20 e0       	ldi	r18, 0x00	; 0
    3bec:	30 e0       	ldi	r19, 0x00	; 0
    3bee:	40 e2       	ldi	r20, 0x20	; 32
    3bf0:	51 e4       	ldi	r21, 0x41	; 65
    3bf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bf6:	dc 01       	movw	r26, r24
    3bf8:	cb 01       	movw	r24, r22
    3bfa:	8e 01       	movw	r16, r28
    3bfc:	0b 58       	subi	r16, 0x8B	; 139
    3bfe:	1f 4f       	sbci	r17, 0xFF	; 255
    3c00:	bc 01       	movw	r22, r24
    3c02:	cd 01       	movw	r24, r26
    3c04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c08:	dc 01       	movw	r26, r24
    3c0a:	cb 01       	movw	r24, r22
    3c0c:	f8 01       	movw	r30, r16
    3c0e:	91 83       	std	Z+1, r25	; 0x01
    3c10:	80 83       	st	Z, r24
    3c12:	1f c0       	rjmp	.+62     	; 0x3c52 <main+0x960>
    3c14:	fe 01       	movw	r30, r28
    3c16:	ed 58       	subi	r30, 0x8D	; 141
    3c18:	ff 4f       	sbci	r31, 0xFF	; 255
    3c1a:	88 ec       	ldi	r24, 0xC8	; 200
    3c1c:	90 e0       	ldi	r25, 0x00	; 0
    3c1e:	91 83       	std	Z+1, r25	; 0x01
    3c20:	80 83       	st	Z, r24
    3c22:	fe 01       	movw	r30, r28
    3c24:	ed 58       	subi	r30, 0x8D	; 141
    3c26:	ff 4f       	sbci	r31, 0xFF	; 255
    3c28:	80 81       	ld	r24, Z
    3c2a:	91 81       	ldd	r25, Z+1	; 0x01
    3c2c:	01 97       	sbiw	r24, 0x01	; 1
    3c2e:	f1 f7       	brne	.-4      	; 0x3c2c <main+0x93a>
    3c30:	fe 01       	movw	r30, r28
    3c32:	ed 58       	subi	r30, 0x8D	; 141
    3c34:	ff 4f       	sbci	r31, 0xFF	; 255
    3c36:	91 83       	std	Z+1, r25	; 0x01
    3c38:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c3a:	de 01       	movw	r26, r28
    3c3c:	ab 58       	subi	r26, 0x8B	; 139
    3c3e:	bf 4f       	sbci	r27, 0xFF	; 255
    3c40:	fe 01       	movw	r30, r28
    3c42:	eb 58       	subi	r30, 0x8B	; 139
    3c44:	ff 4f       	sbci	r31, 0xFF	; 255
    3c46:	80 81       	ld	r24, Z
    3c48:	91 81       	ldd	r25, Z+1	; 0x01
    3c4a:	01 97       	sbiw	r24, 0x01	; 1
    3c4c:	11 96       	adiw	r26, 0x01	; 1
    3c4e:	9c 93       	st	X, r25
    3c50:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c52:	fe 01       	movw	r30, r28
    3c54:	eb 58       	subi	r30, 0x8B	; 139
    3c56:	ff 4f       	sbci	r31, 0xFF	; 255
    3c58:	80 81       	ld	r24, Z
    3c5a:	91 81       	ldd	r25, Z+1	; 0x01
    3c5c:	00 97       	sbiw	r24, 0x00	; 0
    3c5e:	d1 f6       	brne	.-76     	; 0x3c14 <main+0x922>
    3c60:	27 c0       	rjmp	.+78     	; 0x3cb0 <main+0x9be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c62:	8e 01       	movw	r16, r28
    3c64:	0b 58       	subi	r16, 0x8B	; 139
    3c66:	1f 4f       	sbci	r17, 0xFF	; 255
    3c68:	fe 01       	movw	r30, r28
    3c6a:	e9 58       	subi	r30, 0x89	; 137
    3c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c6e:	60 81       	ld	r22, Z
    3c70:	71 81       	ldd	r23, Z+1	; 0x01
    3c72:	82 81       	ldd	r24, Z+2	; 0x02
    3c74:	93 81       	ldd	r25, Z+3	; 0x03
    3c76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c7a:	dc 01       	movw	r26, r24
    3c7c:	cb 01       	movw	r24, r22
    3c7e:	f8 01       	movw	r30, r16
    3c80:	91 83       	std	Z+1, r25	; 0x01
    3c82:	80 83       	st	Z, r24
    3c84:	de 01       	movw	r26, r28
    3c86:	af 58       	subi	r26, 0x8F	; 143
    3c88:	bf 4f       	sbci	r27, 0xFF	; 255
    3c8a:	fe 01       	movw	r30, r28
    3c8c:	eb 58       	subi	r30, 0x8B	; 139
    3c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c90:	80 81       	ld	r24, Z
    3c92:	91 81       	ldd	r25, Z+1	; 0x01
    3c94:	8d 93       	st	X+, r24
    3c96:	9c 93       	st	X, r25
    3c98:	fe 01       	movw	r30, r28
    3c9a:	ef 58       	subi	r30, 0x8F	; 143
    3c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c9e:	80 81       	ld	r24, Z
    3ca0:	91 81       	ldd	r25, Z+1	; 0x01
    3ca2:	01 97       	sbiw	r24, 0x01	; 1
    3ca4:	f1 f7       	brne	.-4      	; 0x3ca2 <main+0x9b0>
    3ca6:	fe 01       	movw	r30, r28
    3ca8:	ef 58       	subi	r30, 0x8F	; 143
    3caa:	ff 4f       	sbci	r31, 0xFF	; 255
    3cac:	91 83       	std	Z+1, r25	; 0x01
    3cae:	80 83       	st	Z, r24
			_delay_ms(200);
			BUZZER_voidSetSoundValue(30);
    3cb0:	8e e1       	ldi	r24, 0x1E	; 30
    3cb2:	0e 94 17 08 	call	0x102e	; 0x102e <BUZZER_voidSetSoundValue>
    3cb6:	fe 01       	movw	r30, r28
    3cb8:	e3 59       	subi	r30, 0x93	; 147
    3cba:	ff 4f       	sbci	r31, 0xFF	; 255
    3cbc:	80 e0       	ldi	r24, 0x00	; 0
    3cbe:	90 e0       	ldi	r25, 0x00	; 0
    3cc0:	a8 e4       	ldi	r26, 0x48	; 72
    3cc2:	b3 e4       	ldi	r27, 0x43	; 67
    3cc4:	80 83       	st	Z, r24
    3cc6:	91 83       	std	Z+1, r25	; 0x01
    3cc8:	a2 83       	std	Z+2, r26	; 0x02
    3cca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ccc:	8e 01       	movw	r16, r28
    3cce:	07 59       	subi	r16, 0x97	; 151
    3cd0:	1f 4f       	sbci	r17, 0xFF	; 255
    3cd2:	fe 01       	movw	r30, r28
    3cd4:	e3 59       	subi	r30, 0x93	; 147
    3cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd8:	60 81       	ld	r22, Z
    3cda:	71 81       	ldd	r23, Z+1	; 0x01
    3cdc:	82 81       	ldd	r24, Z+2	; 0x02
    3cde:	93 81       	ldd	r25, Z+3	; 0x03
    3ce0:	20 e0       	ldi	r18, 0x00	; 0
    3ce2:	30 e0       	ldi	r19, 0x00	; 0
    3ce4:	4a ef       	ldi	r20, 0xFA	; 250
    3ce6:	54 e4       	ldi	r21, 0x44	; 68
    3ce8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cec:	dc 01       	movw	r26, r24
    3cee:	cb 01       	movw	r24, r22
    3cf0:	f8 01       	movw	r30, r16
    3cf2:	80 83       	st	Z, r24
    3cf4:	91 83       	std	Z+1, r25	; 0x01
    3cf6:	a2 83       	std	Z+2, r26	; 0x02
    3cf8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3cfa:	fe 01       	movw	r30, r28
    3cfc:	e7 59       	subi	r30, 0x97	; 151
    3cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    3d00:	60 81       	ld	r22, Z
    3d02:	71 81       	ldd	r23, Z+1	; 0x01
    3d04:	82 81       	ldd	r24, Z+2	; 0x02
    3d06:	93 81       	ldd	r25, Z+3	; 0x03
    3d08:	20 e0       	ldi	r18, 0x00	; 0
    3d0a:	30 e0       	ldi	r19, 0x00	; 0
    3d0c:	40 e8       	ldi	r20, 0x80	; 128
    3d0e:	5f e3       	ldi	r21, 0x3F	; 63
    3d10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d14:	88 23       	and	r24, r24
    3d16:	44 f4       	brge	.+16     	; 0x3d28 <main+0xa36>
		__ticks = 1;
    3d18:	fe 01       	movw	r30, r28
    3d1a:	e9 59       	subi	r30, 0x99	; 153
    3d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d1e:	81 e0       	ldi	r24, 0x01	; 1
    3d20:	90 e0       	ldi	r25, 0x00	; 0
    3d22:	91 83       	std	Z+1, r25	; 0x01
    3d24:	80 83       	st	Z, r24
    3d26:	64 c0       	rjmp	.+200    	; 0x3df0 <main+0xafe>
	else if (__tmp > 65535)
    3d28:	fe 01       	movw	r30, r28
    3d2a:	e7 59       	subi	r30, 0x97	; 151
    3d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d2e:	60 81       	ld	r22, Z
    3d30:	71 81       	ldd	r23, Z+1	; 0x01
    3d32:	82 81       	ldd	r24, Z+2	; 0x02
    3d34:	93 81       	ldd	r25, Z+3	; 0x03
    3d36:	20 e0       	ldi	r18, 0x00	; 0
    3d38:	3f ef       	ldi	r19, 0xFF	; 255
    3d3a:	4f e7       	ldi	r20, 0x7F	; 127
    3d3c:	57 e4       	ldi	r21, 0x47	; 71
    3d3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d42:	18 16       	cp	r1, r24
    3d44:	0c f0       	brlt	.+2      	; 0x3d48 <main+0xa56>
    3d46:	43 c0       	rjmp	.+134    	; 0x3dce <main+0xadc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d48:	fe 01       	movw	r30, r28
    3d4a:	e3 59       	subi	r30, 0x93	; 147
    3d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d4e:	60 81       	ld	r22, Z
    3d50:	71 81       	ldd	r23, Z+1	; 0x01
    3d52:	82 81       	ldd	r24, Z+2	; 0x02
    3d54:	93 81       	ldd	r25, Z+3	; 0x03
    3d56:	20 e0       	ldi	r18, 0x00	; 0
    3d58:	30 e0       	ldi	r19, 0x00	; 0
    3d5a:	40 e2       	ldi	r20, 0x20	; 32
    3d5c:	51 e4       	ldi	r21, 0x41	; 65
    3d5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d62:	dc 01       	movw	r26, r24
    3d64:	cb 01       	movw	r24, r22
    3d66:	8e 01       	movw	r16, r28
    3d68:	09 59       	subi	r16, 0x99	; 153
    3d6a:	1f 4f       	sbci	r17, 0xFF	; 255
    3d6c:	bc 01       	movw	r22, r24
    3d6e:	cd 01       	movw	r24, r26
    3d70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d74:	dc 01       	movw	r26, r24
    3d76:	cb 01       	movw	r24, r22
    3d78:	f8 01       	movw	r30, r16
    3d7a:	91 83       	std	Z+1, r25	; 0x01
    3d7c:	80 83       	st	Z, r24
    3d7e:	1f c0       	rjmp	.+62     	; 0x3dbe <main+0xacc>
    3d80:	fe 01       	movw	r30, r28
    3d82:	eb 59       	subi	r30, 0x9B	; 155
    3d84:	ff 4f       	sbci	r31, 0xFF	; 255
    3d86:	88 ec       	ldi	r24, 0xC8	; 200
    3d88:	90 e0       	ldi	r25, 0x00	; 0
    3d8a:	91 83       	std	Z+1, r25	; 0x01
    3d8c:	80 83       	st	Z, r24
    3d8e:	fe 01       	movw	r30, r28
    3d90:	eb 59       	subi	r30, 0x9B	; 155
    3d92:	ff 4f       	sbci	r31, 0xFF	; 255
    3d94:	80 81       	ld	r24, Z
    3d96:	91 81       	ldd	r25, Z+1	; 0x01
    3d98:	01 97       	sbiw	r24, 0x01	; 1
    3d9a:	f1 f7       	brne	.-4      	; 0x3d98 <main+0xaa6>
    3d9c:	fe 01       	movw	r30, r28
    3d9e:	eb 59       	subi	r30, 0x9B	; 155
    3da0:	ff 4f       	sbci	r31, 0xFF	; 255
    3da2:	91 83       	std	Z+1, r25	; 0x01
    3da4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3da6:	de 01       	movw	r26, r28
    3da8:	a9 59       	subi	r26, 0x99	; 153
    3daa:	bf 4f       	sbci	r27, 0xFF	; 255
    3dac:	fe 01       	movw	r30, r28
    3dae:	e9 59       	subi	r30, 0x99	; 153
    3db0:	ff 4f       	sbci	r31, 0xFF	; 255
    3db2:	80 81       	ld	r24, Z
    3db4:	91 81       	ldd	r25, Z+1	; 0x01
    3db6:	01 97       	sbiw	r24, 0x01	; 1
    3db8:	11 96       	adiw	r26, 0x01	; 1
    3dba:	9c 93       	st	X, r25
    3dbc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dbe:	fe 01       	movw	r30, r28
    3dc0:	e9 59       	subi	r30, 0x99	; 153
    3dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc4:	80 81       	ld	r24, Z
    3dc6:	91 81       	ldd	r25, Z+1	; 0x01
    3dc8:	00 97       	sbiw	r24, 0x00	; 0
    3dca:	d1 f6       	brne	.-76     	; 0x3d80 <main+0xa8e>
    3dcc:	27 c0       	rjmp	.+78     	; 0x3e1c <main+0xb2a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dce:	8e 01       	movw	r16, r28
    3dd0:	09 59       	subi	r16, 0x99	; 153
    3dd2:	1f 4f       	sbci	r17, 0xFF	; 255
    3dd4:	fe 01       	movw	r30, r28
    3dd6:	e7 59       	subi	r30, 0x97	; 151
    3dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dda:	60 81       	ld	r22, Z
    3ddc:	71 81       	ldd	r23, Z+1	; 0x01
    3dde:	82 81       	ldd	r24, Z+2	; 0x02
    3de0:	93 81       	ldd	r25, Z+3	; 0x03
    3de2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3de6:	dc 01       	movw	r26, r24
    3de8:	cb 01       	movw	r24, r22
    3dea:	f8 01       	movw	r30, r16
    3dec:	91 83       	std	Z+1, r25	; 0x01
    3dee:	80 83       	st	Z, r24
    3df0:	de 01       	movw	r26, r28
    3df2:	ad 59       	subi	r26, 0x9D	; 157
    3df4:	bf 4f       	sbci	r27, 0xFF	; 255
    3df6:	fe 01       	movw	r30, r28
    3df8:	e9 59       	subi	r30, 0x99	; 153
    3dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    3dfc:	80 81       	ld	r24, Z
    3dfe:	91 81       	ldd	r25, Z+1	; 0x01
    3e00:	8d 93       	st	X+, r24
    3e02:	9c 93       	st	X, r25
    3e04:	fe 01       	movw	r30, r28
    3e06:	ed 59       	subi	r30, 0x9D	; 157
    3e08:	ff 4f       	sbci	r31, 0xFF	; 255
    3e0a:	80 81       	ld	r24, Z
    3e0c:	91 81       	ldd	r25, Z+1	; 0x01
    3e0e:	01 97       	sbiw	r24, 0x01	; 1
    3e10:	f1 f7       	brne	.-4      	; 0x3e0e <main+0xb1c>
    3e12:	fe 01       	movw	r30, r28
    3e14:	ed 59       	subi	r30, 0x9D	; 157
    3e16:	ff 4f       	sbci	r31, 0xFF	; 255
    3e18:	91 83       	std	Z+1, r25	; 0x01
    3e1a:	80 83       	st	Z, r24
			_delay_ms(200);
			BUZZER_voidSetSoundValue(40);
    3e1c:	88 e2       	ldi	r24, 0x28	; 40
    3e1e:	0e 94 17 08 	call	0x102e	; 0x102e <BUZZER_voidSetSoundValue>
    3e22:	fe 01       	movw	r30, r28
    3e24:	e1 5a       	subi	r30, 0xA1	; 161
    3e26:	ff 4f       	sbci	r31, 0xFF	; 255
    3e28:	80 e0       	ldi	r24, 0x00	; 0
    3e2a:	90 e0       	ldi	r25, 0x00	; 0
    3e2c:	a8 e4       	ldi	r26, 0x48	; 72
    3e2e:	b3 e4       	ldi	r27, 0x43	; 67
    3e30:	80 83       	st	Z, r24
    3e32:	91 83       	std	Z+1, r25	; 0x01
    3e34:	a2 83       	std	Z+2, r26	; 0x02
    3e36:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e38:	8e 01       	movw	r16, r28
    3e3a:	05 5a       	subi	r16, 0xA5	; 165
    3e3c:	1f 4f       	sbci	r17, 0xFF	; 255
    3e3e:	fe 01       	movw	r30, r28
    3e40:	e1 5a       	subi	r30, 0xA1	; 161
    3e42:	ff 4f       	sbci	r31, 0xFF	; 255
    3e44:	60 81       	ld	r22, Z
    3e46:	71 81       	ldd	r23, Z+1	; 0x01
    3e48:	82 81       	ldd	r24, Z+2	; 0x02
    3e4a:	93 81       	ldd	r25, Z+3	; 0x03
    3e4c:	20 e0       	ldi	r18, 0x00	; 0
    3e4e:	30 e0       	ldi	r19, 0x00	; 0
    3e50:	4a ef       	ldi	r20, 0xFA	; 250
    3e52:	54 e4       	ldi	r21, 0x44	; 68
    3e54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e58:	dc 01       	movw	r26, r24
    3e5a:	cb 01       	movw	r24, r22
    3e5c:	f8 01       	movw	r30, r16
    3e5e:	80 83       	st	Z, r24
    3e60:	91 83       	std	Z+1, r25	; 0x01
    3e62:	a2 83       	std	Z+2, r26	; 0x02
    3e64:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e66:	fe 01       	movw	r30, r28
    3e68:	e5 5a       	subi	r30, 0xA5	; 165
    3e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e6c:	60 81       	ld	r22, Z
    3e6e:	71 81       	ldd	r23, Z+1	; 0x01
    3e70:	82 81       	ldd	r24, Z+2	; 0x02
    3e72:	93 81       	ldd	r25, Z+3	; 0x03
    3e74:	20 e0       	ldi	r18, 0x00	; 0
    3e76:	30 e0       	ldi	r19, 0x00	; 0
    3e78:	40 e8       	ldi	r20, 0x80	; 128
    3e7a:	5f e3       	ldi	r21, 0x3F	; 63
    3e7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e80:	88 23       	and	r24, r24
    3e82:	44 f4       	brge	.+16     	; 0x3e94 <main+0xba2>
		__ticks = 1;
    3e84:	fe 01       	movw	r30, r28
    3e86:	e7 5a       	subi	r30, 0xA7	; 167
    3e88:	ff 4f       	sbci	r31, 0xFF	; 255
    3e8a:	81 e0       	ldi	r24, 0x01	; 1
    3e8c:	90 e0       	ldi	r25, 0x00	; 0
    3e8e:	91 83       	std	Z+1, r25	; 0x01
    3e90:	80 83       	st	Z, r24
    3e92:	64 c0       	rjmp	.+200    	; 0x3f5c <main+0xc6a>
	else if (__tmp > 65535)
    3e94:	fe 01       	movw	r30, r28
    3e96:	e5 5a       	subi	r30, 0xA5	; 165
    3e98:	ff 4f       	sbci	r31, 0xFF	; 255
    3e9a:	60 81       	ld	r22, Z
    3e9c:	71 81       	ldd	r23, Z+1	; 0x01
    3e9e:	82 81       	ldd	r24, Z+2	; 0x02
    3ea0:	93 81       	ldd	r25, Z+3	; 0x03
    3ea2:	20 e0       	ldi	r18, 0x00	; 0
    3ea4:	3f ef       	ldi	r19, 0xFF	; 255
    3ea6:	4f e7       	ldi	r20, 0x7F	; 127
    3ea8:	57 e4       	ldi	r21, 0x47	; 71
    3eaa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3eae:	18 16       	cp	r1, r24
    3eb0:	0c f0       	brlt	.+2      	; 0x3eb4 <main+0xbc2>
    3eb2:	43 c0       	rjmp	.+134    	; 0x3f3a <main+0xc48>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3eb4:	fe 01       	movw	r30, r28
    3eb6:	e1 5a       	subi	r30, 0xA1	; 161
    3eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eba:	60 81       	ld	r22, Z
    3ebc:	71 81       	ldd	r23, Z+1	; 0x01
    3ebe:	82 81       	ldd	r24, Z+2	; 0x02
    3ec0:	93 81       	ldd	r25, Z+3	; 0x03
    3ec2:	20 e0       	ldi	r18, 0x00	; 0
    3ec4:	30 e0       	ldi	r19, 0x00	; 0
    3ec6:	40 e2       	ldi	r20, 0x20	; 32
    3ec8:	51 e4       	ldi	r21, 0x41	; 65
    3eca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ece:	dc 01       	movw	r26, r24
    3ed0:	cb 01       	movw	r24, r22
    3ed2:	8e 01       	movw	r16, r28
    3ed4:	07 5a       	subi	r16, 0xA7	; 167
    3ed6:	1f 4f       	sbci	r17, 0xFF	; 255
    3ed8:	bc 01       	movw	r22, r24
    3eda:	cd 01       	movw	r24, r26
    3edc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ee0:	dc 01       	movw	r26, r24
    3ee2:	cb 01       	movw	r24, r22
    3ee4:	f8 01       	movw	r30, r16
    3ee6:	91 83       	std	Z+1, r25	; 0x01
    3ee8:	80 83       	st	Z, r24
    3eea:	1f c0       	rjmp	.+62     	; 0x3f2a <main+0xc38>
    3eec:	fe 01       	movw	r30, r28
    3eee:	e9 5a       	subi	r30, 0xA9	; 169
    3ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef2:	88 ec       	ldi	r24, 0xC8	; 200
    3ef4:	90 e0       	ldi	r25, 0x00	; 0
    3ef6:	91 83       	std	Z+1, r25	; 0x01
    3ef8:	80 83       	st	Z, r24
    3efa:	fe 01       	movw	r30, r28
    3efc:	e9 5a       	subi	r30, 0xA9	; 169
    3efe:	ff 4f       	sbci	r31, 0xFF	; 255
    3f00:	80 81       	ld	r24, Z
    3f02:	91 81       	ldd	r25, Z+1	; 0x01
    3f04:	01 97       	sbiw	r24, 0x01	; 1
    3f06:	f1 f7       	brne	.-4      	; 0x3f04 <main+0xc12>
    3f08:	fe 01       	movw	r30, r28
    3f0a:	e9 5a       	subi	r30, 0xA9	; 169
    3f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f0e:	91 83       	std	Z+1, r25	; 0x01
    3f10:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f12:	de 01       	movw	r26, r28
    3f14:	a7 5a       	subi	r26, 0xA7	; 167
    3f16:	bf 4f       	sbci	r27, 0xFF	; 255
    3f18:	fe 01       	movw	r30, r28
    3f1a:	e7 5a       	subi	r30, 0xA7	; 167
    3f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f1e:	80 81       	ld	r24, Z
    3f20:	91 81       	ldd	r25, Z+1	; 0x01
    3f22:	01 97       	sbiw	r24, 0x01	; 1
    3f24:	11 96       	adiw	r26, 0x01	; 1
    3f26:	9c 93       	st	X, r25
    3f28:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f2a:	fe 01       	movw	r30, r28
    3f2c:	e7 5a       	subi	r30, 0xA7	; 167
    3f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f30:	80 81       	ld	r24, Z
    3f32:	91 81       	ldd	r25, Z+1	; 0x01
    3f34:	00 97       	sbiw	r24, 0x00	; 0
    3f36:	d1 f6       	brne	.-76     	; 0x3eec <main+0xbfa>
    3f38:	27 c0       	rjmp	.+78     	; 0x3f88 <main+0xc96>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f3a:	8e 01       	movw	r16, r28
    3f3c:	07 5a       	subi	r16, 0xA7	; 167
    3f3e:	1f 4f       	sbci	r17, 0xFF	; 255
    3f40:	fe 01       	movw	r30, r28
    3f42:	e5 5a       	subi	r30, 0xA5	; 165
    3f44:	ff 4f       	sbci	r31, 0xFF	; 255
    3f46:	60 81       	ld	r22, Z
    3f48:	71 81       	ldd	r23, Z+1	; 0x01
    3f4a:	82 81       	ldd	r24, Z+2	; 0x02
    3f4c:	93 81       	ldd	r25, Z+3	; 0x03
    3f4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f52:	dc 01       	movw	r26, r24
    3f54:	cb 01       	movw	r24, r22
    3f56:	f8 01       	movw	r30, r16
    3f58:	91 83       	std	Z+1, r25	; 0x01
    3f5a:	80 83       	st	Z, r24
    3f5c:	de 01       	movw	r26, r28
    3f5e:	ab 5a       	subi	r26, 0xAB	; 171
    3f60:	bf 4f       	sbci	r27, 0xFF	; 255
    3f62:	fe 01       	movw	r30, r28
    3f64:	e7 5a       	subi	r30, 0xA7	; 167
    3f66:	ff 4f       	sbci	r31, 0xFF	; 255
    3f68:	80 81       	ld	r24, Z
    3f6a:	91 81       	ldd	r25, Z+1	; 0x01
    3f6c:	8d 93       	st	X+, r24
    3f6e:	9c 93       	st	X, r25
    3f70:	fe 01       	movw	r30, r28
    3f72:	eb 5a       	subi	r30, 0xAB	; 171
    3f74:	ff 4f       	sbci	r31, 0xFF	; 255
    3f76:	80 81       	ld	r24, Z
    3f78:	91 81       	ldd	r25, Z+1	; 0x01
    3f7a:	01 97       	sbiw	r24, 0x01	; 1
    3f7c:	f1 f7       	brne	.-4      	; 0x3f7a <main+0xc88>
    3f7e:	fe 01       	movw	r30, r28
    3f80:	eb 5a       	subi	r30, 0xAB	; 171
    3f82:	ff 4f       	sbci	r31, 0xFF	; 255
    3f84:	91 83       	std	Z+1, r25	; 0x01
    3f86:	80 83       	st	Z, r24
			_delay_ms(200);
			BUZZER_voidSetSoundValue(45);
    3f88:	8d e2       	ldi	r24, 0x2D	; 45
    3f8a:	0e 94 17 08 	call	0x102e	; 0x102e <BUZZER_voidSetSoundValue>
    3f8e:	fe 01       	movw	r30, r28
    3f90:	ef 5a       	subi	r30, 0xAF	; 175
    3f92:	ff 4f       	sbci	r31, 0xFF	; 255
    3f94:	80 e0       	ldi	r24, 0x00	; 0
    3f96:	90 e0       	ldi	r25, 0x00	; 0
    3f98:	a8 e4       	ldi	r26, 0x48	; 72
    3f9a:	b3 e4       	ldi	r27, 0x43	; 67
    3f9c:	80 83       	st	Z, r24
    3f9e:	91 83       	std	Z+1, r25	; 0x01
    3fa0:	a2 83       	std	Z+2, r26	; 0x02
    3fa2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fa4:	8e 01       	movw	r16, r28
    3fa6:	03 5b       	subi	r16, 0xB3	; 179
    3fa8:	1f 4f       	sbci	r17, 0xFF	; 255
    3faa:	fe 01       	movw	r30, r28
    3fac:	ef 5a       	subi	r30, 0xAF	; 175
    3fae:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb0:	60 81       	ld	r22, Z
    3fb2:	71 81       	ldd	r23, Z+1	; 0x01
    3fb4:	82 81       	ldd	r24, Z+2	; 0x02
    3fb6:	93 81       	ldd	r25, Z+3	; 0x03
    3fb8:	20 e0       	ldi	r18, 0x00	; 0
    3fba:	30 e0       	ldi	r19, 0x00	; 0
    3fbc:	4a ef       	ldi	r20, 0xFA	; 250
    3fbe:	54 e4       	ldi	r21, 0x44	; 68
    3fc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fc4:	dc 01       	movw	r26, r24
    3fc6:	cb 01       	movw	r24, r22
    3fc8:	f8 01       	movw	r30, r16
    3fca:	80 83       	st	Z, r24
    3fcc:	91 83       	std	Z+1, r25	; 0x01
    3fce:	a2 83       	std	Z+2, r26	; 0x02
    3fd0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3fd2:	fe 01       	movw	r30, r28
    3fd4:	e3 5b       	subi	r30, 0xB3	; 179
    3fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd8:	60 81       	ld	r22, Z
    3fda:	71 81       	ldd	r23, Z+1	; 0x01
    3fdc:	82 81       	ldd	r24, Z+2	; 0x02
    3fde:	93 81       	ldd	r25, Z+3	; 0x03
    3fe0:	20 e0       	ldi	r18, 0x00	; 0
    3fe2:	30 e0       	ldi	r19, 0x00	; 0
    3fe4:	40 e8       	ldi	r20, 0x80	; 128
    3fe6:	5f e3       	ldi	r21, 0x3F	; 63
    3fe8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3fec:	88 23       	and	r24, r24
    3fee:	44 f4       	brge	.+16     	; 0x4000 <main+0xd0e>
		__ticks = 1;
    3ff0:	fe 01       	movw	r30, r28
    3ff2:	e5 5b       	subi	r30, 0xB5	; 181
    3ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff6:	81 e0       	ldi	r24, 0x01	; 1
    3ff8:	90 e0       	ldi	r25, 0x00	; 0
    3ffa:	91 83       	std	Z+1, r25	; 0x01
    3ffc:	80 83       	st	Z, r24
    3ffe:	64 c0       	rjmp	.+200    	; 0x40c8 <main+0xdd6>
	else if (__tmp > 65535)
    4000:	fe 01       	movw	r30, r28
    4002:	e3 5b       	subi	r30, 0xB3	; 179
    4004:	ff 4f       	sbci	r31, 0xFF	; 255
    4006:	60 81       	ld	r22, Z
    4008:	71 81       	ldd	r23, Z+1	; 0x01
    400a:	82 81       	ldd	r24, Z+2	; 0x02
    400c:	93 81       	ldd	r25, Z+3	; 0x03
    400e:	20 e0       	ldi	r18, 0x00	; 0
    4010:	3f ef       	ldi	r19, 0xFF	; 255
    4012:	4f e7       	ldi	r20, 0x7F	; 127
    4014:	57 e4       	ldi	r21, 0x47	; 71
    4016:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    401a:	18 16       	cp	r1, r24
    401c:	0c f0       	brlt	.+2      	; 0x4020 <main+0xd2e>
    401e:	43 c0       	rjmp	.+134    	; 0x40a6 <main+0xdb4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4020:	fe 01       	movw	r30, r28
    4022:	ef 5a       	subi	r30, 0xAF	; 175
    4024:	ff 4f       	sbci	r31, 0xFF	; 255
    4026:	60 81       	ld	r22, Z
    4028:	71 81       	ldd	r23, Z+1	; 0x01
    402a:	82 81       	ldd	r24, Z+2	; 0x02
    402c:	93 81       	ldd	r25, Z+3	; 0x03
    402e:	20 e0       	ldi	r18, 0x00	; 0
    4030:	30 e0       	ldi	r19, 0x00	; 0
    4032:	40 e2       	ldi	r20, 0x20	; 32
    4034:	51 e4       	ldi	r21, 0x41	; 65
    4036:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    403a:	dc 01       	movw	r26, r24
    403c:	cb 01       	movw	r24, r22
    403e:	8e 01       	movw	r16, r28
    4040:	05 5b       	subi	r16, 0xB5	; 181
    4042:	1f 4f       	sbci	r17, 0xFF	; 255
    4044:	bc 01       	movw	r22, r24
    4046:	cd 01       	movw	r24, r26
    4048:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    404c:	dc 01       	movw	r26, r24
    404e:	cb 01       	movw	r24, r22
    4050:	f8 01       	movw	r30, r16
    4052:	91 83       	std	Z+1, r25	; 0x01
    4054:	80 83       	st	Z, r24
    4056:	1f c0       	rjmp	.+62     	; 0x4096 <main+0xda4>
    4058:	fe 01       	movw	r30, r28
    405a:	e7 5b       	subi	r30, 0xB7	; 183
    405c:	ff 4f       	sbci	r31, 0xFF	; 255
    405e:	88 ec       	ldi	r24, 0xC8	; 200
    4060:	90 e0       	ldi	r25, 0x00	; 0
    4062:	91 83       	std	Z+1, r25	; 0x01
    4064:	80 83       	st	Z, r24
    4066:	fe 01       	movw	r30, r28
    4068:	e7 5b       	subi	r30, 0xB7	; 183
    406a:	ff 4f       	sbci	r31, 0xFF	; 255
    406c:	80 81       	ld	r24, Z
    406e:	91 81       	ldd	r25, Z+1	; 0x01
    4070:	01 97       	sbiw	r24, 0x01	; 1
    4072:	f1 f7       	brne	.-4      	; 0x4070 <main+0xd7e>
    4074:	fe 01       	movw	r30, r28
    4076:	e7 5b       	subi	r30, 0xB7	; 183
    4078:	ff 4f       	sbci	r31, 0xFF	; 255
    407a:	91 83       	std	Z+1, r25	; 0x01
    407c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    407e:	de 01       	movw	r26, r28
    4080:	a5 5b       	subi	r26, 0xB5	; 181
    4082:	bf 4f       	sbci	r27, 0xFF	; 255
    4084:	fe 01       	movw	r30, r28
    4086:	e5 5b       	subi	r30, 0xB5	; 181
    4088:	ff 4f       	sbci	r31, 0xFF	; 255
    408a:	80 81       	ld	r24, Z
    408c:	91 81       	ldd	r25, Z+1	; 0x01
    408e:	01 97       	sbiw	r24, 0x01	; 1
    4090:	11 96       	adiw	r26, 0x01	; 1
    4092:	9c 93       	st	X, r25
    4094:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4096:	fe 01       	movw	r30, r28
    4098:	e5 5b       	subi	r30, 0xB5	; 181
    409a:	ff 4f       	sbci	r31, 0xFF	; 255
    409c:	80 81       	ld	r24, Z
    409e:	91 81       	ldd	r25, Z+1	; 0x01
    40a0:	00 97       	sbiw	r24, 0x00	; 0
    40a2:	d1 f6       	brne	.-76     	; 0x4058 <main+0xd66>
    40a4:	27 c0       	rjmp	.+78     	; 0x40f4 <main+0xe02>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40a6:	8e 01       	movw	r16, r28
    40a8:	05 5b       	subi	r16, 0xB5	; 181
    40aa:	1f 4f       	sbci	r17, 0xFF	; 255
    40ac:	fe 01       	movw	r30, r28
    40ae:	e3 5b       	subi	r30, 0xB3	; 179
    40b0:	ff 4f       	sbci	r31, 0xFF	; 255
    40b2:	60 81       	ld	r22, Z
    40b4:	71 81       	ldd	r23, Z+1	; 0x01
    40b6:	82 81       	ldd	r24, Z+2	; 0x02
    40b8:	93 81       	ldd	r25, Z+3	; 0x03
    40ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40be:	dc 01       	movw	r26, r24
    40c0:	cb 01       	movw	r24, r22
    40c2:	f8 01       	movw	r30, r16
    40c4:	91 83       	std	Z+1, r25	; 0x01
    40c6:	80 83       	st	Z, r24
    40c8:	de 01       	movw	r26, r28
    40ca:	a9 5b       	subi	r26, 0xB9	; 185
    40cc:	bf 4f       	sbci	r27, 0xFF	; 255
    40ce:	fe 01       	movw	r30, r28
    40d0:	e5 5b       	subi	r30, 0xB5	; 181
    40d2:	ff 4f       	sbci	r31, 0xFF	; 255
    40d4:	80 81       	ld	r24, Z
    40d6:	91 81       	ldd	r25, Z+1	; 0x01
    40d8:	8d 93       	st	X+, r24
    40da:	9c 93       	st	X, r25
    40dc:	fe 01       	movw	r30, r28
    40de:	e9 5b       	subi	r30, 0xB9	; 185
    40e0:	ff 4f       	sbci	r31, 0xFF	; 255
    40e2:	80 81       	ld	r24, Z
    40e4:	91 81       	ldd	r25, Z+1	; 0x01
    40e6:	01 97       	sbiw	r24, 0x01	; 1
    40e8:	f1 f7       	brne	.-4      	; 0x40e6 <main+0xdf4>
    40ea:	fe 01       	movw	r30, r28
    40ec:	e9 5b       	subi	r30, 0xB9	; 185
    40ee:	ff 4f       	sbci	r31, 0xFF	; 255
    40f0:	91 83       	std	Z+1, r25	; 0x01
    40f2:	80 83       	st	Z, r24
			_delay_ms(200);
			BUZZER_voidSetSoundValue(25);
    40f4:	89 e1       	ldi	r24, 0x19	; 25
    40f6:	0e 94 17 08 	call	0x102e	; 0x102e <BUZZER_voidSetSoundValue>
    40fa:	fe 01       	movw	r30, r28
    40fc:	ed 5b       	subi	r30, 0xBD	; 189
    40fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4100:	80 e0       	ldi	r24, 0x00	; 0
    4102:	90 e0       	ldi	r25, 0x00	; 0
    4104:	a8 e4       	ldi	r26, 0x48	; 72
    4106:	b3 e4       	ldi	r27, 0x43	; 67
    4108:	80 83       	st	Z, r24
    410a:	91 83       	std	Z+1, r25	; 0x01
    410c:	a2 83       	std	Z+2, r26	; 0x02
    410e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4110:	8e 01       	movw	r16, r28
    4112:	01 5c       	subi	r16, 0xC1	; 193
    4114:	1f 4f       	sbci	r17, 0xFF	; 255
    4116:	fe 01       	movw	r30, r28
    4118:	ed 5b       	subi	r30, 0xBD	; 189
    411a:	ff 4f       	sbci	r31, 0xFF	; 255
    411c:	60 81       	ld	r22, Z
    411e:	71 81       	ldd	r23, Z+1	; 0x01
    4120:	82 81       	ldd	r24, Z+2	; 0x02
    4122:	93 81       	ldd	r25, Z+3	; 0x03
    4124:	20 e0       	ldi	r18, 0x00	; 0
    4126:	30 e0       	ldi	r19, 0x00	; 0
    4128:	4a ef       	ldi	r20, 0xFA	; 250
    412a:	54 e4       	ldi	r21, 0x44	; 68
    412c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4130:	dc 01       	movw	r26, r24
    4132:	cb 01       	movw	r24, r22
    4134:	f8 01       	movw	r30, r16
    4136:	80 83       	st	Z, r24
    4138:	91 83       	std	Z+1, r25	; 0x01
    413a:	a2 83       	std	Z+2, r26	; 0x02
    413c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    413e:	fe 01       	movw	r30, r28
    4140:	ff 96       	adiw	r30, 0x3f	; 63
    4142:	60 81       	ld	r22, Z
    4144:	71 81       	ldd	r23, Z+1	; 0x01
    4146:	82 81       	ldd	r24, Z+2	; 0x02
    4148:	93 81       	ldd	r25, Z+3	; 0x03
    414a:	20 e0       	ldi	r18, 0x00	; 0
    414c:	30 e0       	ldi	r19, 0x00	; 0
    414e:	40 e8       	ldi	r20, 0x80	; 128
    4150:	5f e3       	ldi	r21, 0x3F	; 63
    4152:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4156:	88 23       	and	r24, r24
    4158:	2c f4       	brge	.+10     	; 0x4164 <main+0xe72>
		__ticks = 1;
    415a:	81 e0       	ldi	r24, 0x01	; 1
    415c:	90 e0       	ldi	r25, 0x00	; 0
    415e:	9e af       	std	Y+62, r25	; 0x3e
    4160:	8d af       	std	Y+61, r24	; 0x3d
    4162:	46 c0       	rjmp	.+140    	; 0x41f0 <main+0xefe>
	else if (__tmp > 65535)
    4164:	fe 01       	movw	r30, r28
    4166:	ff 96       	adiw	r30, 0x3f	; 63
    4168:	60 81       	ld	r22, Z
    416a:	71 81       	ldd	r23, Z+1	; 0x01
    416c:	82 81       	ldd	r24, Z+2	; 0x02
    416e:	93 81       	ldd	r25, Z+3	; 0x03
    4170:	20 e0       	ldi	r18, 0x00	; 0
    4172:	3f ef       	ldi	r19, 0xFF	; 255
    4174:	4f e7       	ldi	r20, 0x7F	; 127
    4176:	57 e4       	ldi	r21, 0x47	; 71
    4178:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    417c:	18 16       	cp	r1, r24
    417e:	64 f5       	brge	.+88     	; 0x41d8 <main+0xee6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4180:	fe 01       	movw	r30, r28
    4182:	ed 5b       	subi	r30, 0xBD	; 189
    4184:	ff 4f       	sbci	r31, 0xFF	; 255
    4186:	60 81       	ld	r22, Z
    4188:	71 81       	ldd	r23, Z+1	; 0x01
    418a:	82 81       	ldd	r24, Z+2	; 0x02
    418c:	93 81       	ldd	r25, Z+3	; 0x03
    418e:	20 e0       	ldi	r18, 0x00	; 0
    4190:	30 e0       	ldi	r19, 0x00	; 0
    4192:	40 e2       	ldi	r20, 0x20	; 32
    4194:	51 e4       	ldi	r21, 0x41	; 65
    4196:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    419a:	dc 01       	movw	r26, r24
    419c:	cb 01       	movw	r24, r22
    419e:	bc 01       	movw	r22, r24
    41a0:	cd 01       	movw	r24, r26
    41a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41a6:	dc 01       	movw	r26, r24
    41a8:	cb 01       	movw	r24, r22
    41aa:	9e af       	std	Y+62, r25	; 0x3e
    41ac:	8d af       	std	Y+61, r24	; 0x3d
    41ae:	0f c0       	rjmp	.+30     	; 0x41ce <main+0xedc>
    41b0:	88 ec       	ldi	r24, 0xC8	; 200
    41b2:	90 e0       	ldi	r25, 0x00	; 0
    41b4:	9c af       	std	Y+60, r25	; 0x3c
    41b6:	8b af       	std	Y+59, r24	; 0x3b
    41b8:	8b ad       	ldd	r24, Y+59	; 0x3b
    41ba:	9c ad       	ldd	r25, Y+60	; 0x3c
    41bc:	01 97       	sbiw	r24, 0x01	; 1
    41be:	f1 f7       	brne	.-4      	; 0x41bc <main+0xeca>
    41c0:	9c af       	std	Y+60, r25	; 0x3c
    41c2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41c4:	8d ad       	ldd	r24, Y+61	; 0x3d
    41c6:	9e ad       	ldd	r25, Y+62	; 0x3e
    41c8:	01 97       	sbiw	r24, 0x01	; 1
    41ca:	9e af       	std	Y+62, r25	; 0x3e
    41cc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41ce:	8d ad       	ldd	r24, Y+61	; 0x3d
    41d0:	9e ad       	ldd	r25, Y+62	; 0x3e
    41d2:	00 97       	sbiw	r24, 0x00	; 0
    41d4:	69 f7       	brne	.-38     	; 0x41b0 <main+0xebe>
    41d6:	16 c0       	rjmp	.+44     	; 0x4204 <main+0xf12>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41d8:	fe 01       	movw	r30, r28
    41da:	ff 96       	adiw	r30, 0x3f	; 63
    41dc:	60 81       	ld	r22, Z
    41de:	71 81       	ldd	r23, Z+1	; 0x01
    41e0:	82 81       	ldd	r24, Z+2	; 0x02
    41e2:	93 81       	ldd	r25, Z+3	; 0x03
    41e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41e8:	dc 01       	movw	r26, r24
    41ea:	cb 01       	movw	r24, r22
    41ec:	9e af       	std	Y+62, r25	; 0x3e
    41ee:	8d af       	std	Y+61, r24	; 0x3d
    41f0:	8d ad       	ldd	r24, Y+61	; 0x3d
    41f2:	9e ad       	ldd	r25, Y+62	; 0x3e
    41f4:	9a af       	std	Y+58, r25	; 0x3a
    41f6:	89 af       	std	Y+57, r24	; 0x39
    41f8:	89 ad       	ldd	r24, Y+57	; 0x39
    41fa:	9a ad       	ldd	r25, Y+58	; 0x3a
    41fc:	01 97       	sbiw	r24, 0x01	; 1
    41fe:	f1 f7       	brne	.-4      	; 0x41fc <main+0xf0a>
    4200:	9a af       	std	Y+58, r25	; 0x3a
    4202:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(200);
			BUZZER_voidSetSoundValue(35);
    4204:	83 e2       	ldi	r24, 0x23	; 35
    4206:	0e 94 17 08 	call	0x102e	; 0x102e <BUZZER_voidSetSoundValue>
    420a:	80 e0       	ldi	r24, 0x00	; 0
    420c:	90 e0       	ldi	r25, 0x00	; 0
    420e:	a8 e4       	ldi	r26, 0x48	; 72
    4210:	b3 e4       	ldi	r27, 0x43	; 67
    4212:	8d ab       	std	Y+53, r24	; 0x35
    4214:	9e ab       	std	Y+54, r25	; 0x36
    4216:	af ab       	std	Y+55, r26	; 0x37
    4218:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    421a:	6d a9       	ldd	r22, Y+53	; 0x35
    421c:	7e a9       	ldd	r23, Y+54	; 0x36
    421e:	8f a9       	ldd	r24, Y+55	; 0x37
    4220:	98 ad       	ldd	r25, Y+56	; 0x38
    4222:	20 e0       	ldi	r18, 0x00	; 0
    4224:	30 e0       	ldi	r19, 0x00	; 0
    4226:	4a ef       	ldi	r20, 0xFA	; 250
    4228:	54 e4       	ldi	r21, 0x44	; 68
    422a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    422e:	dc 01       	movw	r26, r24
    4230:	cb 01       	movw	r24, r22
    4232:	89 ab       	std	Y+49, r24	; 0x31
    4234:	9a ab       	std	Y+50, r25	; 0x32
    4236:	ab ab       	std	Y+51, r26	; 0x33
    4238:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    423a:	69 a9       	ldd	r22, Y+49	; 0x31
    423c:	7a a9       	ldd	r23, Y+50	; 0x32
    423e:	8b a9       	ldd	r24, Y+51	; 0x33
    4240:	9c a9       	ldd	r25, Y+52	; 0x34
    4242:	20 e0       	ldi	r18, 0x00	; 0
    4244:	30 e0       	ldi	r19, 0x00	; 0
    4246:	40 e8       	ldi	r20, 0x80	; 128
    4248:	5f e3       	ldi	r21, 0x3F	; 63
    424a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    424e:	88 23       	and	r24, r24
    4250:	2c f4       	brge	.+10     	; 0x425c <main+0xf6a>
		__ticks = 1;
    4252:	81 e0       	ldi	r24, 0x01	; 1
    4254:	90 e0       	ldi	r25, 0x00	; 0
    4256:	98 ab       	std	Y+48, r25	; 0x30
    4258:	8f a7       	std	Y+47, r24	; 0x2f
    425a:	3f c0       	rjmp	.+126    	; 0x42da <main+0xfe8>
	else if (__tmp > 65535)
    425c:	69 a9       	ldd	r22, Y+49	; 0x31
    425e:	7a a9       	ldd	r23, Y+50	; 0x32
    4260:	8b a9       	ldd	r24, Y+51	; 0x33
    4262:	9c a9       	ldd	r25, Y+52	; 0x34
    4264:	20 e0       	ldi	r18, 0x00	; 0
    4266:	3f ef       	ldi	r19, 0xFF	; 255
    4268:	4f e7       	ldi	r20, 0x7F	; 127
    426a:	57 e4       	ldi	r21, 0x47	; 71
    426c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4270:	18 16       	cp	r1, r24
    4272:	4c f5       	brge	.+82     	; 0x42c6 <main+0xfd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4274:	6d a9       	ldd	r22, Y+53	; 0x35
    4276:	7e a9       	ldd	r23, Y+54	; 0x36
    4278:	8f a9       	ldd	r24, Y+55	; 0x37
    427a:	98 ad       	ldd	r25, Y+56	; 0x38
    427c:	20 e0       	ldi	r18, 0x00	; 0
    427e:	30 e0       	ldi	r19, 0x00	; 0
    4280:	40 e2       	ldi	r20, 0x20	; 32
    4282:	51 e4       	ldi	r21, 0x41	; 65
    4284:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4288:	dc 01       	movw	r26, r24
    428a:	cb 01       	movw	r24, r22
    428c:	bc 01       	movw	r22, r24
    428e:	cd 01       	movw	r24, r26
    4290:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4294:	dc 01       	movw	r26, r24
    4296:	cb 01       	movw	r24, r22
    4298:	98 ab       	std	Y+48, r25	; 0x30
    429a:	8f a7       	std	Y+47, r24	; 0x2f
    429c:	0f c0       	rjmp	.+30     	; 0x42bc <main+0xfca>
    429e:	88 ec       	ldi	r24, 0xC8	; 200
    42a0:	90 e0       	ldi	r25, 0x00	; 0
    42a2:	9e a7       	std	Y+46, r25	; 0x2e
    42a4:	8d a7       	std	Y+45, r24	; 0x2d
    42a6:	8d a5       	ldd	r24, Y+45	; 0x2d
    42a8:	9e a5       	ldd	r25, Y+46	; 0x2e
    42aa:	01 97       	sbiw	r24, 0x01	; 1
    42ac:	f1 f7       	brne	.-4      	; 0x42aa <main+0xfb8>
    42ae:	9e a7       	std	Y+46, r25	; 0x2e
    42b0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    42b4:	98 a9       	ldd	r25, Y+48	; 0x30
    42b6:	01 97       	sbiw	r24, 0x01	; 1
    42b8:	98 ab       	std	Y+48, r25	; 0x30
    42ba:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    42be:	98 a9       	ldd	r25, Y+48	; 0x30
    42c0:	00 97       	sbiw	r24, 0x00	; 0
    42c2:	69 f7       	brne	.-38     	; 0x429e <main+0xfac>
    42c4:	14 c0       	rjmp	.+40     	; 0x42ee <main+0xffc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42c6:	69 a9       	ldd	r22, Y+49	; 0x31
    42c8:	7a a9       	ldd	r23, Y+50	; 0x32
    42ca:	8b a9       	ldd	r24, Y+51	; 0x33
    42cc:	9c a9       	ldd	r25, Y+52	; 0x34
    42ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42d2:	dc 01       	movw	r26, r24
    42d4:	cb 01       	movw	r24, r22
    42d6:	98 ab       	std	Y+48, r25	; 0x30
    42d8:	8f a7       	std	Y+47, r24	; 0x2f
    42da:	8f a5       	ldd	r24, Y+47	; 0x2f
    42dc:	98 a9       	ldd	r25, Y+48	; 0x30
    42de:	9c a7       	std	Y+44, r25	; 0x2c
    42e0:	8b a7       	std	Y+43, r24	; 0x2b
    42e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    42e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    42e6:	01 97       	sbiw	r24, 0x01	; 1
    42e8:	f1 f7       	brne	.-4      	; 0x42e6 <main+0xff4>
    42ea:	9c a7       	std	Y+44, r25	; 0x2c
    42ec:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(200);
			BUZZER_voidSetSoundValue(50);
    42ee:	82 e3       	ldi	r24, 0x32	; 50
    42f0:	0e 94 17 08 	call	0x102e	; 0x102e <BUZZER_voidSetSoundValue>
    42f4:	80 e0       	ldi	r24, 0x00	; 0
    42f6:	90 e0       	ldi	r25, 0x00	; 0
    42f8:	a8 e4       	ldi	r26, 0x48	; 72
    42fa:	b3 e4       	ldi	r27, 0x43	; 67
    42fc:	8f a3       	std	Y+39, r24	; 0x27
    42fe:	98 a7       	std	Y+40, r25	; 0x28
    4300:	a9 a7       	std	Y+41, r26	; 0x29
    4302:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4304:	6f a1       	ldd	r22, Y+39	; 0x27
    4306:	78 a5       	ldd	r23, Y+40	; 0x28
    4308:	89 a5       	ldd	r24, Y+41	; 0x29
    430a:	9a a5       	ldd	r25, Y+42	; 0x2a
    430c:	20 e0       	ldi	r18, 0x00	; 0
    430e:	30 e0       	ldi	r19, 0x00	; 0
    4310:	4a ef       	ldi	r20, 0xFA	; 250
    4312:	54 e4       	ldi	r21, 0x44	; 68
    4314:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4318:	dc 01       	movw	r26, r24
    431a:	cb 01       	movw	r24, r22
    431c:	8b a3       	std	Y+35, r24	; 0x23
    431e:	9c a3       	std	Y+36, r25	; 0x24
    4320:	ad a3       	std	Y+37, r26	; 0x25
    4322:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4324:	6b a1       	ldd	r22, Y+35	; 0x23
    4326:	7c a1       	ldd	r23, Y+36	; 0x24
    4328:	8d a1       	ldd	r24, Y+37	; 0x25
    432a:	9e a1       	ldd	r25, Y+38	; 0x26
    432c:	20 e0       	ldi	r18, 0x00	; 0
    432e:	30 e0       	ldi	r19, 0x00	; 0
    4330:	40 e8       	ldi	r20, 0x80	; 128
    4332:	5f e3       	ldi	r21, 0x3F	; 63
    4334:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4338:	88 23       	and	r24, r24
    433a:	2c f4       	brge	.+10     	; 0x4346 <main+0x1054>
		__ticks = 1;
    433c:	81 e0       	ldi	r24, 0x01	; 1
    433e:	90 e0       	ldi	r25, 0x00	; 0
    4340:	9a a3       	std	Y+34, r25	; 0x22
    4342:	89 a3       	std	Y+33, r24	; 0x21
    4344:	3f c0       	rjmp	.+126    	; 0x43c4 <main+0x10d2>
	else if (__tmp > 65535)
    4346:	6b a1       	ldd	r22, Y+35	; 0x23
    4348:	7c a1       	ldd	r23, Y+36	; 0x24
    434a:	8d a1       	ldd	r24, Y+37	; 0x25
    434c:	9e a1       	ldd	r25, Y+38	; 0x26
    434e:	20 e0       	ldi	r18, 0x00	; 0
    4350:	3f ef       	ldi	r19, 0xFF	; 255
    4352:	4f e7       	ldi	r20, 0x7F	; 127
    4354:	57 e4       	ldi	r21, 0x47	; 71
    4356:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    435a:	18 16       	cp	r1, r24
    435c:	4c f5       	brge	.+82     	; 0x43b0 <main+0x10be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    435e:	6f a1       	ldd	r22, Y+39	; 0x27
    4360:	78 a5       	ldd	r23, Y+40	; 0x28
    4362:	89 a5       	ldd	r24, Y+41	; 0x29
    4364:	9a a5       	ldd	r25, Y+42	; 0x2a
    4366:	20 e0       	ldi	r18, 0x00	; 0
    4368:	30 e0       	ldi	r19, 0x00	; 0
    436a:	40 e2       	ldi	r20, 0x20	; 32
    436c:	51 e4       	ldi	r21, 0x41	; 65
    436e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4372:	dc 01       	movw	r26, r24
    4374:	cb 01       	movw	r24, r22
    4376:	bc 01       	movw	r22, r24
    4378:	cd 01       	movw	r24, r26
    437a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    437e:	dc 01       	movw	r26, r24
    4380:	cb 01       	movw	r24, r22
    4382:	9a a3       	std	Y+34, r25	; 0x22
    4384:	89 a3       	std	Y+33, r24	; 0x21
    4386:	0f c0       	rjmp	.+30     	; 0x43a6 <main+0x10b4>
    4388:	88 ec       	ldi	r24, 0xC8	; 200
    438a:	90 e0       	ldi	r25, 0x00	; 0
    438c:	98 a3       	std	Y+32, r25	; 0x20
    438e:	8f 8f       	std	Y+31, r24	; 0x1f
    4390:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4392:	98 a1       	ldd	r25, Y+32	; 0x20
    4394:	01 97       	sbiw	r24, 0x01	; 1
    4396:	f1 f7       	brne	.-4      	; 0x4394 <main+0x10a2>
    4398:	98 a3       	std	Y+32, r25	; 0x20
    439a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    439c:	89 a1       	ldd	r24, Y+33	; 0x21
    439e:	9a a1       	ldd	r25, Y+34	; 0x22
    43a0:	01 97       	sbiw	r24, 0x01	; 1
    43a2:	9a a3       	std	Y+34, r25	; 0x22
    43a4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43a6:	89 a1       	ldd	r24, Y+33	; 0x21
    43a8:	9a a1       	ldd	r25, Y+34	; 0x22
    43aa:	00 97       	sbiw	r24, 0x00	; 0
    43ac:	69 f7       	brne	.-38     	; 0x4388 <main+0x1096>
    43ae:	14 c0       	rjmp	.+40     	; 0x43d8 <main+0x10e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43b0:	6b a1       	ldd	r22, Y+35	; 0x23
    43b2:	7c a1       	ldd	r23, Y+36	; 0x24
    43b4:	8d a1       	ldd	r24, Y+37	; 0x25
    43b6:	9e a1       	ldd	r25, Y+38	; 0x26
    43b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43bc:	dc 01       	movw	r26, r24
    43be:	cb 01       	movw	r24, r22
    43c0:	9a a3       	std	Y+34, r25	; 0x22
    43c2:	89 a3       	std	Y+33, r24	; 0x21
    43c4:	89 a1       	ldd	r24, Y+33	; 0x21
    43c6:	9a a1       	ldd	r25, Y+34	; 0x22
    43c8:	9e 8f       	std	Y+30, r25	; 0x1e
    43ca:	8d 8f       	std	Y+29, r24	; 0x1d
    43cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    43ce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    43d0:	01 97       	sbiw	r24, 0x01	; 1
    43d2:	f1 f7       	brne	.-4      	; 0x43d0 <main+0x10de>
    43d4:	9e 8f       	std	Y+30, r25	; 0x1e
    43d6:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(200);
			BUZZER_voidSetSoundValue(60);
    43d8:	8c e3       	ldi	r24, 0x3C	; 60
    43da:	0e 94 17 08 	call	0x102e	; 0x102e <BUZZER_voidSetSoundValue>
    43de:	80 e0       	ldi	r24, 0x00	; 0
    43e0:	90 e0       	ldi	r25, 0x00	; 0
    43e2:	a8 e4       	ldi	r26, 0x48	; 72
    43e4:	b3 e4       	ldi	r27, 0x43	; 67
    43e6:	89 8f       	std	Y+25, r24	; 0x19
    43e8:	9a 8f       	std	Y+26, r25	; 0x1a
    43ea:	ab 8f       	std	Y+27, r26	; 0x1b
    43ec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43ee:	69 8d       	ldd	r22, Y+25	; 0x19
    43f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    43f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    43f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    43f6:	20 e0       	ldi	r18, 0x00	; 0
    43f8:	30 e0       	ldi	r19, 0x00	; 0
    43fa:	4a ef       	ldi	r20, 0xFA	; 250
    43fc:	54 e4       	ldi	r21, 0x44	; 68
    43fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4402:	dc 01       	movw	r26, r24
    4404:	cb 01       	movw	r24, r22
    4406:	8d 8b       	std	Y+21, r24	; 0x15
    4408:	9e 8b       	std	Y+22, r25	; 0x16
    440a:	af 8b       	std	Y+23, r26	; 0x17
    440c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    440e:	6d 89       	ldd	r22, Y+21	; 0x15
    4410:	7e 89       	ldd	r23, Y+22	; 0x16
    4412:	8f 89       	ldd	r24, Y+23	; 0x17
    4414:	98 8d       	ldd	r25, Y+24	; 0x18
    4416:	20 e0       	ldi	r18, 0x00	; 0
    4418:	30 e0       	ldi	r19, 0x00	; 0
    441a:	40 e8       	ldi	r20, 0x80	; 128
    441c:	5f e3       	ldi	r21, 0x3F	; 63
    441e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4422:	88 23       	and	r24, r24
    4424:	2c f4       	brge	.+10     	; 0x4430 <main+0x113e>
		__ticks = 1;
    4426:	81 e0       	ldi	r24, 0x01	; 1
    4428:	90 e0       	ldi	r25, 0x00	; 0
    442a:	9c 8b       	std	Y+20, r25	; 0x14
    442c:	8b 8b       	std	Y+19, r24	; 0x13
    442e:	3f c0       	rjmp	.+126    	; 0x44ae <main+0x11bc>
	else if (__tmp > 65535)
    4430:	6d 89       	ldd	r22, Y+21	; 0x15
    4432:	7e 89       	ldd	r23, Y+22	; 0x16
    4434:	8f 89       	ldd	r24, Y+23	; 0x17
    4436:	98 8d       	ldd	r25, Y+24	; 0x18
    4438:	20 e0       	ldi	r18, 0x00	; 0
    443a:	3f ef       	ldi	r19, 0xFF	; 255
    443c:	4f e7       	ldi	r20, 0x7F	; 127
    443e:	57 e4       	ldi	r21, 0x47	; 71
    4440:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4444:	18 16       	cp	r1, r24
    4446:	4c f5       	brge	.+82     	; 0x449a <main+0x11a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4448:	69 8d       	ldd	r22, Y+25	; 0x19
    444a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    444c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    444e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4450:	20 e0       	ldi	r18, 0x00	; 0
    4452:	30 e0       	ldi	r19, 0x00	; 0
    4454:	40 e2       	ldi	r20, 0x20	; 32
    4456:	51 e4       	ldi	r21, 0x41	; 65
    4458:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    445c:	dc 01       	movw	r26, r24
    445e:	cb 01       	movw	r24, r22
    4460:	bc 01       	movw	r22, r24
    4462:	cd 01       	movw	r24, r26
    4464:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4468:	dc 01       	movw	r26, r24
    446a:	cb 01       	movw	r24, r22
    446c:	9c 8b       	std	Y+20, r25	; 0x14
    446e:	8b 8b       	std	Y+19, r24	; 0x13
    4470:	0f c0       	rjmp	.+30     	; 0x4490 <main+0x119e>
    4472:	88 ec       	ldi	r24, 0xC8	; 200
    4474:	90 e0       	ldi	r25, 0x00	; 0
    4476:	9a 8b       	std	Y+18, r25	; 0x12
    4478:	89 8b       	std	Y+17, r24	; 0x11
    447a:	89 89       	ldd	r24, Y+17	; 0x11
    447c:	9a 89       	ldd	r25, Y+18	; 0x12
    447e:	01 97       	sbiw	r24, 0x01	; 1
    4480:	f1 f7       	brne	.-4      	; 0x447e <main+0x118c>
    4482:	9a 8b       	std	Y+18, r25	; 0x12
    4484:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4486:	8b 89       	ldd	r24, Y+19	; 0x13
    4488:	9c 89       	ldd	r25, Y+20	; 0x14
    448a:	01 97       	sbiw	r24, 0x01	; 1
    448c:	9c 8b       	std	Y+20, r25	; 0x14
    448e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4490:	8b 89       	ldd	r24, Y+19	; 0x13
    4492:	9c 89       	ldd	r25, Y+20	; 0x14
    4494:	00 97       	sbiw	r24, 0x00	; 0
    4496:	69 f7       	brne	.-38     	; 0x4472 <main+0x1180>
    4498:	14 c0       	rjmp	.+40     	; 0x44c2 <main+0x11d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    449a:	6d 89       	ldd	r22, Y+21	; 0x15
    449c:	7e 89       	ldd	r23, Y+22	; 0x16
    449e:	8f 89       	ldd	r24, Y+23	; 0x17
    44a0:	98 8d       	ldd	r25, Y+24	; 0x18
    44a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44a6:	dc 01       	movw	r26, r24
    44a8:	cb 01       	movw	r24, r22
    44aa:	9c 8b       	std	Y+20, r25	; 0x14
    44ac:	8b 8b       	std	Y+19, r24	; 0x13
    44ae:	8b 89       	ldd	r24, Y+19	; 0x13
    44b0:	9c 89       	ldd	r25, Y+20	; 0x14
    44b2:	98 8b       	std	Y+16, r25	; 0x10
    44b4:	8f 87       	std	Y+15, r24	; 0x0f
    44b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    44b8:	98 89       	ldd	r25, Y+16	; 0x10
    44ba:	01 97       	sbiw	r24, 0x01	; 1
    44bc:	f1 f7       	brne	.-4      	; 0x44ba <main+0x11c8>
    44be:	98 8b       	std	Y+16, r25	; 0x10
    44c0:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(200);
			BUZZER_voidSetSoundValue(80);
    44c2:	80 e5       	ldi	r24, 0x50	; 80
    44c4:	0e 94 17 08 	call	0x102e	; 0x102e <BUZZER_voidSetSoundValue>
    44c8:	80 e0       	ldi	r24, 0x00	; 0
    44ca:	90 e0       	ldi	r25, 0x00	; 0
    44cc:	a8 e4       	ldi	r26, 0x48	; 72
    44ce:	b3 e4       	ldi	r27, 0x43	; 67
    44d0:	8b 87       	std	Y+11, r24	; 0x0b
    44d2:	9c 87       	std	Y+12, r25	; 0x0c
    44d4:	ad 87       	std	Y+13, r26	; 0x0d
    44d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    44da:	7c 85       	ldd	r23, Y+12	; 0x0c
    44dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    44de:	9e 85       	ldd	r25, Y+14	; 0x0e
    44e0:	20 e0       	ldi	r18, 0x00	; 0
    44e2:	30 e0       	ldi	r19, 0x00	; 0
    44e4:	4a ef       	ldi	r20, 0xFA	; 250
    44e6:	54 e4       	ldi	r21, 0x44	; 68
    44e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44ec:	dc 01       	movw	r26, r24
    44ee:	cb 01       	movw	r24, r22
    44f0:	8f 83       	std	Y+7, r24	; 0x07
    44f2:	98 87       	std	Y+8, r25	; 0x08
    44f4:	a9 87       	std	Y+9, r26	; 0x09
    44f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    44f8:	6f 81       	ldd	r22, Y+7	; 0x07
    44fa:	78 85       	ldd	r23, Y+8	; 0x08
    44fc:	89 85       	ldd	r24, Y+9	; 0x09
    44fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    4500:	20 e0       	ldi	r18, 0x00	; 0
    4502:	30 e0       	ldi	r19, 0x00	; 0
    4504:	40 e8       	ldi	r20, 0x80	; 128
    4506:	5f e3       	ldi	r21, 0x3F	; 63
    4508:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    450c:	88 23       	and	r24, r24
    450e:	2c f4       	brge	.+10     	; 0x451a <main+0x1228>
		__ticks = 1;
    4510:	81 e0       	ldi	r24, 0x01	; 1
    4512:	90 e0       	ldi	r25, 0x00	; 0
    4514:	9e 83       	std	Y+6, r25	; 0x06
    4516:	8d 83       	std	Y+5, r24	; 0x05
    4518:	40 c0       	rjmp	.+128    	; 0x459a <main+0x12a8>
	else if (__tmp > 65535)
    451a:	6f 81       	ldd	r22, Y+7	; 0x07
    451c:	78 85       	ldd	r23, Y+8	; 0x08
    451e:	89 85       	ldd	r24, Y+9	; 0x09
    4520:	9a 85       	ldd	r25, Y+10	; 0x0a
    4522:	20 e0       	ldi	r18, 0x00	; 0
    4524:	3f ef       	ldi	r19, 0xFF	; 255
    4526:	4f e7       	ldi	r20, 0x7F	; 127
    4528:	57 e4       	ldi	r21, 0x47	; 71
    452a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    452e:	18 16       	cp	r1, r24
    4530:	54 f5       	brge	.+84     	; 0x4586 <main+0x1294>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4532:	6b 85       	ldd	r22, Y+11	; 0x0b
    4534:	7c 85       	ldd	r23, Y+12	; 0x0c
    4536:	8d 85       	ldd	r24, Y+13	; 0x0d
    4538:	9e 85       	ldd	r25, Y+14	; 0x0e
    453a:	20 e0       	ldi	r18, 0x00	; 0
    453c:	30 e0       	ldi	r19, 0x00	; 0
    453e:	40 e2       	ldi	r20, 0x20	; 32
    4540:	51 e4       	ldi	r21, 0x41	; 65
    4542:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4546:	dc 01       	movw	r26, r24
    4548:	cb 01       	movw	r24, r22
    454a:	bc 01       	movw	r22, r24
    454c:	cd 01       	movw	r24, r26
    454e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4552:	dc 01       	movw	r26, r24
    4554:	cb 01       	movw	r24, r22
    4556:	9e 83       	std	Y+6, r25	; 0x06
    4558:	8d 83       	std	Y+5, r24	; 0x05
    455a:	0f c0       	rjmp	.+30     	; 0x457a <main+0x1288>
    455c:	88 ec       	ldi	r24, 0xC8	; 200
    455e:	90 e0       	ldi	r25, 0x00	; 0
    4560:	9c 83       	std	Y+4, r25	; 0x04
    4562:	8b 83       	std	Y+3, r24	; 0x03
    4564:	8b 81       	ldd	r24, Y+3	; 0x03
    4566:	9c 81       	ldd	r25, Y+4	; 0x04
    4568:	01 97       	sbiw	r24, 0x01	; 1
    456a:	f1 f7       	brne	.-4      	; 0x4568 <main+0x1276>
    456c:	9c 83       	std	Y+4, r25	; 0x04
    456e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4570:	8d 81       	ldd	r24, Y+5	; 0x05
    4572:	9e 81       	ldd	r25, Y+6	; 0x06
    4574:	01 97       	sbiw	r24, 0x01	; 1
    4576:	9e 83       	std	Y+6, r25	; 0x06
    4578:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    457a:	8d 81       	ldd	r24, Y+5	; 0x05
    457c:	9e 81       	ldd	r25, Y+6	; 0x06
    457e:	00 97       	sbiw	r24, 0x00	; 0
    4580:	69 f7       	brne	.-38     	; 0x455c <main+0x126a>
    4582:	0c 94 a2 19 	jmp	0x3344	; 0x3344 <main+0x52>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4586:	6f 81       	ldd	r22, Y+7	; 0x07
    4588:	78 85       	ldd	r23, Y+8	; 0x08
    458a:	89 85       	ldd	r24, Y+9	; 0x09
    458c:	9a 85       	ldd	r25, Y+10	; 0x0a
    458e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4592:	dc 01       	movw	r26, r24
    4594:	cb 01       	movw	r24, r22
    4596:	9e 83       	std	Y+6, r25	; 0x06
    4598:	8d 83       	std	Y+5, r24	; 0x05
    459a:	8d 81       	ldd	r24, Y+5	; 0x05
    459c:	9e 81       	ldd	r25, Y+6	; 0x06
    459e:	9a 83       	std	Y+2, r25	; 0x02
    45a0:	89 83       	std	Y+1, r24	; 0x01
    45a2:	89 81       	ldd	r24, Y+1	; 0x01
    45a4:	9a 81       	ldd	r25, Y+2	; 0x02
    45a6:	01 97       	sbiw	r24, 0x01	; 1
    45a8:	f1 f7       	brne	.-4      	; 0x45a6 <main+0x12b4>
    45aa:	9a 83       	std	Y+2, r25	; 0x02
    45ac:	89 83       	std	Y+1, r24	; 0x01
    45ae:	0c 94 a2 19 	jmp	0x3344	; 0x3344 <main+0x52>
			_delay_ms(200);
		}
		else if(Local_u8DataReceive == 11)
    45b2:	fe 01       	movw	r30, r28
    45b4:	eb 53       	subi	r30, 0x3B	; 59
    45b6:	ff 4f       	sbci	r31, 0xFF	; 255
    45b8:	80 81       	ld	r24, Z
    45ba:	8b 30       	cpi	r24, 0x0B	; 11
    45bc:	11 f0       	breq	.+4      	; 0x45c2 <main+0x12d0>
    45be:	0c 94 a2 19 	jmp	0x3344	; 0x3344 <main+0x52>
		{
			BUZZER_voidSetSoundValue(0);
    45c2:	80 e0       	ldi	r24, 0x00	; 0
    45c4:	0e 94 17 08 	call	0x102e	; 0x102e <BUZZER_voidSetSoundValue>
    45c8:	0c 94 a2 19 	jmp	0x3344	; 0x3344 <main+0x52>

000045cc <__mulsi3>:
    45cc:	62 9f       	mul	r22, r18
    45ce:	d0 01       	movw	r26, r0
    45d0:	73 9f       	mul	r23, r19
    45d2:	f0 01       	movw	r30, r0
    45d4:	82 9f       	mul	r24, r18
    45d6:	e0 0d       	add	r30, r0
    45d8:	f1 1d       	adc	r31, r1
    45da:	64 9f       	mul	r22, r20
    45dc:	e0 0d       	add	r30, r0
    45de:	f1 1d       	adc	r31, r1
    45e0:	92 9f       	mul	r25, r18
    45e2:	f0 0d       	add	r31, r0
    45e4:	83 9f       	mul	r24, r19
    45e6:	f0 0d       	add	r31, r0
    45e8:	74 9f       	mul	r23, r20
    45ea:	f0 0d       	add	r31, r0
    45ec:	65 9f       	mul	r22, r21
    45ee:	f0 0d       	add	r31, r0
    45f0:	99 27       	eor	r25, r25
    45f2:	72 9f       	mul	r23, r18
    45f4:	b0 0d       	add	r27, r0
    45f6:	e1 1d       	adc	r30, r1
    45f8:	f9 1f       	adc	r31, r25
    45fa:	63 9f       	mul	r22, r19
    45fc:	b0 0d       	add	r27, r0
    45fe:	e1 1d       	adc	r30, r1
    4600:	f9 1f       	adc	r31, r25
    4602:	bd 01       	movw	r22, r26
    4604:	cf 01       	movw	r24, r30
    4606:	11 24       	eor	r1, r1
    4608:	08 95       	ret

0000460a <__udivmodhi4>:
    460a:	aa 1b       	sub	r26, r26
    460c:	bb 1b       	sub	r27, r27
    460e:	51 e1       	ldi	r21, 0x11	; 17
    4610:	07 c0       	rjmp	.+14     	; 0x4620 <__udivmodhi4_ep>

00004612 <__udivmodhi4_loop>:
    4612:	aa 1f       	adc	r26, r26
    4614:	bb 1f       	adc	r27, r27
    4616:	a6 17       	cp	r26, r22
    4618:	b7 07       	cpc	r27, r23
    461a:	10 f0       	brcs	.+4      	; 0x4620 <__udivmodhi4_ep>
    461c:	a6 1b       	sub	r26, r22
    461e:	b7 0b       	sbc	r27, r23

00004620 <__udivmodhi4_ep>:
    4620:	88 1f       	adc	r24, r24
    4622:	99 1f       	adc	r25, r25
    4624:	5a 95       	dec	r21
    4626:	a9 f7       	brne	.-22     	; 0x4612 <__udivmodhi4_loop>
    4628:	80 95       	com	r24
    462a:	90 95       	com	r25
    462c:	bc 01       	movw	r22, r24
    462e:	cd 01       	movw	r24, r26
    4630:	08 95       	ret

00004632 <__udivmodsi4>:
    4632:	a1 e2       	ldi	r26, 0x21	; 33
    4634:	1a 2e       	mov	r1, r26
    4636:	aa 1b       	sub	r26, r26
    4638:	bb 1b       	sub	r27, r27
    463a:	fd 01       	movw	r30, r26
    463c:	0d c0       	rjmp	.+26     	; 0x4658 <__udivmodsi4_ep>

0000463e <__udivmodsi4_loop>:
    463e:	aa 1f       	adc	r26, r26
    4640:	bb 1f       	adc	r27, r27
    4642:	ee 1f       	adc	r30, r30
    4644:	ff 1f       	adc	r31, r31
    4646:	a2 17       	cp	r26, r18
    4648:	b3 07       	cpc	r27, r19
    464a:	e4 07       	cpc	r30, r20
    464c:	f5 07       	cpc	r31, r21
    464e:	20 f0       	brcs	.+8      	; 0x4658 <__udivmodsi4_ep>
    4650:	a2 1b       	sub	r26, r18
    4652:	b3 0b       	sbc	r27, r19
    4654:	e4 0b       	sbc	r30, r20
    4656:	f5 0b       	sbc	r31, r21

00004658 <__udivmodsi4_ep>:
    4658:	66 1f       	adc	r22, r22
    465a:	77 1f       	adc	r23, r23
    465c:	88 1f       	adc	r24, r24
    465e:	99 1f       	adc	r25, r25
    4660:	1a 94       	dec	r1
    4662:	69 f7       	brne	.-38     	; 0x463e <__udivmodsi4_loop>
    4664:	60 95       	com	r22
    4666:	70 95       	com	r23
    4668:	80 95       	com	r24
    466a:	90 95       	com	r25
    466c:	9b 01       	movw	r18, r22
    466e:	ac 01       	movw	r20, r24
    4670:	bd 01       	movw	r22, r26
    4672:	cf 01       	movw	r24, r30
    4674:	08 95       	ret

00004676 <__prologue_saves__>:
    4676:	2f 92       	push	r2
    4678:	3f 92       	push	r3
    467a:	4f 92       	push	r4
    467c:	5f 92       	push	r5
    467e:	6f 92       	push	r6
    4680:	7f 92       	push	r7
    4682:	8f 92       	push	r8
    4684:	9f 92       	push	r9
    4686:	af 92       	push	r10
    4688:	bf 92       	push	r11
    468a:	cf 92       	push	r12
    468c:	df 92       	push	r13
    468e:	ef 92       	push	r14
    4690:	ff 92       	push	r15
    4692:	0f 93       	push	r16
    4694:	1f 93       	push	r17
    4696:	cf 93       	push	r28
    4698:	df 93       	push	r29
    469a:	cd b7       	in	r28, 0x3d	; 61
    469c:	de b7       	in	r29, 0x3e	; 62
    469e:	ca 1b       	sub	r28, r26
    46a0:	db 0b       	sbc	r29, r27
    46a2:	0f b6       	in	r0, 0x3f	; 63
    46a4:	f8 94       	cli
    46a6:	de bf       	out	0x3e, r29	; 62
    46a8:	0f be       	out	0x3f, r0	; 63
    46aa:	cd bf       	out	0x3d, r28	; 61
    46ac:	09 94       	ijmp

000046ae <__epilogue_restores__>:
    46ae:	2a 88       	ldd	r2, Y+18	; 0x12
    46b0:	39 88       	ldd	r3, Y+17	; 0x11
    46b2:	48 88       	ldd	r4, Y+16	; 0x10
    46b4:	5f 84       	ldd	r5, Y+15	; 0x0f
    46b6:	6e 84       	ldd	r6, Y+14	; 0x0e
    46b8:	7d 84       	ldd	r7, Y+13	; 0x0d
    46ba:	8c 84       	ldd	r8, Y+12	; 0x0c
    46bc:	9b 84       	ldd	r9, Y+11	; 0x0b
    46be:	aa 84       	ldd	r10, Y+10	; 0x0a
    46c0:	b9 84       	ldd	r11, Y+9	; 0x09
    46c2:	c8 84       	ldd	r12, Y+8	; 0x08
    46c4:	df 80       	ldd	r13, Y+7	; 0x07
    46c6:	ee 80       	ldd	r14, Y+6	; 0x06
    46c8:	fd 80       	ldd	r15, Y+5	; 0x05
    46ca:	0c 81       	ldd	r16, Y+4	; 0x04
    46cc:	1b 81       	ldd	r17, Y+3	; 0x03
    46ce:	aa 81       	ldd	r26, Y+2	; 0x02
    46d0:	b9 81       	ldd	r27, Y+1	; 0x01
    46d2:	ce 0f       	add	r28, r30
    46d4:	d1 1d       	adc	r29, r1
    46d6:	0f b6       	in	r0, 0x3f	; 63
    46d8:	f8 94       	cli
    46da:	de bf       	out	0x3e, r29	; 62
    46dc:	0f be       	out	0x3f, r0	; 63
    46de:	cd bf       	out	0x3d, r28	; 61
    46e0:	ed 01       	movw	r28, r26
    46e2:	08 95       	ret

000046e4 <_exit>:
    46e4:	f8 94       	cli

000046e6 <__stop_program>:
    46e6:	ff cf       	rjmp	.-2      	; 0x46e6 <__stop_program>
